<rss version="2.0">
  <channel>
    <title>Meet Gor - Tag: python</title>
    <link>meetgor.com</link>
    <description>Posts tagged with python</description>
    <language>en-us</language>
    <pubDate>Fri, 17 Oct 2025 16:57:38 UTC</pubDate>
    <item>
      <title>Gotcha with Chained Assignment in Python</title>
      <link>meetgor.com/python-chain-assignment-gotcha</link>
      <description>A lesson learned about Python&#39;s chained assignment with mutable objects, where all variables store references to the same object, leading to unexpected behaviour when one is modified.</description>
      <pubDate>Wed, 27 Nov 2024 00:00:00 UTC</pubDate>
      <content>I was writing some Python code and wanted to initialize a few variables to an empty list. Instead of creating separate lists for each variable, I decided to use chained assignments like this:&#xA;&#xA;```python&#xA;a = b = c = [1,2,3]&#xA;```&#xA;&#xA;It seems okay, nothing new, we are just assigning a, b, and c as an empty list. But notice the problem if you can.&#xA;&#xA;If we try to change the value of b, what do you think is going to happen?&#xA;&#xA;```python&#xA;b.append(4)&#xA;```&#xA;&#xA;If you didn’t know about how Python handles assignments, you might expect the variables to behave like this:&#xA;&#xA;* `a` should still be `[1, 2, 3]`&#xA;    &#xA;* `b` should be `[1, 2, 3, 4]` (since I modified b)&#xA;    &#xA;* `c` should remain `[1, 2, 3]`&#xA;    &#xA;&#xA;```python&#xA;# You might think it will be this&#xA;# a = [1,2,3]&#xA;# b = [1,2,3,4]&#xA;# c = [1,2,3]&#xA;```&#xA;&#xA;But, hello python, it hides the pointer magic behind this statement&#xA;&#xA;The actual and expected state of the variables is:&#xA;&#xA;```python&#xA;# But it is actually this&#xA;# a = [1,2,3,4]&#xA;# b = [1,2,3,4]&#xA;# c = [1,2,3,4]&#xA;```&#xA;&#xA;When you chain the assignment like this, all three variables refer to the same list object in memory. This means, that all the variables will hold the same object, this means that if you change any of the variables assigned that reference it will change the object, and that will result in changing all the variables since they are referring to the same variable.&#xA;&#xA;You are not creating three independent lists. Instead, all three variables (a, b, and c) are referencing the same list object in memory. They don’t hold copies of the list, they all point to the same object. In Python, this is called **reference assignment**.&#xA;&#xA;When you modify one of the variables (like appending to b), you’re not modifying just b, you’re modifying the single list object that all three variables are referencing. Since all three variables point to the same list, any change you make to the list will be reflected in all three variables.&#xA;&#xA;On the other hand, if I do the same thing with strings, like this:&#xA;&#xA;```python&#xA;a = b = c = &#34;hello&#34;&#xA;b = &#34;world&#34;&#xA;&#xA;# a = &#34;hello&#34;&#xA;# b = &#34;world&#34;&#xA;# c = &#34;hello&#34;&#xA;```&#xA;&#xA;This only mutates the b variable and not the a and c, since string is not a mutable object in Python.&#xA;&#xA;In Python, the objects are either [mutable or immutable](https://realpython.com/python-mutable-vs-immutable-types/)&#xA;&#xA;Some of the primitive data types are:&#xA;&#xA;Mutable Types:&#xA;&#xA;* List&#xA;    &#xA;* Dictionaries&#xA;    &#xA;* Set&#xA;    &#xA;* Byte Array&#xA;    &#xA;&#xA;Immutable Types:&#xA;&#xA;* Integer, Float, Complex&#xA;    &#xA;* String&#xA;    &#xA;* Tuple&#xA;    &#xA;* Bytes&#xA;    &#xA;* Boolean&#xA;    &#xA;* Frozenset&#xA;    &#xA;&#xA;So, suppose you assign multiple variables with the same value of a mutable type. In that case, the change in one variable will mutate the other variables as well since the underlying object in memory is the same.&#xA;&#xA;So, this is what I learned from the mistake, avoid the chining assignment when dealing with mutable objects&#xA;&#xA;Instead do the following:&#xA;&#xA;```python&#xA;a, b, c = [], [], []&#xA;b.append(256)&#xA;&#xA;# a = []&#xA;# b = [256]&#xA;# c = []&#xA;```&#xA;&#xA;This is safe and the right way to assign variables to individual values instead of the same value being referred to by all the variables.&#xA;&#xA;Happy Coding :)&#xA;</content>
      <type>til</type>
    </item>
    <item>
      <title>Turn Python dictionary into a neat CSV table</title>
      <link>meetgor.com/python-dict-to-csv-table</link>
      <description>Exploring how to write python dict/key-value pairs and a table-like structure to a CSV file.</description>
      <pubDate>Wed, 20 Mar 2024 00:00:00 UTC</pubDate>
      <content>## Populating a Python dict having a table-like structure to a CSV&#xA;&#xA;Today, I want to share with you a neat trick I recently discovered for populating a CSV file with data in a table-like structure using Python.&#xA;&#xA;### Writing Key-Value Pairs to a CSV Row&#xA;&#xA;Firstly, let&#39;s discuss the `write_key_value` function. This function allows us to write key-value pairs to a CSV row. It&#39;s particularly useful when dealing with metrics or data that can be represented as simple pairs.&#xA;&#xA;```python&#xA;# Function to populate a CSV row with key-value pairs&#xA;def write_key_value(writer, dictionary):&#xA;    for key, value in dictionary.items():&#xA;        writer.writerow([key, value])&#xA;```&#xA;&#xA;### Writing a Table-Like Structure to a CSV File&#xA;&#xA;Now, let&#39;s dive into the `write_table` function, which handles more complex scenarios where the data follows a table-like structure. This function takes into account different types of metrics and adjusts the CSV table structure accordingly.&#xA;&#xA;Assuming you have a structure of the dictionary like:&#xA;&#xA;```python&#xA;data = {&#xA;    &#34;Students&#34;: {&#xA;        &#34;John Doe&#34;: {&#xA;            &#34;course&#34;: &#34;Mathematics&#34;,&#xA;            &#34;grade&#34;: &#34;A&#34;,&#xA;            &#34;attendance&#34;: 95,&#xA;            &#34;assignments_completed&#34;: 15,&#xA;            &#34;student_id&#34;: &#34;JD001&#34;&#xA;        },&#xA;        &#34;Alice Smith&#34;: {&#xA;            &#34;course&#34;: &#34;Physics&#34;,&#xA;            &#34;grade&#34;: &#34;B+&#34;,&#xA;            &#34;attendance&#34;: 85,&#xA;            &#34;assignments_completed&#34;: 12,&#xA;            &#34;student_id&#34;: &#34;AS002&#34;&#xA;        },&#xA;        &#34;Bob Johnson&#34;: {&#xA;            &#34;course&#34;: &#34;Computer Science&#34;,&#xA;            &#34;grade&#34;: &#34;A-&#34;,&#xA;            &#34;attendance&#34;: 90,&#xA;            &#34;assignments_completed&#34;: 14,&#xA;            &#34;student_id&#34;: &#34;BJ003&#34;&#xA;        }&#xA;    }&#xA;}&#xA;```&#xA;&#xA;And you want to write it to a CSV file, like this:&#xA;&#xA;```csv&#xA;student, course, grade, attendance, assignments_completed, student_id&#xA;John Doe, Mathematics, A, 95, 15, JD001&#xA;Alice Smith, Physics, B+, 85, 12, AS002&#xA;Bob Johnson, Computer Science, A-, 90, 14, BJ003&#xA;```&#xA;&#xA;We can create a function `write_table` that will take in the `dictionary` as the actual data. We want to store the keys of the inner dictionary to be the header/columns of the csv file. As we can see the keys of the inner dict i.e. the value for the key `John Doe` is a dict with the keys `course`, `grade`, `attendance`, etc. which remain the same for the all the keys in the dictionary.&#xA;&#xA;So, we can first create a `row_keys` variable to store the keys of the actual dictionary this will be the first column rows in the csv. &#xA;&#xA;Further we check if the `row_keys` is a dict and then we append it with the `index_key` which will be the first column in the csv. Since all the keys remain the same for the inner-dict, we can pick the first dict and create the `header` with the inner-dict keys.&#xA;&#xA;So, we can write the list `header` to the csv file.&#xA;&#xA;Then for each key in the `row_keys` we can create a list `row` with the key and the values of the inner-dict.&#xA;&#xA;&#xA;```python&#xA;# Function to populate a CSV with a table-like structure&#xA;def write_table(writer, dictionary, index_key):&#xA;&#xA;    row_keys = list(dictionary.keys())&#xA;&#xA;    if row_keys and data[row_keys[0]] is not None:&#xA;        headers = [index_key] + list(&#xA;            dictionary[row_keys[0]].keys()&#xA;        )&#xA;    else:&#xA;        return&#xA;    writer.writerow(headers)&#xA;    for key in row_keys:&#xA;        row = [key] + list(dictionary[key].values())&#xA;        writer.writerow(row)&#xA;&#xA;&#xA;with open(&#39;data.csv&#39;, &#39;w&#39;, newline=&#39;&#39;) as csvfile:&#xA;    writer = csv.writer(csvfile)&#xA;    for key in data:&#xA;        write_table(writer, data[key], key)&#xA;```&#xA;&#xA;### Example Usage&#xA;&#xA;To illustrate how these functions can be used, let&#39;s consider a scenario where we have various types of metrics to populate into a CSV file. We handle key-value paired metrics separately and then populate the CSV with table-like metrics.&#xA;&#xA;```python&#xA;import csv&#xA;&#xA;data = {&#xA;    &#34;Students&#34;: {&#xA;        &#34;John Doe&#34;: {&#xA;            &#34;course&#34;: &#34;Mathematics&#34;,&#xA;            &#34;grade&#34;: &#34;A&#34;,&#xA;            &#34;attendance&#34;: 95,&#xA;            &#34;assignments_completed&#34;: 15,&#xA;            &#34;student_id&#34;: &#34;JD001&#34;&#xA;        },&#xA;        &#34;Alice Smith&#34;: {&#xA;            &#34;course&#34;: &#34;Physics&#34;,&#xA;            &#34;grade&#34;: &#34;B+&#34;,&#xA;            &#34;attendance&#34;: 85,&#xA;            &#34;assignments_completed&#34;: 12,&#xA;            &#34;student_id&#34;: &#34;AS002&#34;&#xA;        },&#xA;        &#34;Bob Johnson&#34;: {&#xA;            &#34;course&#34;: &#34;Computer Science&#34;,&#xA;            &#34;grade&#34;: &#34;A-&#34;,&#xA;            &#34;attendance&#34;: 90,&#xA;            &#34;assignments_completed&#34;: 14,&#xA;            &#34;student_id&#34;: &#34;BJ003&#34;&#xA;        }&#xA;    },&#xA;    &#34;Countries&#34;: {&#xA;        &#34;USA&#34;: {&#xA;            &#34;capital&#34;: &#34;Washington, D.C.&#34;,&#xA;            &#34;population&#34;: 331000000,&#xA;            &#34;area_sq_km&#34;: 9833517,&#xA;            &#34;official_languages&#34;: [&#34;English&#34;, &#34;Spanish&#34;],&#xA;            &#34;currency&#34;: &#34;United States Dollar (USD)&#34;&#xA;        },&#xA;        &#34;India&#34;: {&#xA;            &#34;capital&#34;: &#34;New Delhi&#34;,&#xA;            &#34;population&#34;: 1380004385,&#xA;            &#34;area_sq_km&#34;: 3287263,&#xA;            &#34;official_languages&#34;: [&#34;Hindi&#34;, &#34;English&#34;],&#xA;            &#34;currency&#34;: &#34;Indian Rupee (INR)&#34;&#xA;        },&#xA;        &#34;Brazil&#34;: {&#xA;            &#34;capital&#34;: &#34;Brasília&#34;,&#xA;            &#34;population&#34;: 212559417,&#xA;            &#34;area_sq_km&#34;: 8515770,&#xA;            &#34;official_languages&#34;: [&#34;Portuguese&#34;],&#xA;            &#34;currency&#34;: &#34;Brazilian Real (BRL)&#34;&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;def populate_table(writer, data, index_key):&#xA;    row_keys = list(data.keys())&#xA;    if row_keys and data[row_keys[0]] is not None:&#xA;        headers = [index_key] + list(data[row_keys[0]].keys())&#xA;    else:&#xA;        return&#xA;    writer.writerow(headers)&#xA;    for key in row_keys:&#xA;        row = [key] + list(data[key].values())&#xA;        writer.writerow(row)&#xA;&#xA;&#xA;with open(&#39;data.csv&#39;, &#39;w&#39;, newline=&#39;&#39;) as csvfile:&#xA;    writer = csv.writer(csvfile)&#xA;    for key in data:&#xA;        populate_table(writer, data[key], key)&#xA;        writer.writerow([])&#xA;```&#xA;&#xA;```csv&#xA;Students,course,grade,attendance,assignments_completed,student_id&#xA;John Doe,Mathematics,A,95,15,JD001&#xA;Alice Smith,Physics,B+,85,12,AS002&#xA;Bob Johnson,Computer Science,A-,90,14,BJ003&#xA;&#xA;Countries,capital,population,area_sq_km,official_languages,currency&#xA;USA,&#34;Washington, D.C.&#34;,331000000,9833517,&#34;[&#39;English&#39;, &#39;Spanish&#39;]&#34;,United States Dollar (USD)&#xA;India,New Delhi,1380004385,3287263,&#34;[&#39;Hindi&#39;, &#39;English&#39;]&#34;,Indian Rupee (INR)&#xA;Brazil,Brasília,212559417,8515770,[&#39;Portuguese&#39;],Brazilian Real (BRL)&#xA;```&#xA;&#xA;Thank you, Happy Coding :)&#xA;</content>
      <type>til</type>
    </item>
    <item>
      <title>Creating a Chat Application with Django and HTMX</title>
      <link>meetgor.com/django-htmx-chat-app</link>
      <description>Building a async, websocket based chat application using django, channels and htmx. With this chat application, the user can create and join rooms and send and recieve messages.</description>
      <pubDate>Sun, 05 Feb 2023 00:00:00 UTC</pubDate>
      <content>&#xA;# Django + HTMX Chat application&#xA;&#xA;## Introduction&#xA;&#xA;In this article, we will be creating a Django project, which will be a chat-room kind of application. The user needs to authenticate to the app and then and there he/she can create or join rooms, every room will have some name and URL associated with it. So, the user simply needs to enter the name of the room, which will be unique. The user can then simply enter the messages in the chat room. This is a core chat application that uses web sockets.&#xA;&#xA;The unique thing about this app will be that, we don&#39;t have to write a javascript client. It will all be handled by some HTMX magic. The web socket in the backend will definitely handle using Django channels.&#xA;&#xA;Demo:&#xA;&#xA;![Demonstration of the Chat App](https://meetgor-cdn.pages.dev/django-htmx/chat-app-demo.webm)&#xA;&#xA;[GitHub Repository](https://github.com/Mr-Destructive/django-htmx-chat)&#xA;&#xA;### Requirements:&#xA;&#xA;* Django&#xA;    &#xA;* Django-channels&#xA;    &#xA;* daphne&#xA;    &#xA;* HTMX&#xA;    &#xA;* SQLite or any relational database&#xA;    &#xA;&#xA;Also if we want to use the application on a large and production scale:&#xA;&#xA;* Redis&#xA;    &#xA;* channels_redis&#xA;&#xA;The code for this chat app is provided in the [GitHub repository](https://github.com/Mr-Destructive/django-htmx-chat).&#xA;&#xA;## Setup for Django project&#xA;&#xA;We will create a simple Django project to start with. The project can have two apps, one for auth and the other for the chat. You can customize the way you want your existing project accordingly. This project is just a demonstration of the use of the chat application with websockets and Django channels.&#xA;&#xA;I&#39;ll call the project `backchat`, you can call it whatever you want. We will create a virtual environment and install Django in that virtual environment&#xA;&#xA;```bash&#xA;virtualenv .venv&#xA;&#xA;For Linux/macOS:&#xA;source .venv/bin/activate&#xA;&#xA;For Windows:&#xA;.venv\scripts�ctivate&#xA;&#xA;pip install django&#xA;django-admin startproject backchat&#xA;cd backchat&#xA;```&#xA;&#xA;This will set up a base Django project. We can now work on the actual implementation of the Django project. Firstly, we will start with authentication.&#xA;&#xA;## Adding basic Authentication and Authorization&#xA;&#xA;### Creating the accounts app&#xA;&#xA;We can separate the authentication of the user from the rest of the project, by creating a separate app called `user` or `accounts` app.&#xA;&#xA;```bash&#xA;python manage.py startapp accounts&#xA;```&#xA;&#xA;### Creating a base user model&#xA;&#xA;We&#39;ll start by inheriting the [AbstractUser](https://docs.djangoproject.com/en/4.1/topics/auth/customizing/#using-a-custom-user-model-when-starting-a-project) the model provided in the `django.contrib.auth.models` module. The model has base fields like `username` and `password` which are required fields, and `email`, `first_name`, `last_name`, etc. which are not mandatory. It is better to create a custom model by inheriting the `AbstractUser` because if in the longer run, we need to make custom fields in the user model, it becomes a breeze.&#xA;&#xA;```python&#xA;# accounts/models.py&#xA;&#xA;&#xA;from djnago.contrib.auth.models import AbstractUser&#xA;&#xA;&#xA;class User(AbstractUser):&#xA;    pass&#xA;```&#xA;&#xA;This creates a basic custom user rather than using the Django built-in user. Next, we need to make sure, Django understands the default user is the one we defined in the `accounts` app and not the default `User`. So, we just need to add a field called `AUTH_USER_MODEL` in the `settings.py` file. The value of this field will be the app name or the module name and the model in that python module that we need our custom user model to be set as the default user model.&#xA;&#xA;```python&#xA;# backchat/settings.py&#xA;&#xA;&#xA;INSALLED_APPS = [&#xA;    ...&#xA;    ...&#xA;    &#34;accounts&#34;,&#xA;]&#xA;&#xA;# Append to the end of file&#xA;AUTH_USER_MODEL = &#39;accounts.User&#39;&#xA;```&#xA;&#xA;### Initial migrations for the Django project&#xA;&#xA;Now, this will get picked up as the default user model while referring to any processing related to the user. We can move into migrating the changes for the basic Django project and the user model.&#xA;&#xA;```bash&#xA;python manage.py makemigrations&#xA;python manage.py migrate&#xA;```&#xA;&#xA;![initial migration for base django and user model](https://meetgor-cdn.pages.dev/django-htmx/chat-accounts-migrations.png)&#xA;&#xA;### Creating register view&#xA;&#xA;Further, we can add the views like register and profile for the accounts app that can be used for the basic authentication. The Login and Logout views are provided in the `django.contrib.auth.views` module, we only have to write our own register view. I will be using function-based views to keep it simple to understand but it can simply be a class-based view as well.&#xA;&#xA;To define a view first, we need to have form, a user registration form. The form will inherit from the [UserCreationForm](https://docs.djangoproject.com/en/4.1/topics/auth/default/#django.contrib.auth.forms.UserCreationForm) form which will make the bulk of the task for us at the user registration. We can simply then override the Meta class with the fields that we want to display, so hence we just keep the `username` and the `password` fields. The form can be customized by adding in the widget attribute and specifying the classes used in them.&#xA;&#xA;```python&#xA;# accounts/forms.py&#xA;&#xA;&#xA;from accounts.models import User&#xA;from django.contrib.auth.forms import UserCreationForm&#xA;&#xA;class UserRegisterForm(UserCreationForm):&#xA;&#xA;    class Meta:&#xA;        model= User&#xA;        fields = [&#39;username&#39;, &#39;password1&#39;, &#39;password2&#39;]&#xA;```&#xA;&#xA;This will give us the `UserRegisterForm` form that can be used for displaying in the register view that we will create in the next step.&#xA;&#xA;We will have to create the register view that will render the form for user registration and will also process the form submission.&#xA;&#xA;```python&#xA;# accounts/views.py&#xA;&#xA;&#xA;from django.contrib import messages&#xA;from django.shortcuts import redirect, render&#xA;from accounts.forms import UserRegisterForm&#xA;&#xA;def register(request):&#xA;    if request.method == &#34;POST&#34;:&#xA;        form = UserRegisterForm(request.POST)&#xA;        if form.is_valid():&#xA;            form.save()&#xA;            username = form.cleaned_data.get(&#34;username&#34;)&#xA;            messages.success(&#xA;                request, f&#34;Your account has been created! You are now able to log in&#34;&#xA;            )&#xA;            return redirect(&#34;login&#34;)&#xA;    else:&#xA;        form = UserRegisterForm()&#xA;        return render(request, &#34;accounts/register.html&#34;, {&#34;form&#34;: form})&#xA;```&#xA;&#xA;The above register view has two cases, one for the user requesting the registration form and the second request when the user submits the form. So, when the user makes a get request, we load an empty form `UserRegisterForm` and render the `register` template with the form. We will make the templates later.&#xA;&#xA;So, the template is just rendered when the user wants to register and when the user submits the form(sends a post request) we get the details from the post request and make it an instance of `UserRegisterForm` and save the form if it is valid. We then redirect the user to the login view (will use the default one in the next section). We parse the message as the indication that the user was created.&#xA;&#xA;### Adding URLs for Authentication and Authorization&#xA;&#xA;Once, we have the register view setup, we can also add login and logout views in the app. But, we don&#39;t have to write it ourselves, we can override them if needed, but we&#39;ll keep the default ones. We will use the [LoginView](https://docs.djangoproject.com/en/4.1/topics/auth/default/#django.contrib.auth.views.LoginView) and the [LogoutView](https://docs.djangoproject.com/en/4.1/topics/auth/default/#django.contrib.auth.views.LogoutView) view which are class-based views provided in the `django.contrib.auth.views` module. We will provide the respective templates for each of these views.&#xA;&#xA;```python&#xA;# accounts/urls.py&#xA;&#xA;&#xA;from django.urls import path&#xA;from django.contrib.auth import views as auth_views&#xA;import user.views as user_views&#xA;&#xA;urlpatterns = [&#xA;    path(&#34;register/&#34;, user_views.register, name=&#34;register&#34;),&#xA;    path(&#xA;        &#34;login/&#34;,&#xA;        auth_views.LoginView.as_view(template_name=&#34;accounts/login.html&#34;),&#xA;        name=&#34;login&#34;,&#xA;    ),&#xA;    path(&#xA;        &#34;logout/&#34;,&#xA;        auth_views.LogoutView.as_view(template_name=&#34;accounts/logout.html&#34;),&#xA;        name=&#34;logout&#34;,&#xA;    ),&#xA;]&#xA;```&#xA;&#xA;We have named the URLs as `register`, `login`, and `logout` so that we can use them while rendering the links for them in the templates. Now, we also need to include the URLs from the accounts app in the project URLs. We can do that by using the `include` method and specifying the app name with the module where the urlpatterns are located.&#xA;&#xA;```python&#xA;# backchat/urls.py&#xA;&#xA;&#xA;from django.contrib import admin&#xA;from django.urls import include, path&#xA;&#xA;urlpatterns = [&#xA;    path(&#34;admin/&#34;, admin.site.urls),&#xA;    path(&#34;auth/&#34;, include(&#34;accounts.urls&#34;)),&#xA;]&#xA;```&#xA;&#xA;So, we have routed the `/auth` path to include all the URLs in the accounts app. So, the login view will be at the URL `/auth/login/` , and so on.&#xA;&#xA;Also, we need to add the `LOGIN_REDIRECT_URL` and `LOGIN_URL` for specifying the url name which will be redirected once the user is logged in and the default login url name respectively.&#xA;&#xA;```python&#xA;# backchat / settings.py&#xA;&#xA;&#xA;LOGIN_REDIRECT_URL = &#34;index&#34;&#xA;LOGIN_URL = &#34;login&#34;&#xA;```&#xA;&#xA;We are now almost done with the view and routing part of the accounts app and can move into the creation of templates.&#xA;&#xA;### Adding Templates for authentication views&#xA;&#xA;We need a few templates that we have been referencing in the views and the URLs of the accounts app in the project. So there are a couple of ways to use templates in a Django project. I prefer to have a single templates folder in the root of the project and have subfolders as the app which will have the templates specific to those apps.&#xA;&#xA;I usually create a `base.html` file in the templates folder and use that for inheriting other templates. So, we will have to change one setting in the project to make sure it looks at `templates/` from the root of the project.&#xA;&#xA;```bash&#xA;# backchat/settings.py&#xA;&#xA;import os&#xA;&#xA;...&#xA;...&#xA;&#xA;TEMPLATES = [&#xA;    {&#xA;        &#34;BACKEND&#34;: &#34;django.template.backends.django.DjangoTemplates&#34;,&#xA;        &#34;DIRS&#34;: [ os.path.join(BASE_DIR, &#34;templates&#34;), ],&#xA;        &#34;APP_DIRS&#34;: True,&#xA;        &#34;OPTIONS&#34;: {&#xA;            &#34;context_processors&#34;: [&#xA;                &#34;django.template.context_processors.debug&#34;,&#xA;                &#34;django.template.context_processors.request&#34;,&#xA;                &#34;django.contrib.auth.context_processors.auth&#34;,&#xA;                &#34;django.contrib.messages.context_processors.messages&#34;,&#xA;            ],&#xA;        },&#xA;    },&#xA;]&#xA;```&#xA;&#xA;Then create the folder in the same path as you see your `manage.py` file.&#xA;&#xA;```bash&#xA;mkdir templates&#xA;```&#xA;&#xA;![Template Set Up](https://meetgor-cdn.pages.dev/django-htmx/chat-mkdir-templates.png)&#xA;&#xA;#### Creating the base template&#xA;&#xA;The below will be the base template used for the chat application, you can custmize it as per your needs.&#xA;&#xA;```html&#xA;&lt;!DOCTYPE html&gt;&#xA;&lt;html&gt;&#xA;    &lt;head&gt;&#xA;        &lt;meta charset=&#34;utf-8&#34; /&gt;&#xA;        &lt;title&gt;Chat App&lt;/title&gt;&#xA;        {% load static %}&#xA;        &lt;script src=&#34;https://unpkg.com/htmx.org@1.8.5&#34;&gt;&lt;/script&gt;&#xA;    &lt;/head&gt;&#xA;    &lt;body&gt;&#xA;        {% if user.is_authenticated %}&#xA;            &lt;a href=&#34;{% url &#39;logout&#39; %}&#34;&gt;Logout&lt;/a&gt;&#xA;        {% else %}&#xA;            &lt;a href=&#34;{% url &#39;login&#39; %}&#34;&gt;Login&lt;/a&gt;&#xA;        {% endif %}&#xA;        &lt;h1&gt;Back Chat&lt;/h1&gt;&#xA;        {% block base %}&#xA;        {% endblock %}&#xA;    &lt;/body&gt;&#xA;&lt;/html&gt;&#xA;```&#xA;&#xA;We have included the [htmx](https://htmx.org/docs/#installing) package as the script into this template as we will be using it in the actual part of chat application.&#xA;&#xA;#### Creating the Register Template&#xA;&#xA;```html&#xA;# templates / accounts / register.html&#xA;&#xA;&#xA;{% extends &#39;base.html&#39; %}&#xA;{% block base %}&#xA;    &lt;div class=&#34;content-section&#34;&gt;&#xA;        &lt;form method=&#34;POST&#34;&gt;&#xA;            {% csrf_token %}&#xA;            &lt;fieldset class=&#34;form-group&#34;&gt;&#xA;                &lt;legend class=&#34;border-bottom mb-4&#34;&gt;Register Now&lt;/legend&gt;&#xA;                {{ form.as_p }}&#xA;            &lt;/fieldset&gt;&#xA;            &lt;div class=&#34;form-group&#34;&gt;&#xA;                &lt;button class=&#34;btn btn-outline-info&#34; type=&#34;submit&#34;&gt;Sign Up&lt;/button&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/form&gt;&#xA;        &lt;div class=&#34;border-top pt-3&#34;&gt;&#xA;            &lt;small class=&#34;text-muted&#34;&gt;&#xA;&#x9;&#x9;    Already Have An Account? &lt;a class=&#34;ml-2&#34; href=&#34;{% url &#39;login&#39; %}&#34;&gt;Log In&lt;/a&gt;&#xA;            &lt;/small&gt;&#xA;        &lt;/div&gt;&#xA;    &lt;/div&gt;&#xA;{% endblock %}&#xA;```&#xA;&#xA;![User Registration Page](https://meetgor-cdn.pages.dev/django-htmx/chat-register-page.png)&#xA;&#xA;#### Creating the Login Template&#xA;&#xA;```html&#xA;# templates / accounts / login.html    &#xA;&#xA;&#xA;{% extends &#39;base.html&#39; %}&#xA;{% block base %}&#xA;    &lt;div class=&#34;content-section&#34; id=&#34;login&#34;&gt;&#xA;        &lt;form method=&#34;POST&#34; &gt;&#xA;            {% csrf_token %}&#xA;            &lt;fieldset class=&#34;form-group&#34;&gt;&#xA;                &lt;legend class=&#34;border-bottom mb-4&#34;&gt;LOG IN&lt;/legend&gt;&#xA;                {{ form.as_p }}&#xA;            &lt;/fieldset&gt;&#xA;            &lt;div class=&#34;form-group&#34;&gt;&#xA;                &lt;button class=&#34;btn btn-outline-info&#34; type=&#34;submit&#34;&gt;Log In&lt;/button&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/form&gt;&#xA;        &lt;div class=&#34;border-top pt-3&#34;&gt;&#xA;            &lt;small class=&#34;text-muted&#34;&gt;&#xA;                Register Here &lt;a class=&#34;ml-2&#34; href=&#34;{% url &#39;register&#39; %}&#34;&gt;Sign Up&lt;/a&gt;&#xA;            &lt;/small&gt;&#xA;        &lt;/div&gt;&#xA;    &lt;/div&gt;&#xA;{% endblock %}&#xA;```&#xA;&#xA;![User Login Page](https://meetgor-cdn.pages.dev/django-htmx/chat-login-page.png)&#xA;&#xA;Creating the Logout Template&#xA;&#xA;```html&#xA;# templates / accounts / logout.html    &#xA;&#xA;&#xA;{% extends &#39;base.html&#39; %}&#xA;{% block base %}&#xA;    &lt;h2&gt;You have been logged out&lt;/h2&gt;&#xA;    &lt;div class=&#34;border-top pt-3&#34;&gt;&#xA;        &lt;small class=&#34;text-muted&#34;&gt;&#xA;            &lt;a href=&#34;{% url &#39;login&#39; %}&#34;&gt;Log In Again&lt;/a&gt;&#xA;        &lt;/small&gt;&#xA;    &lt;/div&gt;&#xA;{% endblock %}&#xA;```&#xA;&#xA;## Install and setup channels&#xA;&#xA;We will be using channels to create long-running connections, it is a wrapper around Django&#39;s asynchronous components and allows us to incorporate other protocols like web sockets and other asynchronous protocols.&#xA;&#xA;So, we will be using the Django channels package that will allow us to use the WebSocket protocol in the chat application. [WebSocket](https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API) is a communication protocol(set of rules and standards to be followed) that allows both the client and server to send and receive messages(communication).&#xA;&#xA;To install Django channels, we can use pip and install channels with daphne which will be used as the web server gateway interface for asynchronous web applications.&#xA;&#xA;```bash&#xA;pip install -U channels[&#34;daphne&#34;]&#xA;```&#xA;&#xA;So this will install the latest version of channels and daphne. We now have [channels](https://channels.readthedocs.io/en/stable/installation.html) in our Django project, we simply need to configure the `CHANNEL_LAYER` config for specifying the backend used that can be `Redis`, `In-Memory`, or others. We need to add `channels` , `daphne` to the `INSALLED_APPS` config of the project. Make sure the `daphne` app is on top of the applications list.&#xA;&#xA;```bash&#xA;# backchat/settings.py&#xA;&#xA;...&#xA;...&#xA;&#xA;INSALLED_APPS = [&#xA;    &#34;daphne&#34;,&#xA;    ...&#xA;    ...&#xA;    &#34;channels&#34;,&#xA;]&#xA;&#xA;&#xA;ASGI_APPLICATION = &#34;backchat.asgi.application&#34;&#xA;&#xA;...&#xA;...&#xA;&#xA;# For InMemory channels&#xA;&#xA;CHANNEL_LAYERS = {&#xA;    &#39;default&#39;: {&#xA;        &#34;BACKEND&#34;: &#34;channels.layers.InMemoryChannelLayer&#34;,&#xA;    }&#xA;}&#xA;&#xA;&#xA;# For Redis&#xA;&#xA;CHANNEL_LAYERS = {&#xA;    &#34;default&#34;: {&#xA;        &#34;BACKEND&#34;: &#34;asgi_redis.RedisChannelLayer&#34;,&#xA;        &#34;CONFIG&#34;: {&#xA;            &#34;hosts&#34;: [(&#34;redis-host-url&#34;, 6379)],&#xA;        },&#xA;    },&#xA;}&#xA;```&#xA;&#xA;### Redis Configuration (Optional)&#xA;&#xA;You can either use the [InMemoryChannelLayer](https://channels.readthedocs.io/en/latest/topics/channel_layers.html) or you can use them `RedisChannelLayer` for the backend of the chat app. There are other types of backends like `Amazon SQS` services, `RabbitMQ`, `Kafka`, `Google Cloud Pub/Sub`, etc. I will be creating the app with only the `InMemoryChannelLayer` but will provide a guide for redis as well, both are quite similar and only have a few nuances.&#xA;&#xA;We need to install [channels_redis](https://github.com/django/channels_redis/) it for integrating redis in the Django project with channels.&#xA;&#xA;```bash&#xA;pip install channels_redis&#xA;```&#xA;&#xA;So, this will make the `channels_redis` package available in the project, we use this package for real-time storage, in the case of the chat app, we might use it for storing messages or room details, etc.&#xA;&#xA;## Creating the Chat App&#xA;&#xA;Further, we now can create another app for handling the rooms and chat application logic. This app will have its own models, views, and URLs. Also, we will define consumers and routers just like views and URLs but for asynchronous connections. More on that soon.&#xA;&#xA;So, let&#39;s create the `chat` app.&#xA;&#xA;```bash&#xA;python manage.py startapp chat&#xA;```&#xA;&#xA;Then we will add the chat app to the `INSALLED_APPS` config.&#xA;&#xA;```python&#xA;# backchat/settings.py&#xA;&#xA;INSALLED_APPS = [&#xA;    ...&#xA;    ...,&#xA;    &#34;chat&#34;,&#xA;]&#xA;```&#xA;&#xA;So, this will make sure to load the chat app in the project. Whenever we run any commands like migrations or running the server, it keeps the app in the `INSALLED_APPS` checked up.&#xA;&#xA;### Defining models&#xA;&#xA;This is optional, but we&#39;ll do it for since we are making a Django app. We already have an auth system configured, adding rooms and authorizing the users will become easier then.&#xA;&#xA;So, let&#39;s create the models for the chat app which will be the `Room`.&#xA;&#xA;```python&#xA;# chat/models.py&#xA;&#xA;&#xA;from django.db import models&#xA;from accounts.models import User&#xA;&#xA;class Room(models.Model):&#xA;    name = models.CharField(max_length=128)&#xA;    slug = models.SlugField(unique=True)&#xA;    users = models.ManyToManyField(User)&#xA;&#xA;    def __str__(self):&#xA;        return self.name&#xA;&#xA;&#xA;class Message(models.Model):&#xA;    room = models.ForeignKey(Room, on_delete=models.CASCADE)&#xA;    user = models.ForeignKey(User, on_delete=models.CASCADE)&#xA;    message = models.TextField()&#xA;    created_at = models.DateTimeField(auto_now_add=True)&#xA;&#xA;    def __str__(self):&#xA;        return (&#xA;            self.room.name + &#34; - &#34; +&#xA;            str(self.user.username) + &#34; : &#34; +&#xA;            str(self.message)&#xA;        )&#xA;```&#xA;&#xA;So, we simply have the name which will be taken from the user, and the slug which will be served as the URL to the room. The users are set as [ManyToManyField](https://docs.djangoproject.com/en/4.1/ref/models/fields/#django.db.models.ManyToManyField) since one room can have multiple users and a user can be in multiple rooms. Also we are creating the model `Message` that will be storing the room and the user as the foreign key and the actual text as the message, we can improve the security by encrypting the text but it&#39;s not the point of this article.&#xA;&#xA;We have set the `created_at` the field which will set the time when the object was created. Finally, the dunder string method is used for representing the message object as a price of the concatenation of strings of room name, username, and the message. This is useful for admin stuff as it makes it easier to read the object rather than the default id.&#xA;&#xA;Now, once the models are designed we can migrate the models into the database.&#xA;```&#xA;python manage.py makemigrations&#xA;python manage.py migrate&#xA;```&#xA;&#xA;![Chat app migrations](https://meetgor-cdn.pages.dev/django-htmx/chat-migrations.png)&#xA;&#xA;We now have a decent model structure for the chat application. We can now start the crux of the application i.e. consumers and routing with channels.&#xA;&#xA;### Writing consumers and routers for WebSockets&#xA;&#xA;So, we start with the bare bones provided in the tutorial on the channel [documentation](https://channels.readthedocs.io/en/stable/tutorial/part_3.html). We create a class (consumer) called `ChatConsumer` which inherits from the `AsyncWebsocketConsumer` provided by the `channels.generic.websocket` module. This has a few methods like `connect`, `disconnect`, and `receive`. These are the building blocks of a consumer. We define these methods as they will be used for communication via the WebSocket protocol through the channels interface.&#xA;&#xA;In the following block of code, we are essentially doing the following:&#xA;&#xA;* Accepting connection on the requested room name&#xA;    &#xA;* Sending and Receiving messages on the room/group&#xA;    &#xA;* Closing the WebSocket connection and removing the client from the room/group&#xA;    &#xA;&#xA;```python&#xA;# chat/consumers.py&#xA;&#xA;&#xA;import json&#xA;&#xA;from asgiref.sync import sync_to_async&#xA;from channels.generic.websocket import AsyncWebsocketConsumer&#xA;&#xA;from chat.models import Room, Message&#xA;&#xA;&#xA;class ChatConsumer(AsyncWebsocketConsumer):&#xA;    async def connect(self):&#xA;        self.room_name = self.scope[&#34;url_route&#34;][&#34;kwargs&#34;][&#34;room_slug&#34;]&#xA;        self.room_group_name = f&#34;chat_{self.room_name}&#34;&#xA;        self.user = self.scope[&#34;user&#34;]&#xA;&#xA;        await self.channel_layer.group_add(&#xA;            self.room_group_name, self.channel_name&#xA;        )&#xA;&#xA;        await self.accept()&#xA;&#xA;    async def disconnect(self, close_code):&#xA;        await self.channel_layer.group_discard(&#xA;            self.room_group_name, self.channel_name&#xA;        )&#xA;&#xA;    async def receive(self, text_data):&#xA;        text_data_json = json.loads(text_data)&#xA;        message = text_data_json[&#34;message&#34;]&#xA;        username = self.user.username&#xA;        &#xA;        await self.channel_layer.group_send(&#xA;            self.room_group_name, &#xA;            {&#xA;                &#34;type&#34;: &#34;chat_message&#34;,&#xA;                &#34;message&#34;: message,&#xA;                &#34;username&#34;: username,&#xA;            }&#xA;        )&#xA;&#xA;    async def chat_message(self, event):&#xA;        message = event[&#34;message&#34;]&#xA;        username = event[&#34;username&#34;]&#xA;&#xA;        await self.send(&#xA;            text_data=json.dumps(&#xA;                {&#xA;                    &#34;message&#34;: message,&#xA;                    &#34;username&#34;: username&#xA;                }&#xA;            )&#xA;        )&#xA;```&#xA;&#xA;#### Accept the WebSocket connection&#xA;&#xA;Here, room and group more or less mean the same thing but are different in different contexts. For instance, the group refers to the collection of clients which are connected to a channel(communication between consumer and web socket) and the Room is referring to the collection of clients connected to a single connection stream like a literal room. So we can say, the group is a technical term and the room is more of a layman&#39;s term for the same thing.&#xA;&#xA;The method `connect` is called when the client establishes a websocket connection. When that happens, the function gets the room slug from the URL of the client and stores `room_name` which is a string. It creates a separate variable called `room_group_name` by prepending the `chat_` string to the `room_name`, it also gets the currently logged-in user from the request. It then adds the `channel_name` to the group named `room_group_name`. The `channel_name` is a unique identifier to the connection/consumer in the channel. By adding the `channel_name`, the consumer then can broadcast the message to all the channels within the group. Finally, the function accepts the connection, and a **webcoket connection is established from both ends, connection is sent from the client and is now accepted from the backend.**&#xA;&#xA;#### Disconnect from the WebSocket connection&#xA;&#xA;When the client sends a close connection request to the server, the `disconnect` method is triggered and it basically removes the `channel_name` from the group i.e. the group name `room_group_name` whatever the string it happens to be. So, it basically removes the client from the broadcast group and hence it can&#39;t receive or send messages through the websocket since it has been closed from both ends.&#xA;&#xA;If you would have paid attention to the `close_code` in-method parameter, it is not being used currently. However, we can use it for checking why the connection was closed, as the `close_code` is a numeric value just like the status code in the web request for letting the server know the reason for disconnecting from the client.&#xA;&#xA;#### Receive a message from the WebSocket connection&#xA;&#xA;The `recieve` method is the core of the consumer as it is responsible for all the logic and parsing of the message and broadcasting of the messages from the clients to the group channels. The function takes in a parameter called `text_data` and it is sent from the client through websocket, so it is JSON content. We need to get the actual message from the JSON object or any other piece of content from the client. So, we deserialize (convert the JSON object to python objects) the received payload, and get the value from the key `message`. The key is the input name or id from the client sending the request through the web socket, so it can be different depending on the frontend template(we&#39;ll see the front end soon as well).&#xA;&#xA;We get the user from the scope of the consumer as we previously initialized it in the connect method. This can be used for understanding which user has sent the message, it will be used later on as we send/broadcast the message to the group.&#xA;&#xA;Now, the final piece in the receive method is the `channel_layer.group_send` method, this method as the name suggests is used to send or broadcast the received message to the entire group. The method has two parameters:&#xA;&#xA;1. The name of the group&#xA;    &#xA;2. The JSON body containing the message and other details&#xA;    &#xA;&#xA;The method is not directly sending the message but it has a type key in the JSON body which will be the function name to call. The function will simply call the other funciton mentioned in the type key in the dict. The following keys in the dict will be the parameters of that funciton. In this case, the funciton specified in the `type` key is `chat_message` which takes in the `event` as the parameter. This event will have all the parameters from the `group_send` method.&#xA;&#xA;So, the `chat_message` will load in this message, username, and the room name and then call the `send` method which actually sends the message as a JSON payload to the WebSocket connection which will be received by all the clients in the same group as provided in the `room_group_name` string.&#xA;&#xA;### Adding Routers for WebSocket connections&#xA;&#xA;So, till this point have consumers, which are just like views in terms of channels. Now, we need some URL routes to map these consumers to a path. So, we will create a file/module called `routing.py` which will look quite similar to the `urls.py` file. It will have a list called `websocket_urlpatterns` just like `urlpatterns` with the list of `path`. These paths however are not `http` routes but will serve for the `WebSocket` path.&#xA;&#xA;&#xA;```python&#xA;# chat / routing.py&#xA;&#xA;&#xA;from django.urls import path&#xA;&#xA;from chat import consumers&#xA;&#xA;websocket_urlpatterns = [&#xA;    path(&#39;chat/&lt;str:room_slug&gt;/&#39;, consumers.ChatConsumer.as_asgi()),&#xA;]&#xA;```&#xA;&#xA;In the above code block, we have defined a URL for the web socket with the path as `/chat/&lt;room_slug&gt;` where room_name will be the `slug` for the room. The path is bound with the consumer-defined in the `consumers.py` module as `ChatConsumer`. The `as_asgi` method is used for converting a view into an ASGI-compatible view for the WebSocket interface.&#xA;&#xA;### Setting up ASGI Application&#xA;&#xA;We are using the ASGI application config rather than a typical WSGI application which only works one request at a time. We want the chat application to be asynchronous because multiple clients might send and receive the messages at the same time, we don&#39;t want to make a client wait before the server process a message from another client, that&#39;s just the reason we are using WebSocket protocol.&#xA;&#xA;So, we need to also make sure, it makes the http request and also add our websocket config from the chat app we created in the previous sections. So, inside the `asgi.py` file in the project config module, we need to make some changes to include the chat application configurations.&#xA;&#xA;```python&#xA;# backchat / asgi.py&#xA;&#xA;&#xA;import os&#xA;from django.core.asgi import get_asgi_application&#xA;from channels.auth import AuthMiddlewareStack&#xA;from channels.routing import ProtocolTypeRouter, URLRouter&#xA;&#xA;os.environ.setdefault(&#39;DJANGO_SETTINGS_MODULE&#39;, &#39;backchat.settings&#39;)&#xA;&#xA;from chat import routing&#xA;&#xA;&#xA;application = ProtocolTypeRouter({&#xA;    &#39;http&#39;: get_asgi_application(),&#xA;    &#34;websocket&#34;:AuthMiddlewareStack(&#xA;        URLRouter(&#xA;            routing.websocket_urlpatterns&#xA;        )&#xA;    )&#xA;})&#xA;```&#xA;&#xA;We will override the `application` config which is a component used for routing different types of protocols for the `ASGI` application. We have set the two keys, `http` and `websocket` in our application. The `http` type of requests will be served with the `get_asgi_application` application which is used for running the application in an ASGI environment.&#xA;&#xA;For `websocket` type of requests, we are setting the [AuthMiddlewareStack](https://channels.readthedocs.io/en/latest/topics/authentication.html) which helps in authenticating the users requesting the WebSocket connection and allows only authorized users to make a connection to the application. The [URLRouter](https://channels.readthedocs.io/en/stable/topics/routing.html) is used for mapping the list of URL patterns with the incoming request. So, this basically serves the request URL with the appropriate consumer in the application. We are parsing in the `websocket_urlpatterns` as the list of URLs that will be used for the WebSocket connections.&#xA;&#xA;Now, we run the server, we should be seeing the `ASGI` server serving our application rather than the plain WSGI application.&#xA;&#xA;```&#xA;$ python manage.py runserver&#xA;&#xA;Watching for file changes with StatReloader&#xA;Performing system checks...&#xA;&#xA;System check identified no issues (0 silenced).&#xA;February 05, 2023 - 09:22:45&#xA;Django version 4.1.5, using settings &#39;backchat.settings&#39;&#xA;Starting ASGI/Daphne version 4.0.0 development server at http://127.0.0.1:8000/&#xA;Quit the server with CONTROL-C.&#xA;```&#xA;&#xA;&#xA;The application is not complete yet, it might not have most components working functional yet. So, we&#39;ll now get into making the user interfaces for the application, to create, join, and view rooms in the application.&#xA;&#xA;### Adding Views for Chat Rooms&#xA;&#xA;We will have a couple of views like create room page, the join room page, and the chat room page. We will define each view as a distinct view and all of them will require authenticated users.&#xA;&#xA;```python&#xA;# chat / views.py&#xA;&#xA;&#xA;import string&#xA;import random&#xA;from django.contrib.auth.decorators import login_required&#xA;from django.shortcuts import render, reverse, redirect&#xA;from django.utils.text import slugify&#xA;from chat.models import Room&#xA;&#xA;&#xA;@login_required&#xA;def index(request, slug):&#xA;    room = Room.objects.get(slug=slug)&#xA;    return render(request, &#39;chat/room.html&#39;, {&#39;name&#39;: room.name, &#39;slug&#39;: room.slug})&#xA;&#xA;@login_required&#xA;def room_create(request):&#xA;    if request.method == &#34;POST&#34;:&#xA;        room_name = request.POST[&#34;room_name&#34;]&#xA;        uid = str(&#39;&#39;.join(random.choices(string.ascii_letters + string.digits, k=4)))&#xA;        room_slug = slugify(room_name + &#34;_&#34; + uid)&#xA;        room = Room.objects.create(name=room_name, slug=room_slug)&#xA;        return redirect(reverse(&#39;chat&#39;, kwargs={&#39;slug&#39;: room.slug}))&#xA;    else:&#xA;        return render(request, &#39;chat/create.html&#39;)&#xA;&#xA;@login_required&#xA;def room_join(request):&#xA;    if request.method == &#34;POST&#34;:&#xA;        room_slug = request.POST[&#34;room_slug&#34;]&#xA;        room = Room.objects.get(slug=room_slug)&#xA;        return redirect(reverse(&#39;chat&#39;, kwargs={&#39;slug&#39;: room.slug}))&#xA;    else:&#xA;        return render(request, &#39;chat/join.html&#39;)&#xA;```&#xA;&#xA;In the above views module, we have added 3 views namely `index` as the room page, `room_create` for the room creation page, and the `room_join` for the room join page. The index view is a simple get request to the provided slug of the room, it gets the slug from the URL from the request and fetches an object of the room associated with that slug. Then it renders the room template with the context variables like the name of the room and the slug associated with that room.&#xA;&#xA;The `room_create` view is a simple two-case view that either can render the room creation page or process the submitted form and create the room. Just like we used in the `register` view in the accounts app. When the user will send a `GET` request to the URL which we will map to `/create/` shortly after this, the user will be given a form. So, we will render the `create.html` template. We will create the html template shortly. &#xA;If the user has sent a `POST` request to the view via the `/create` URL, we will fetch the name field in the sent request and create a unique identifier with the name of the room. We will slugify the concatenation of the name with the uid and will set it as the slug of the room. We will then simply create the room and redirect the user to the `room` page.&#xA;&#xA;The `room_join` view also is a two-case view, where the user can either request the join room form or send a slug with the form submission. If the user is requesting a form, we will render the `join.html` template. If the user is submitting the form, we will fetch the room based on the slug provided and redirect the user to the `room` page.&#xA;&#xA;So, the `room_join` and `room_create` views are quite similar, we are fetching an already existing room in the case of the join view and creating a new instance of room in the create view. Now, we will connect the views to the URLs and finally get to the templates.&#xA;&#xA;### Connecting Views and URLs&#xA;&#xA;We have three views to route to a URL. But we will also have one additional URL which will be the home page for the application, on that page the user can choose to either join or create a room. We have the room creation, join the room and the room view to be mapped in this URL routing of the app.&#xA;&#xA;```python&#xA;# chat / urls.py&#xA;&#xA;&#xA;from django.urls import path&#xA;from django.views.generic import TemplateView&#xA;from chat import views&#xA;&#xA;&#xA;urlpatterns = [&#xA;    path(&#34;&#34;, TemplateView.as_view(template_name=&#34;base.html&#34;), name=&#39;index&#39;),&#xA;    path(&#34;room/&lt;str:slug&gt;/&#34;, views.index, name=&#39;chat&#39;),&#xA;    path(&#34;create/&#34;, views.room_create, name=&#39;room-create&#39;),&#xA;    path(&#34;join/&#34;, views.room_join, name=&#39;room-join&#39;),&#xA;]&#xA;```&#xA;&#xA;So, the first route is the home page view called `index`, we have used the [TemplateView](https://docs.djangoproject.com/en/4.1/ref/class-based-views/base/#templateview) which will simply render the template provided. We don&#39;t have to create a separate view for just rendering a template. We already have defined the `base.html` template while setting up the `accounts` app. This will be the same template, we will add some more content to the template later on. The URL mapped is the `/` since we will add the URLs of this app to the project URLs with an empty `&#34;&#34;` path.&#xA;&#xA;The second route is used for the room index page, i.e. where the user will be able to send and receive messages. The path is assigned as `/room/&lt;str:slug&gt;/` indicating a parameter called slug of type string will be used in accessing a particular room. The URL will be bound to the index view that we created in the views file, which fetches the room based on the slug, so here is where the slug will be coming from. The name of the URL-View route will be `chat` but you can keep it as per your requirements. The URL name is really handy for use in the templates.&#xA;&#xA;The third route is for the room creation page. The `/create/` URL will be bound to the `room_create` view, as we discussed, it will serve two purposes, one to render the form for creating the room, and the other for sending a `POST` request to the same path for the creating the Room with the name provided. The name is not required but helps in identifying and making it user-friendly. The name of this URL is set as `room-create`.&#xA;&#xA;The final route is for joining the room, the `/join/` URL will be triggering the `room_join` view. Similar to the `room-create` URL, the URL will render the join room form on a `GET` request, fetch the room with the provided slug and redirect to the room page. Here, the slug field in the form will be required for actually finding the matching room. The name of the URL route is set as `room-join`.&#xA;&#xA;We now add the URLs from the chat app to the project URLs. This will make the `/` as the entry point for the chat application URLs.&#xA;&#xA;```python&#xA;# backchat / urls.py&#xA;&#xA;&#xA;from django.contrib import admin&#xA;from django.urls import path, include&#xA;&#xA;urlpatterns = [&#xA;    path(&#34;admin/&#34;, admin.site.urls),&#xA;    path(&#34;auth/&#34;, include(&#39;accounts.urls&#39;)),&#xA;    path(&#34;&#34;, include(&#39;chat.urls&#39;)),&#xA;]&#xA;```&#xA;&#xA;Hence the process is completed for the backend to process the message, it then is dependent on the client to process and render the message.&#xA;&#xA;Till HTMX was not a thing!&#xA;&#xA;We won&#39;t have to write a single line of javascript to receive and handle the WebSocket connection!&#xA;&#xA;### Creating Templates and adding htmx&#xA;&#xA;We now move into the actual frontend or creating the template for actually working with the rooms and user interaction. We will have three pieces of templates, a room creates the page, a room join page, and a room chat page. As these template names suggest, they will be used for creating a room with the name, joining the room with the slug, and the room chat page where the user will send and receive messages.&#xA;&#xA;Let/s modify the base template first.&#xA;&#xA;```html&#xA;&lt;!DOCTYPE html&gt;&#xA;&lt;html&gt;&#xA;    &lt;head&gt;&#xA;        &lt;meta charset=&#34;utf-8&#34; /&gt;&#xA;        &lt;title&gt;Chat App&lt;/title&gt;&#xA;        {% load static %}&#xA;        &lt;script src=&#34;https://unpkg.com/htmx.org@1.8.5&#34;&gt;&lt;/script&gt;&#xA;    &lt;/head&gt;&#xA;    &lt;a href=&#34;{% url &#39;index&#39; %}&#34;&gt;Home&lt;/a&gt;&#xA;        {% if user.is_authenticated %}&#xA;            &lt;a href=&#34;{% url &#39;logout&#39; %}&#34;&gt;Logout&lt;/a&gt;&#xA;        {% else %}&#xA;            &lt;a href=&#34;{% url &#39;login&#39; %}&#34;&gt;Login&lt;/a&gt;&#xA;        {% endif %}&#xA;    &lt;body hx-ext=&#34;ws&#34;&gt;&#xA;        &lt;h1&gt;Back Chat&lt;/h1&gt;&#xA;        {% block base %}&#xA;            &lt;a href=&#34;{% url &#39;room-join&#39; %}&#34;&gt;Join Room&lt;/a&gt;&#xA;            &lt;a href=&#34;{% url &#39;room-create&#39; %}&#34;&gt;Create Room&lt;/a&gt;&#xA;        {% endblock %}&#xA;    &lt;/body&gt;&#xA;&lt;/html&gt;&#xA;```&#xA;&#xA;![Chat App Home Page](https://meetgor-cdn.pages.dev/django-htmx/chat-home-page.png)&#xA;&#xA;#### Create Room Template&#xA;&#xA;We will have to render the form with a field like `name` for setting it as the name of the room, it is not required but again, it makes it easier for the user to find the name of the room a bit more friendly than random characters.&#xA;&#xA;```html&#xA;# templates / chat / create.html&#xA;&#xA;&#xA;{% extends &#39;base.html&#39; %}&#xA;&#xA;{% block base %}&#xA;    &lt;form method=&#39;post&#39; action=&#39;{% url &#39;room-create&#39; %}&#39;&gt;&#xA;        {% csrf_token %}&#xA;        &lt;input name=&#39;room_name&#39; id=&#39;room_name&#39; placeholder=&#39;Room Name&#39;&gt;&#xA;        &lt;input type=&#39;submit&#39; id=&#34;submit&#34;&gt;&#xA;    &lt;/form&gt;&#xA;{% endblock %}&#xA;```&#xA;&#xA;![Chat Room Create Page](https://meetgor-cdn.pages.dev/django-htmx/chat-create-room-page.png)&#xA;&#xA;The template is inherited from the `base.html` template and we render a form with the `room_name` input. The form will be submitted to the URL named `room-create` hence it will send a `POST` request to the server where it will create the room and further process the request.&#xA;&#xA;#### Join Room Template&#xA;&#xA;The join room template is similar to the create room template except it gets the slug of the room from the user rather than the name which is not a unique one to join the room.&#xA;&#xA;```html&#xA;# templates / chat / join.html&#xA;&#xA;&#xA;{% extends &#39;base.html&#39; %}&#xA;&#xA;{% block base %}&#xA;    &lt;form method=&#39;post&#39; action=&#39;{% url &#39;room-join&#39; %}&#39;&gt;&#xA;        {% csrf_token %}&#xA;        &lt;input name=&#39;room_slug&#39; id=&#39;room_slug&#39; required=&#39;true&#39; placeholder=&#39;Room Code&#39;&gt;&#xA;        &lt;input type=&#39;submit&#39; id=&#34;submit&#34;&gt;&#xA;    &lt;/form&gt;&#xA;{% endblock %}&#xA;```&#xA;&#xA;![Chat Room Join Page](https://meetgor-cdn.pages.dev/django-htmx/chat-join-room-page.png)&#xA;&#xA;The form will be submitted to the URL named `room-join` hence it will send a `POST` request to the server where it will fetch the room and further process the request.&#xA;&#xA;### Room Template (HTMX code)&#xA;&#xA;Now, time for the actual ingredient in the application, some HTMX magic!&#xA;&#xA;This template, as the two templates above inherit from the base template, that&#39;s the same thing. But it has a special `div` with the attribute [hx-ws](https://htmx.org/attributes/hx-ws/) which is used for using attributes related to the web socket in the htmx library. The `connect` value is used for connecting to a WebSocket. The value of the attribute must be set to the URL of the WebSocket to be connected. In our case, it is the URL path from the `routing` app as `/chat/&lt;room_slug&gt;/`. This simply will connect the client to the WebSocket from the backend. The other important attribute is the `send` which is used for sending a message to the connected web socket.&#xA;&#xA;```html&#xA;# templates / chat / room.html&#xA;&#xA;&#xA;{% extends &#39;base.html&#39; %}&#xA;&#xA;{% block base %}&#xA;    &lt;h2&gt;{{ name }}&lt;/h2&gt;&#xA;    &lt;div hx-ws=&#34;connect:/chat/{{ slug }}/&#34;&gt;&#xA;        &lt;form hx-ws=&#34;send:submit&#34;&gt;&#xA;            &lt;input name=&#34;message&#34;&gt;&#xA;            &lt;input type=&#34;submit&#34;&gt;&#xA;        &lt;/form&gt;&#xA;     &lt;/div&gt;&#xA;     &lt;div id=&#39;messages&#39;&gt;&lt;/div&gt;&#xA;{% endblock %}&#xA;```&#xA;&#xA;![Chat Room Page](https://meetgor-cdn.pages.dev/django-htmx/chat-room-page.png)&#xA;&#xA;NOTE: The template has a div with the id `messages` which will be very important for sending the messages from the WebSocket to the client, so more on that when we use the HTMX part.&#xA;&#xA;For testing this template, you can create a room, and that will redirect you to the room template as we have seen in the views for the room creation. If you see something like `WebSocket CONNECT` it means, that the application has been able to establish a WebSocket connection to the backend, and we can be ready to accept messages and other stuff.&#xA;&#xA;```&#xA;HTTP GET /chat/room/def_teas/ 200 [0.03, 127.0.0.1:38660]&#xA;WebSocket HANDSHAKING /chat/def_teas/ [127.0.0.1:38666]&#xA;WebSocket CONNECT /chat/def_teas/ [127.0.0.1:38666]&#xA;```&#xA;&#xA;![Django ASGI server websocket connection](https://meetgor-cdn.pages.dev/django-htmx/chat-asgi-server.png)&#xA;&#xA;Till this point, we should have a running and almost complete application, though we just have a minor part missing that will be the most important part.&#xA;&#xA;### Sending HTML response from backend for htmx&#xA;&#xA;We will be sending a fragment of HTML from the backend when the user sends a message, to broadcast it to the group. Let&#39;s make some changes to the application, especially to the receive method in the `ChatConsumer` of the chat application.&#xA;&#xA;```python&#xA;# chat / consumers.py&#xA;    &#xA;&#xA;    ...&#xA;    ...&#xA;&#xA;    async def receive(self, text_data):&#xA;        text_data_json = json.loads(text_data)&#xA;        message = text_data_json[&#34;message&#34;]&#xA;        user = self.user&#xA;        username = user.username&#xA;&#xA;        await self.channel_layer.group_send(&#xA;            self.room_group_name, &#xA;            {&#xA;                &#34;type&#34;: &#34;chat_message&#34;,&#xA;                &#34;message&#34;: message,&#xA;                &#34;username&#34;: username,&#xA;            }&#xA;        )&#xA;&#xA;    async def chat_message(self, event):&#xA;        message = event[&#34;message&#34;]&#xA;        username = event[&#34;username&#34;]&#xA;&#xA;        # This is the crucial part of the application&#xA;        message_html = f&#34;&lt;div hx-swap-oob=&#39;beforeend:#messages&#39;&gt;&lt;p&gt;&lt;b&gt;{username}&lt;/b&gt;: {message}&lt;/p&gt;&lt;/div&gt;&#34;&#xA;        await self.send(&#xA;            text_data=json.dumps(&#xA;                {&#xA;                    &#34;message&#34;: message_html,&#xA;                    &#34;username&#34;: username&#xA;                }&#xA;            )&#xA;        )&#xA;```&#xA;&#xA;![Chat Room Message](https://meetgor-cdn.pages.dev/django-htmx/chat-room-msg-1.png)&#xA;![Chat Room Message 2 Users](https://meetgor-cdn.pages.dev/django-htmx/chat-room-msg-2.png)&#xA;![Chat Room Message](https://meetgor-cdn.pages.dev/django-htmx/chat-room-msg-3.png)&#xA;&#xA;&#xA;In the above snippet, we are just changing the final message object to include some HTML just simple. The HTML however has home htmx attributes like [hx-swap-oob](https://htmx.org/attributes/hx-swap-oob/) which will just update the specified DOM element to the content in the div. In this case, the DOM element is `#message` which is the id message present in the room template. We basically add the username and the message into the same id by appending it to the element. That&#39;s it, it would work and it would start showing the messages from the connected clients and broadcast them as well.&#xA;&#xA;There are some things to keep in mind while using htmx in the long run especially when the htmx 2.0 is released, it will have `ws` as a separate extension. It will have a bit of a different syntax than above. I have tried the latest version but doesn&#39;t seem to work. I&#39;ll just leave a few snippets for your understanding of the problem.&#xA;&#xA;&#xA;```html&#xA;# templates / chat / room.html&#xA;&#xA;&#xA;{% extends &#39;base.html&#39; %}&#xA;&#xA;{% block base %}&#xA;    &lt;h2&gt;{{ name }}&lt;/h2&gt;&#xA;    &lt;div hx-ext=&#34;ws&#34; ws-connect=&#34;/chat/{{ slug }}/&#34;&gt;&#xA;        &lt;form ws-send&gt;&#xA;            &lt;input name=&#34;message&#34;&gt;&#xA;        &lt;/form&gt;&#xA;    &lt;/div&gt;&#xA;    &lt;div id=&#39;messages&#39;&gt;&lt;/div&gt;&#xA;{% endblock %}&#xA;```&#xA;&#xA;I have added, the `hx-ext` as `ws` which is a htmx [extension for websocket](https://htmx.org/extensions/web-sockets/). This extension has websocket-specific attributes like `ws-connect` and `ws-send`. I have tried a combination like changing the htmx versions, adding submit value as the `ws-send` attribute, etc, but no results yet. I have opened a [discussion](https://github.com/bigskysoftware/htmx/discussions/1231) on GitHub for this issue, you can express your solution or views there.&#xA;&#xA;### Adding some utility features for the chat app&#xA;&#xA;We can save messages, add and remove the users from the room according to the connection, and other stuff that can make this a fully-fledged app. So, I have made a few changes to the chat consumers for saving the messages and also updating the room with the users in the room.&#xA;&#xA;```python&#xA;# chat / consumers.py&#xA;&#xA;&#xA;import json&#xA;&#xA;from asgiref.sync import sync_to_async&#xA;from channels.generic.websocket import AsyncWebsocketConsumer&#xA;&#xA;from chat.models import Room, Message&#xA;&#xA;&#xA;class ChatConsumer(AsyncWebsocketConsumer):&#xA;    async def connect(self):&#xA;        self.room_name = self.scope[&#34;url_route&#34;][&#34;kwargs&#34;][&#34;room_slug&#34;]&#xA;        self.room_group_name = &#34;chat_%s&#34; % self.room_name&#xA;        self.user = self.scope[&#34;user&#34;]&#xA;&#xA;        await self.channel_layer.group_add(&#xA;            self.room_group_name, self.channel_name&#xA;        )&#xA;&#xA;        # Add the user when the client connects&#xA;        await self.add_user(self.room_name, self.user)&#xA;&#xA;        await self.accept()&#xA;&#xA;    async def disconnect(self, close_code):&#xA;&#xA;        # Remove the user when the client disconnects&#xA;        await self.remove_user(self.room_name, self.user)&#xA;&#xA;        await self.channel_layer.group_discard(&#xA;            self.room_group_name, self.channel_name&#xA;        )&#xA;&#xA;    async def receive(self, text_data):&#xA;        text_data_json = json.loads(text_data)&#xA;        message = text_data_json[&#34;message&#34;]&#xA;        user = self.user&#xA;        username = user.username&#xA;        room = self.room_name&#xA;&#xA;        # Save the message on recieving&#xA;        await self.save_message(room, user, message)&#xA;&#xA;        await self.channel_layer.group_send(&#xA;            self.room_group_name, &#xA;            {&#xA;                &#34;type&#34;: &#34;chat_message&#34;,&#xA;                &#34;message&#34;: message,&#xA;                &#34;username&#34;: username,&#xA;            }&#xA;        )&#xA;&#xA;    async def chat_message(self, event):&#xA;        message = event[&#34;message&#34;]&#xA;        username = event[&#34;username&#34;]&#xA;&#xA;&#xA;        message_html = f&#34;&lt;div hx-swap-oob=&#39;beforeend:#messages&#39;&gt;&lt;p&gt;&lt;b&gt;{username}&lt;/b&gt;: {message}&lt;/p&gt;&lt;/div&gt;&#34;&#xA;        await self.send(&#xA;            text_data=json.dumps(&#xA;                {&#xA;                    &#34;message&#34;: message_html,&#xA;                    &#34;username&#34;: username&#xA;                }&#xA;            )&#xA;        )&#xA;&#xA;    @sync_to_async&#xA;    def save_message(self, room, user, message):&#xA;        room = Room.objects.get(slug=room)&#xA;        Message.objects.create(room=room, user=user, message=message)&#xA;&#xA;    @sync_to_async&#xA;    def add_user(self, room, user):&#xA;        room = Room.objects.get(slug=room)&#xA;        if user not in room.users.all():&#xA;            room.users.add(user)&#xA;            room.save()&#xA;&#xA;    @sync_to_async&#xA;    def remove_user(self, room, user):&#xA;        room = Room.objects.get(slug=room)&#xA;        if user in room.users.all():&#xA;            room.users.remove(user)&#xA;            room.save()&#xA;```&#xA;&#xA;So, we have created a few methods like `save_message`, `add_user`, and `remove_user` which all are `synchronous` methods but we are using an asynchronous web server, so we add in the `sync_to_async` decorator which wraps a synchronous method to an asynchronous method. Inside the methods, we simply perform the database operations like creating a message object, and adding or removing the user from the room.&#xA;&#xA;That&#39;s only a few features that I have added, you can add to this application and customize them as per your needs.&#xA;&#xA;The code for this chat app is provided in the [GitHub repository](https://github.com/Mr-Destructive/django-htmx-chat).&#xA;&#xA;## Conclusion&#xA;&#xA;So, from this post, we were able to create a simple chat app (frontendless) with Django and htmx. We used Django channels and HTMX to make a chat application without the need to write javascript for the client-side connection. Hope you found this tutorial helpful, do give your feedback and thoughts on it, I&#39;ll be eager to improve this post. Thank you for your patient listening. Happy Coding :)&#xA;</content>
      <type>posts</type>
    </item>
    <item>
      <title>Create a Non-Clustered Index in Django with Postgres as DB</title>
      <link>meetgor.com/django-non-clustered-index-pg</link>
      <description>Understanding how to add a non-clustered index in a postgres database in a django project.</description>
      <pubDate>Thu, 10 Nov 2022 00:00:00 UTC</pubDate>
      <content>## What is a non-clustered index?&#xA;&#xA;A non-clustered index is a seperate structure than an actual table in the database, it stores the non-clustered index key(the column which we want to sort in the table), and a pointer to the actual values based on the index key. So, non-clustered indexes do not change the physical order of the table records, instead it holds a structure that can provide a easier and distinct way to fetch objects based on a particular column as the primary key in the structure.&#xA;&#xA;## How to create a non-clustered index in django&#xA;&#xA;In django, we can use the [db_index](https://docs.djangoproject.com/en/4.1/ref/models/indexes/) property on a field(s) to create a index on the table/model. &#xA;&#xA;### Add the property to the field in the model&#xA;&#xA;Chose a field in which, you want to add a index. It can be a foreign key or any other normal field defined in your model.&#xA;&#xA;We have used the typical blog model, so used in the some of my [TILS](https://www.meetgor.com/tils/) in django, it is just convenient to explain and understand as well. We have a django project named `core` and it has a app `blog` with a model defined below. The model `Article` has a few attributes like `title`, `description`, `content` and `status`.&#xA;&#xA;```python&#xA;from django.db import models&#xA;&#xA;ARTICLE_STATUS = [&#xA;    (&#34;PUBLISHED&#34;, &#34;Published&#34;),&#xA;    (&#34;DRAFT&#34;, &#34;Draft&#34;),&#xA;]&#xA;&#xA;class Article(models.Model):&#xA;    title = models.CharField(max_length=128, db_index=True)&#xA;    description = models.CharField(max_length=512)&#xA;    content = models.TextField()&#xA;    status = models.CharField(max_length=16, choices=ARTICLE_STATUS, default=&#34;DRAFT&#34;)&#xA;&#xA;    def __str__(self):&#xA;        return self.title&#xA;```&#xA;&#xA;So, we have added a `db_index` to the title column in the model as a property. This will be equivalent to creating a index in `SQL` as follows:&#xA;&#xA;```&#xA;$ python manage.py makemigrations&#xA;&#xA;Migrations for &#39;blog&#39;:&#xA;  blog/migrations/0002_alter_article_title.py&#xA;    - Alter field title on article&#xA;```&#xA;&#xA;```&#xA;$ python manage.py migrate&#xA;&#xA;Operations to perform:&#xA;  Apply all migrations: admin, auth, blog, contenttypes, sessions&#xA;Running migrations:&#xA;  Applying blog.0002_alter_article_title... OK&#xA;&#xA;```&#xA;&#xA;Indexes are not standard as in SQL, but each vendor(sqlite, postgres, mysql) have their own flavour of syntax and naunces.&#xA;&#xA;```sql&#xA;CREATE INDEX &#34;blog_article_title_3c514952&#34; ON &#34;blog_article&#34; (&#34;title&#34;);&#xA;&#xA;CREATE INDEX &#34;blog_article_title_3c514952_like&#34; ON &#34;blog_article&#34; (&#34;title&#34; varchar_pattern_ops);&#xA;```&#xA;&#xA;The above index commands are specific to the field, as the title field is a varchar, it has two types of index, it can generate one with simple match and other for `LIKE` comparisons because of string comparison behaviour.&#xA;&#xA;So, we just created a simple index and now if we query the db for a particular `title` which now has its own index for the table `blog_article`. This means, we will be able to fetch queries quickly if we are specifically filtering for `title`.&#xA;&#xA;### Adding some data records&#xA;&#xA;We can add a few data records to test the query from the databse, you can ignore this part as it would be just setting up a django project and adding a few records to the databse. This part won&#39;t make sense for people reading to get the actual stuff done, move to the next part please.&#xA;&#xA;```&#xA;python manage.py createsuperuser&#xA;# Create a super user and run the server&#xA;&#xA;python manage.py runserver&#xA;# Locate to http://127.0.0.1:8000/admin&#xA;# Create some records in the artilce model&#xA;```&#xA;&#xA;So, after creating some records, you should have a simple database and a working django application.&#xA;&#xA;```sql&#xA;SELECT * FROM blog_article;&#xA;```&#xA;```&#xA;blog_test=# SELECT * FROM blog_article;&#xA;&#xA; id |  title   | description |          content          |  status   &#xA;----+----------+-------------+---------------------------+-----------&#xA;  1 | test     | test 1      | test content              | DRAFT&#xA;  2 | testpost | test 2      | test content more content | DRAFT&#xA;  3 | newpost  | test 3      | test nothing              | PUBLISHED&#xA;(3 rows)&#xA;```&#xA;&#xA;## Testing Queries&#xA;&#xA;We can now use SQL queries or django filters to check if we get results by a sequential or an index scan. If we have a filter of `title` we will get the results after performing an `Index Scan` which means, it will look up in the index columns rather than scanning the entire table of records. This is a way **we can test the indexes are working, efficiency is a differnet topic.** We can&#39;t get a idea of performance with this little data and just one connection. A real time database and having multiple conncurrent requests and connections is a good environment to test(don&#39;t do it in a production db :)&#xA;&#xA;&#xA;```sql&#xA;EXPLAIN SELECT * FROM blog_article WHERE description LIKE &#39;test 2&#39;;&#xA;```&#xA;&#xA;```&#xA;blog_test=# EXPLAIN ANALYSE SELECT * FROM blog_article WHERE description LIKE &#39;test&#39;;&#xA;---------------------------------------------------------------------------------------------------------&#xA;&#xA; Seq Scan on blog_article  (cost=0.00..11.00 rows=1 width=880) (actual time=0.180..0.181 rows=0 loops=1)&#xA;   Filter: ((description)::text ~~ &#39;test&#39;::text)&#xA;   Rows Removed by Filter: 3&#xA; Planning Time: 0.189 ms&#xA; Execution Time: 0.217 ms&#xA;(5 rows)&#xA;&#xA;```&#xA;&#xA;The above query selects the records whose `description` is like `test 2`, this performs a `Sequenitial Scan` in the database i.e. iterating over the records one by one of the order of the primary key / id of the records in the table. &#xA;&#xA;```sql&#xA;EXPLAIN SELECT * FROM blog_article WHERE title LIKE &#39;test 2&#39;;&#xA;```&#xA;&#xA;```&#xA;blog_test=# EXPLAIN ANALYSE SELECT * FROM blog_article WHERE title LIKE &#39;test&#39;;&#xA;---------------------------------------------------------------------------------------------------------&#xA;&#xA;Index Scan using blog_article_title_3c514952_like on blog_article  (cost=0.14..8.16 rows=1 width=880) (actual time=0.043..0.048 rows=1 loops=1)&#xA;   Index Cond: ((title)::text = &#39;test&#39;::text)&#xA;   Filter: ((title)::text ~~ &#39;test&#39;::text)&#xA; Planning Time: 0.208 ms&#xA; Execution Time: 0.093 ms&#xA;(5 rows)&#xA;```&#xA;&#xA;In the above query, the select statement has a filter with the title being like `test 2`, and since we have a index for looking for like of title column, the database performs a index scan on that table and fetches the result.&#xA;&#xA;Here are some tradeoffs, the planning is more and the execution time is less, this is quite logical as it would take time to make decision because the database has more options than before creating indexes.&#xA;&#xA;In the query where we filtered the description, the planning time was less as it makes sense there was just one option to go for sequential scan, but it took time to perform the operation as it would scan the entire table one by one.&#xA;&#xA;## Using Django to test queries&#xA;&#xA;We can even use django to filter out the objects in the table. We simply use the `filter` method to check with a particular value.&#xA;&#xA;We can use the shell, to perform some queries. You can use this in your views or viewsets as per your requirements and constraints.&#xA;&#xA;We can even use `explain` to see what the underlying `sql` got executed out from the ORM. The [explain](https://docs.djangoproject.com/en/3.1/ref/models/querysets/#explain) function is similar to the `EXPLAIN ANALYSE` command in the `sql` queries. It gives a bit of context on how the query was executed.&#xA;&#xA;```&#xA;$ python manage.py shell&#xA;```&#xA;&#xA;```python&#xA;&gt;&gt;&gt; from blog.models import Article                                                                &#xA;&gt;&gt;&gt; Article.objects.filter(description=&#39;test 1&#39;)                                                   &#xA;&#xA;&lt;QuerySet [&lt;Article: test&gt;]&gt;                                                                       &#xA;&#xA;&#xA;&gt;&gt;&gt; Article.objects.filter(description=&#39;test 1&#39;).explain()                                         &#xA;&#xA;&#34;Seq Scan on blog_article  (cost=0.00..11.00 rows=1 width=880)\n  Filter: ((description)::text = &#39;t&#xA;est 1&#39;::text)&#34;                                                                                     &#xA;&#xA;&#xA;&gt;&gt;&gt; Article.objects.filter(title=&#39;test&#39;)                                                           &#xA;&#xA;&lt;QuerySet [&lt;Article: test&gt;]&gt;                                                                       &#xA;&#xA;&#xA;&gt;&gt;&gt; Article.objects.filter(title=&#39;test&#39;).explain()                                                 &#xA;&#xA;&#34;Index Scan using blog_article_title_3c514952_like on blog_article  (cost=0.14..8.16 rows=1 width=8&#xA;80)\n  Index Cond: ((title)::text = &#39;test&#39;::text)&#34;                                                 &#xA;&#xA;```&#xA;&#xA;We can use `__contains` for replicating the behaviour of `LIKE` in python/django from SQL. The below example will check if the title has a word `test` in any records of the database.&#xA;&#xA;```&#xA;&gt;&gt;&gt; Article.objects.filter(title__contains=&#39;test&#39;)&#xA;&#xA;&lt;QuerySet [&lt;Article: test&gt;, &lt;Article: testpost&gt;]&gt; &#xA;```&#xA;&#xA;BONUS: We can even get the underlying SQL with the `.query.__str__()` method. &#xA;&#xA;```&#xA;articles = Article.objects.filter(title__contains=&#39;test&#39;)&#xA;&#xA;articles.query.__str__()&#xA;```&#xA;&#xA;```&#xA;&#39;SELECT &#34;blog_article&#34;.&#34;id&#34;, &#34;blog_article&#34;.&#34;title&#34;, &#34;blog_article&#34;.&#34;description&#34;, &#34;blog_article&#34;.&#34;&#xA;content&#34;, &#34;blog_article&#34;.&#34;status&#34; FROM &#34;blog_article&#34; WHERE &#34;blog_article&#34;.&#34;title&#34;::text LIKE %test&#xA;%&#39;&#xA;```&#xA;&#xA;Here, we are able to see that clearly, that the django orm used the `LIKE` clause for comparing the title.&#xA;&#xA;Further readings and references: &#xA;&#xA;- [Indexing in Postgres](https://medium.com/geekculture/indexing-in-postgres-db-4cf502ce1b4e)&#xA;- [Indexing refernece Django docs](https://docs.djangoproject.com/en/4.1/ref/models/indexes/)&#xA;- [Non-Clustered indexing](https://gudevsoc.com/what-is-non-clustered-index-in-sql-with-example/)&#xA;</content>
      <type>til</type>
    </item>
    <item>
      <title>Django Bulk Update QuerySet objects</title>
      <link>meetgor.com/django-bulk-update-queryset</link>
      <description>Using bulk_update to update multiple objects in one go.</description>
      <pubDate>Mon, 31 Oct 2022 00:00:00 UTC</pubDate>
      <content>&#xA;Let&#39;s say, I have a lots of objects which I want to update with a particular field or fields. We can use the [bulk_update](https://docs.djangoproject.com/en/4.1/ref/models/querysets/#bulk-update) method with the model name.&#xA;&#xA;```python&#xA;# blog/models.py&#xA;&#xA;from django.db import models&#xA;&#xA;ARTICLE_STATUS = [&#xA;    (&#34;PUBLISHED&#34;, &#34;Published&#34;),&#xA;    (&#34;DRAFT&#34;, &#34;Draft&#34;),&#xA;]&#xA;&#xA;class Article(models.Model):&#xA;    title = models.CharField(max_length=128)&#xA;    description = models.CharField(max_length=512)&#xA;    content = models.TextField()&#xA;    status = models.CharField(max_length=16, choices=ARTICLE_STATUS, default=&#34;DRAFT&#34;)&#xA;&#xA;    def __str__(self):&#xA;        return self.title&#xA;&#xA;```&#xA;&#xA;Let&#39;s say we have a simple model `Article` with a few typical attributes like `title`, `description`, `content`, and `status`. We have the status as a choice field from two options as `Draft` and `Published`. It could be a boolean field, but that looks too gross for a article status.&#xA;&#xA;&#xA;```python&#xA;&#xA;from blog.models import Article&#xA;&#xA;articles = Article.objects.filter(status=&#34;draft&#34;)&#xA;&#xA;for i in range(len(articles)):&#xA;    articles[i].status = &#34;published&#34;&#xA;&#xA;Article.objects.bulk_update(articles, [&#34;status&#34;,])&#xA;&#xA;```&#xA;&#xA;&#xA;In the above code, the `Articles` model is filtered by the status of `draft`. We iterate over the `QuerySet` which will contain the objects of the articles, by setting the object&#39;s properties to the value we want to set. We are jsut setting the value of the property of the object for each object.&#xA;&#xA;This just makes a changes to the `QuerySet`, by using the `bulk_update` method, the two parameters required are the `QuerySet` and the list of `fields` which are to be updated. The function returns the number of objects/records updated.&#xA;&#xA;```python&#xA;&gt;&gt;&gt; from blog.models import Article&#xA;&gt;&gt;&gt; articles = Article.objects.filter(status=&#34;DRAFT&#34;)&#xA;&gt;&gt;&gt; articles&#xA;&lt;QuerySet [&lt;Article: test 1&gt;, &lt;Article: test 3&gt;]&gt;&#xA;&#xA;&gt;&gt;&gt; for i in range(len(articles)):&#xA;...     articles[i].status = &#34;PUBLISHED&#34;&#xA;...&#xA;&gt;&gt;&gt; articles&#xA;&lt;QuerySet [&lt;Article: test 1&gt;, &lt;Article: test 3&gt;]&gt;&#xA;&gt;&gt;&gt;&#xA;&#xA;&gt;&gt;&gt; Article.objects.bulk_update(articles, [&#39;status&#39;,])&#xA;2&#xA;&#xA;&gt;&gt;&gt; Article.obejcts.get(title=&#34;test 1&#34;).status&#xA;&#39;PUBLISHED&#39;&#xA;&#xA;&gt;&gt;&gt; Article.objects.filter(status=&#34;DRAFT&#34;)&#xA;&lt;QuerySet []&gt;&#xA;&gt;&gt;&gt;&#xA;```&#xA;&#xA;As, we can see here there were two obejcts `test 1` and `test 2` objects with the status as `Draft`. By iterating over the queryset and assigning the status of the object to published, the query set was changed and modified locally.&#xA;By using the `bulk_update` method, we parsed the queryset and the list of attributes to be updated into the function. This gives us the number of objects which were updated, in this case `2`. We then look into the article actual record in the database and it has indeed updated to the value we set in this operation.&#xA;&#xA;</content>
      <type>til</type>
    </item>
    <item>
      <title>Python Pipreqs: Generate requirements file from the imported packages</title>
      <link>meetgor.com/python-pipreqs</link>
      <description>Exploring the pipreqs package that allows to list all the dependencies or packages which are imported in a python project</description>
      <pubDate>Wed, 14 Sep 2022 00:00:00 UTC</pubDate>
      <content>## Introduction&#xA;&#xA;[Pipreqs](https://pypi.org/project/pipreqs/) is a python package that allows us to list all the pacakges which are imported in a python project. This is a great package for reducing the amount of redundant packages for a project. &#xA;&#xA;## Install pipreqs&#xA;&#xA;You can install pipreqs with one of the many ways with pip, pipx, or any other pacakge management tool. I personally use pipreqs with `pipx` as it remains isolated from the rest of my project dependencies.&#xA;&#xA;### Using simple pip install&#xA;&#xA;We can install with pip by creating a virtual environment or in a existing virtual environment.&#xA;&#xA;```&#xA;pip install virtualenv venv&#xA;source venv/bin/activate&#xA;&#xA;pip install pipreqs&#xA;```&#xA;&#xA;### Using pipx&#xA;&#xA;We can install pipreqs with pipx. [Pipx](https://pypi.org/project/pipx/) is also a python package but used as a tool to install any cli specific tool with the isolated environment.&#xA;&#xA;```&#xA;pipx install pipreqs&#xA;pipx run pipreqs&#xA;```&#xA;&#xA;## Using pipreqs&#xA;&#xA;We need to specify the encoding, which is used for reading the files while capturing the imports from the project.&#xA;&#xA;```&#xA;pipx run pipreqs --encoding=utf-8 .&#xA;```&#xA;&#xA;Additionaly, we can specify the `path` or filename where it will be used to save the imported packages. The `--savepath` option takes in the path to the file where you want to generate the list of the packages to be installed.&#xA;&#xA;```&#xA;pipx run pipreqs --encoding=utf-8 --savepath reqs.txt . &#xA;```&#xA;&#xA;Though this doesn&#39;t guarentee all the requirements for a file, it is really helpful for explicitly used packages in the python project.&#xA;</content>
      <type>til</type>
    </item>
    <item>
      <title>PGCLI: Postgres from the terminal</title>
      <link>meetgor.com/pgcli-pg-from-terminal</link>
      <description>Running SQL queries in a Postgres database with PGCLI. Exploring the python package PGCLI, that can run SQL queries for a postgres database environment from the command line.</description>
      <pubDate>Sun, 07 Aug 2022 00:00:00 UTC</pubDate>
      <content>&#xA;## Introduction&#xA;&#xA;Have you ever used the Postgres database and did you know you don&#39;t have to launch PGAdmin every time you want to write SQL queries, you can write down those queries even inside a terminal with a python package. It&#39;s PGCLI, that can act as an editor window for writing SQL queries for Postgres Databases. We can simply execute SQL queries in a PSQL-like shell with additional features like autocompletion, text-editing modes, file input/output options, etc.&#xA;&#xA;If you are like CLIs and love to play with backend systems like Postgres(database) then chances are you will love this article. This article will cover the basics of using the PGCLI tool to perform simply as well as advanced options in interacting with your Postgres database.&#xA;&#xA;## PGCLI &#xA;&#xA;PGCLi is a python package that acts as a CLI for executing SQL queries in a Postgres database. PGCLI allows us to interact with any Postgres database via the command line, it can be a remote database or a local database, you can access it right away from your terminal. The package acts as a CLI for accessing and executing any SQL queries, so we can simply provide the options/parameters to plug the database in and access the schema and its related data.&#xA;&#xA;## Installation&#xA;&#xA;There are a lot of ways pgcli can be installed, my preferred way is with `pipx`, it just works well and you don&#39;t have to install it every time or mess up your global python packages environment. &#xA;&#xA;```&#xA;pipx install pgcli&#xA;```&#xA;&#xA;![PGCLI Install with pipx](https://res.cloudinary.com/techstructive-blog/image/upload/v1659878333/blog-media/pgcli-install-pipx.png)&#xA;&#xA;We don&#39;t even require installing it when using pipx, as it will each time create a fresh instance of the pgcli in a virtual environment.&#xA;&#xA;We can now run the `pgcli` with parameters using the `pipx run` command. In the below command, we have used the `--help` options to list out all the commands and other options available with the `pgcli` command.&#xA;&#xA;```&#xA;pipx run pgcli --help&#xA;```&#xA;&#xA;![PGCLI Help](https://res.cloudinary.com/techstructive-blog/image/upload/v1659878322/blog-media/pgcli-help.png)&#xA;&#xA;&#xA;If this command is working fine, it means we are ready to connect and interact with a database with pgcli.&#xA;&#xA;## List local databases&#xA;&#xA;We can list all the databases in our local system by providing the hostname and the username, in my case, I have to provide the `localhost` and `postgres` as the hostname and the username respectively. Further, by providing the `--list` option, we can list down all the available databases on our system, basically for a given host and user.&#xA;&#xA;```&#xA;pipx run pgcli --host localhost --user postgres --list&#xA;&#xA;OR&#xA;&#xA;pipx run pgcli -h localhost -U postgres -l&#xA;```&#xA;&#xA;![PGCLI List all databases](https://res.cloudinary.com/techstructive-blog/image/upload/v1659878596/blog-media/pgcli-list-db.png)&#xA;&#xA;As, we can see, the command lists out all the available databases on the local server. This can help in getting an overview of the Postgres databases present in your local system. You need to enter the password for the username to access the database.&#xA;&#xA;## Connect to a database&#xA;&#xA;To connect to an individual Postgres database we have two options, we can either use a URL string of postgres database or parse parameters to the command individually. It&#39;s easier to use the URL option because it wraps a lot of things in a single string rather than writing each parameters.&#xA;&#xA;### Connect with the Postgres Connection URI&#xA;&#xA;We can simply pass the postgres connection URI for accessing a postgres database with pgcli. The URI has a specific pattern in the order where we need to specify the values like hostname, password, username, port, and database name. &#xA;&#xA;```&#xA;postgresql://username:password@hostname:port/database_name&#xA;```&#xA;&#xA;The above is the structure for a postgres connection URI, we parse in the `username`, `password` for that `username`, `hostname` with the `port`, and the `database name`. These parameters if parsed correctly can directly access the database.&#xA;&#xA;```&#xA;pipx run pgcli postgresql://postgres:postgres@localhost:5432/techstructive_blog&#xA;```&#xA;&#xA;![PGCLI Postgres Connection URI](https://res.cloudinary.com/techstructive-blog/image/upload/v1659878955/blog-media/pgcli-connect-uri.png)&#xA;&#xA;This command will leave us in a prompt where we are basically in a PSQL shell in the provided database or host. For connecting to a local database, the hostname will likely be `localhost` and postgres database port is generally `5432` there might be exceptions to this. We can quit out of PGCLI with `CTRL + D` or `exit`.&#xA;&#xA;While using a remote database, the hostname and other details might be provided, for instance, we might have a Django application, in that project, we will have `database_name`, `port`, and details mentioned in the `DATABASES` settings, those fields can be checked and a postgres connection URI might be constructed.&#xA;&#xA;Let&#39;s take an example.&#xA;&#xA;```python&#xA;DATABASES = {&#xA;    &#34;default&#34;: {&#xA;        &#34;ENGINE&#34;: &#34;django.db.backends.postgresql&#34;,&#xA;        &#34;NAME&#34;: &#34;blog&#34;,&#xA;        &#34;USER&#34;: &#34;meet&#34;,&#xA;        &#34;PASSWORD&#34;: &#34;postgres&#34;,&#xA;        &#34;HOST&#34;: &#34;localhost&#34;,&#xA;    }&#xA;}&#xA;```&#xA;&#xA;We have all the fields provided in the django project&#39; settings file. We can use this to construct a postgres database connection URI.&#xA;&#xA;```&#xA;pgcli postgresql://meet:postgres@localhost:5432/blog&#xA;```&#xA;&#xA;So, that is how you can extract parameters from other technologies and frameworks for working with postgres URIs.&#xA;&#xA;### Connect with CLI options/paramters&#xA;&#xA;We can parse the options like `hostname`, `password`, and `database name` manually with the CLI options that PGCLI provides. &#xA;&#xA;```&#xA;pipx run pgcli --username postgres --host localhost --port 5432 --dbname techstructive_blog&#xA;&#xA;OR&#xA;&#xA;pipx run pgcli -u postgres -h localhost -p 5432 -d techstructive_blog&#xA;```&#xA;&#xA;![PGCLI Connect Paramaters](https://res.cloudinary.com/techstructive-blog/image/upload/v1659879642/blog-media/pgcli-connect-paramters.png)&#xA;&#xA;&#xA;You will be prompted for a password for the database, after entering the password, you will be inside the psql shell. In there, we can execute SQL queries and other specific psql or pgcli commands.&#xA;&#xA;Once we have connected to a database, we can now try to work with the SQL queries and explore some of the commands and features provided by pgcli.&#xA;&#xA;## List out all databases if connected to a server&#xA;&#xA;Let&#39;s say we don&#39;t know the database name, we are just connected to a database server, we can get the list of the databases inside the shell with the `\l+` command. This command is similar to the `--list` parameter in the PGCLI command, but the only difference is that we are executing it from the psql shell rather than our terminal shell.&#xA;&#xA;```&#xA;# Let&#39;s say we connected to a database server&#xA;&#xA;pipx run pgcli --username postgres --host localhost --port 5432&#xA;&#xA;&#xA;# List out all databases in that server&#xA;&#xA;\l+&#xA;```&#xA;&#xA;![PGCLI List databases in a server](https://res.cloudinary.com/techstructive-blog/image/upload/v1659879988/blog-media/pgcli-list-databases.png)&#xA;&#xA;&#xA;So, that&#39;s how we would get the gist of all the databases inside the database server to which we are connected using the `\l+` command.&#xA;&#xA;&#xA;## List all tables in the database&#xA;&#xA;We can get a list of all the tables existing in the database we are logged in with the `\dt` command, we can simply enter the command in the prompt we are directed to once we are logged in to the postgres database.&#xA;&#xA;```&#xA;\dt&#xA;```&#xA;&#xA;![PGCLI List tables in a database](https://res.cloudinary.com/techstructive-blog/image/upload/v1659880232/blog-media/pgcli-list-tables.png)&#xA;&#xA;We can use `\d &lt;table_name&gt;` to describe the details of the table provided. We get back the list of the attributes inside the table and the indexes of the relationships of the table as well as the referenced table details.&#xA;&#xA;![PGCLI describe a table in a database](https://res.cloudinary.com/techstructive-blog/image/upload/v1659880453/blog-media/pgcli-describe-table.png)&#xA;&#xA;We also have other commands for displaying types, schemas, roles, views, etc. with the `\d` prefix, a detailed list can be found in the [PGCLI documentation](https://www.pgcli.com/commands).&#xA;&#xA;## Executing queries&#xA;&#xA;We can execute SQL queries in the PGCLI prompt as normally we do in a PSQL shell. There are added benefits like certain modes of editing text and auto-completion. We&#39;ll execute a few queries and also try out other options for editing and saving queries.&#xA;&#xA;Normally for simple and easy tasks, we can write SQL queries right in the PSQL shell, it might be small and simple to construct a query. Let&#39;s take the simplest example to get all the attribute lists from a specific table in a database.&#xA;&#xA;```SQL&#xA;SELECT * FROM table_name&#xA;```&#xA;&#xA;![PGCLI executing SQL queries](https://res.cloudinary.com/techstructive-blog/image/upload/v1659880794/blog-media/pgcli-sql-query.png)&#xA;&#xA;We get an excellent table display of output which we can view by scroll or arrow keys. We can even use `j` and `k` for moving vertically in an output table.&#xA;&#xA;### Wriing modes in PGCLI&#xA;&#xA;We can use two modes in PGCLI prompt, one is the Emacs mode which is the default one and the other is Vi-mode for Vim fanboys. We can switch between these modes with `F4` key. The `Emacs-mode` is just a normal typing experience without any modes or shortcut macros and other stuff. Though it&#39;s nice that PGCLI offers a VI-mode, it is great for people using Vim, when using the Shell for editing a Query, this mode can be utilized.&#xA;&#xA;![PGCLI VI-mode](https://res.cloudinary.com/techstructive-blog/image/upload/v1659882586/blog-media/pgcli-vi-mode-demo.gif)&#xA;&#xA;We can use `hjkl` keybinding for movement and other normal mode keymaps like `w` for moving a word, or `b` for moving a word in the backward direction, `e` to the end of the word, etc. We can use `i` or `a` for entering into insert mode, `dd` to delete the entire line, `cc` or `S` to delete the current line and enter into insert mode, `yy` to yank line, and `p` to paste, `u` for undo, etc.&#xA;&#xA;We can even execute shell commands by using the `!` in normal mode where we will be prompted for the command executed in the same window.&#xA;&#xA;### Autocompletion in PGCLI shell&#xA;&#xA;PGCLI shell has an auto-completion feature that will provide some suggestions based on the recent queries or commands executed or the default options. You can toggle the autocompletion with the `F2` key, it is officially called as `Smart-Completion` as you would see in the bottom left corner of the shell.&#xA;&#xA;### Select an Editor to write queries&#xA;&#xA;We can use different editors for writing SQL queries. We can write a query from an editor by using the `�` command. The default editor is chosen which will be set in one of your `$EDITOR` or `$VISUAL` environment variables. You can set them manually in the bashrc file by exporting the value of `VISUAL` or `EDITOR` as the name of your editor.&#xA;&#xA;```bash&#xA;export VISUAL=vim&#xA;&#xA;OR&#xA;&#xA;export EDITOR=vim&#xA;&#xA;OR&#xA;&#xA;export VISUAL=gedit&#xA;```&#xA;&#xA;Here, we can set `VISUAL` environment variable as the name of the editor or the path to it. The `VISUAL` environment variable is preferred first. For the details, we can check out the [editor command documentation](https://www.pgcli.com/editor).&#xA;&#xA;Once, we have configured the editor, we will be inside the editor after we enter the `�` command. We can write queries inside the editor and quit after we are done, once the editor is closed, the text is read from the editor and entered in the psql shell. This will make us wait for the enter command for executing the query. &#xA;&#xA;We can even execute more than one query at a time if we use the `;` at the end of each query. Also, we can press `v` in VI-normal mode, to open the current query in the default editor.&#xA;&#xA;### Save the query output to a file&#xA;&#xA;Let&#39;s say we have written a query inside the psql shell and we want the output to be saved in a file. We can achieve that with the `\o` command, we need to specify the filename in which the output of the queries will be saved. &#xA;&#xA;**NOTE: Once we use the `\o` command, all the queries will start appending the results in the provided file. To stop the behavior, you can use `\o` (without any filename) to stop appending the results to a file.**&#xA;&#xA;```&#xA;# Start recording the output of queries to file&#xA;\o filename&#xA;&#xA;&#xA;# Stop recording the output of queries to file&#xA;\o&#xA;```&#xA;&#xA;![PGCLI Query output to file](https://res.cloudinary.com/techstructive-blog/image/upload/v1659884242/blog-media/pgcli-output-query.gif)&#xA;&#xA;### Execute query from a file&#xA;&#xA;We can even execute queries stored in a file, we can use the `\i` command followed by the file name. This will load in the queries from the file and will display the output of each query.&#xA;&#xA;```&#xA;\i file_name&#xA;```&#xA;&#xA;![PGCLI query from a file](https://res.cloudinary.com/techstructive-blog/image/upload/v1659883225/blog-media/pgcli-file-query.gif)&#xA;&#xA;## Summary&#xA;&#xA;In this little article, we were able to explore the basics of the PGCLI package in python, with that package we can interact with the Postgres database that can be on your local server or somewhere remotely. With the PSQL-like shell provided by the PGCLI tool, we were able to write SQL queries, execute commands, write/read queries from files, etc. This tool is quite handy for people dealing with postgres databases and who need to view data or schema in that database.&#xA;&#xA;I&#39;ve personally used this tool in my current internship where I needed to create a few SQL queries to fetch particular data related to various tables and relationships. It saved a lot of time with auto-completion and integration with the text editor for writing longer queries, especially with JOINS and nested queries.&#xA;&#xA;## Conclusion&#xA;&#xA;This was my take and experience of using the PGCLI tool and exploring the various features it provides that can be leveraged for quick interactions with a Postgres database. Hopefully, you have learned something from this post, if you have any queries(NOT SQL queries) or feedback, please let me know in the comments or on my social handles. Thank you for reading and Happy Coding :)&#xA;</content>
      <type>posts</type>
    </item>
    <item>
      <title>Django-Mermaid</title>
      <link>meetgor.com/</link>
      <description>Generate ER Diagram for your Django project in Markdown with Mermaid</description>
      <pubDate>Wed, 03 Aug 2022 00:00:00 UTC</pubDate>
      <content>Create ER Diagrams (Entity Relationship Diagrams) of your Django projects related to different models of associated applications in Mermaid.&#xA;&#xA;Tech Stack:&#xA;- Python&#xA;- Django&#xA;</content>
      <type>projects</type>
    </item>
    <item>
      <title>Django: Get list of all models and associated fields in a django project</title>
      <link>meetgor.com/django-list-models</link>
      <description>Get the list of all the models and associated fields/attributes in a django project or an application</description>
      <pubDate>Tue, 02 Aug 2022 00:00:00 UTC</pubDate>
      <content>## Context&#xA;&#xA;Let&#39;s say we want the list of all the models and associated attributes in all the applications of a django project, we can do that using the [django.apps](https://docs.djangoproject.com/en/4.0/ref/applications/) with apps method. &#xA;&#xA;## Get all the models in a project&#xA;&#xA;To fetch all the models, we can use the [get_models](https://docs.djangoproject.com/en/4.0/ref/applications/#django.apps.AppConfig.get_models) methods, it will return a list of model classes in all the entire project(all applications). We can import all the models in the django project with the command:&#xA; &#xA;```python&#xA;from django.apps import apps&#xA;models = apps.get_models()&#xA;```&#xA;&#xA;```&#xA;[&lt;class &#39;django.contrib.admin.models.LogEntry&#39;&gt;, &lt;class &#39;django.contrib.auth.models.Permission&#39;&gt;, &#xA;&lt;class &#39;django.contrib.auth.models.Group&#39;&gt;, &lt;class &#39;django.contrib.contenttypes.models.ContentType&#39;&gt;,&#xA; &lt;class &#39;django.contrib.sessions.models.Session&#39;&gt;, &lt;class &#39;allauth.account.models.EmailAddress&#39;&gt;, &#xA;&lt;class &#39;allauth.account.models.EmailConfirmation&#39;&gt;, &lt;class &#39;allauth.socialaccount.models.SocialApp&#39;&gt;, &#xA;&lt;class &#39;allauth.socialaccount.models.SocialAccount&#39;&gt;, &lt;class &#39;allauth.socialaccount.models.SocialToken&#39;&gt;, &#xA;&lt;class &#39;user.models.TimeStampedModel&#39;&gt;, &lt;class &#39;user.models.User&#39;&gt;, &lt;class &#39;articles.models.Tags&#39;&gt;,&#xA; &lt;class &#39;articles.models.Series&#39;&gt;, &lt;class &#39;articles.models.Article&#39;&gt;, &lt;class &#39;blog.models.Blog&#39;&gt;]&#xA;```&#xA;&#xA;We are importing the apps and creating a list of the models in our django project. The Django app command will load all the applications in the project, and the [get_models]() method will fetch the associated models. This has resulted in a list of model class objects, we can iterate over them and fetch the required details, we want.&#xA;&#xA;For instance, If I am interested in the name of these models, I can use the `__name__` property to fetch the model&#39;s name. &#xA;&#xA;```python&#xA;from django.apps import apps&#xA;model_list = apps.get_models()&#xA;&#xA;for model in model_list:&#xA;    print(model.__name__)&#xA;```&#xA;&#xA;```&#xA;LogEntry&#xA;Permission&#xA;Group&#xA;ContentType&#xA;Session&#xA;EmailAddress&#xA;EmailConfirmation&#xA;SocialApp&#xA;SocialAccount&#xA;SocialToken&#xA;TimeStampedModel&#xA;User&#xA;Tags&#xA;Series&#xA;Article&#xA;Blog&#xA;&#xA;```&#xA;&#xA;So, from the above example, we can see we have accessed all the model names in our entire django project. &#xA;&#xA;## Access Application name associated with a model&#xA;&#xA;For accessing the name of the application from the model class, we can use the `_meta` attribute followed by the `app_label` property to get the `app_name` associated with the model.&#xA;&#xA;```python&#xA;from django.apps import apps&#xA;model_list = apps.get_models()&#xA;&#xA;for model in model_list:&#xA;    print(f&#34;{model._meta.app_label}  -&gt; {model.__name__}&#34;)&#xA;```&#xA;&#xA;```&#xA;admin  -&gt; LogEntry&#xA;auth  -&gt; Permission&#xA;auth  -&gt; Group&#xA;contenttypes  -&gt; ContentType&#xA;sessions  -&gt; Session&#xA;account  -&gt; EmailAddress&#xA;account  -&gt; EmailConfirmation&#xA;socialaccount  -&gt; SocialApp&#xA;socialaccount  -&gt; SocialAccount&#xA;socialaccount  -&gt; SocialToken&#xA;user  -&gt; TimeStampedModel&#xA;user  -&gt; User&#xA;articles  -&gt; Tags&#xA;articles  -&gt; Series&#xA;articles  -&gt; Article&#xA;blog  -&gt; Blog&#xA;```&#xA;&#xA;In the above example, we can see we have printed all the models with their associated application names. &#xA;&#xA;## Accessing all the attributes associated with a model&#xA; &#xA;To access all the fields/property/attributes associated with a model, we can again use the `_meta` attribute followed by the `get_fields` method.  This method will return a list of field objects. For accessing the name of those attributes/fields, we have to iterate over the list and then further use `name` property.&#xA;&#xA;```python&#xA;from django.apps import apps&#xA;model_list = apps.get_models()&#xA;for model in model_list:&#xA;    print(model.__name__)&#xA;    field_list = model._meta.get_fields()&#xA;    for field in field_list:&#xA;        print(field.name)&#xA;```&#xA;&#xA;```&#xA;LogEntry&#xA;id&#xA;action_time&#xA;user&#xA;content_type&#xA;object_id&#xA;object_repr&#xA;action_flag&#xA;change_message&#xA;Permission&#xA;group&#xA;user&#xA;id&#xA;...&#xA;...&#xA;Blog&#xA;article&#xA;id&#xA;name&#xA;description&#xA;authors&#xA;```&#xA;So, that is how we get all the associated field names in the associated models in our django projects. Also, there are a lot of attributes, we can access with the apps property. The `__dict__.keys()` can be used to get the list of all associated properties or other methods in a class instance.&#xA;&#xA;```&#xA;&gt;&gt;&gt; m[14]._meta.get_fields()[4].__dict__.keys()&#xA;&#xA;dict_keys([&#39;name&#39;, &#39;verbose_name&#39;, &#39;_verbose_name&#39;, &#39;primary_key&#39;, &#39;max_length&#39;, &#39;_unique&#39;, &#39;blank&#39;, &#39;null&#39;, &#39;remote_field&#39;,&#xA; &#39;is_relation&#39;, &#39;default&#39;, &#39;editable&#39;, &#39;serialize&#39;, &#39;unique_for_date&#39;, &#39;unique_for_month&#39;, &#39;unique_for_year&#39;, &#39;choices&#39;, &#xA;&#39;help_text&#39;, &#39;db_index&#39;, &#39;db_column&#39;, &#39;_db_tablespace&#39;, &#39;auto_created&#39;, &#39;creation_counter&#39;, &#39;_validators&#39;, &#39;_error_messages&#39;, &#xA;&#39;error_messages&#39;, &#39;db_collation&#39;, &#39;validators&#39;, &#39;attname&#39;, &#39;column&#39;, &#39;concrete&#39;, &#39;model&#39;])&#xA;```&#xA;In the above example, I am using a list of models and getting the list of all the attributes associated with a field of a model. This can be applied and other properties can be accessed. &#xA;&#xA;## Get Models with a specific app&#xA;&#xA;Let&#39;s say we want all the models associated with a particular application in the project, we can do that by specifying the name of the application.&#xA;&#xA;```python&#xA;from django.apps import apps&#xA;&#xA;app_info = apps.get_app_config(&#39;articles&#39;)&#xA;&#xA;print(app_info.__dict__.keys()&#xA;&#xA;print(app_info.verbose_name)&#xA;&#xA;print(app_info.models)&#xA;&#xA;print(app_info.models[&#39;article&#39;].__dict__.keys())&#xA;```&#xA;&#xA;```&#xA;dict_keys([&#39;name&#39;, &#39;module&#39;, &#39;apps&#39;, &#39;label&#39;, &#39;verbose_name&#39;, &#39;path&#39;, &#39;models_module&#39;, &#39;models&#39;])&#xA;&#xA;&#39;Article&#39;&#xA;&#xA;{&#39;tags&#39;: &lt;class &#39;articles.models.Tags&#39;&gt;, &#39;series&#39;: &lt;class &#39;articles.models.Series&#39;&gt;, &#39;article&#39;: &lt;class &#39;articles.models.Article&#39;&gt;}&#xA;&#xA;dict_keys([&#39;__module__&#39;, &#39;Article_Status&#39;, &#39;__str__&#39;, &#39;get_absolute_url&#39;, &#39;__doc__&#39;, &#39;_meta&#39;, &#39;DoesNotExist&#39;, &#39;MultipleObjectsReturned&#39;, &#39;title&#39;, &#39;description&#39;, &#39;content&#39;, &#39;status&#39;, &#39;get_status_display&#39;, &#39;blog_id&#39;, &#39;blog&#39;, &#39;author_id&#39;, &#39;author&#39;, &#39;timestampedmodel_ptr_id&#39;, &#39;timestampedmodel_ptr&#39;])&#xA;```&#xA;&#xA;So, we can see that we have got the information about the app `articles` in the proejct where we can get the `verbose_name` property to fetch the human-readable format of the article model. Further, we can get all the models associated with the `articles` application. We get back a dict with the model name as the key and the class reference as the value.&#xA;&#xA;We have accessed the `article` model in the `articles` application and fetched all the associated properties or methods in the model.&#xA;&#xA;For further references, you can visit the [django apps documentation](https://docs.djangoproject.com/en/4.0/ref/applications/) to get more relevant methods and properties.&#xA;</content>
      <type>til</type>
    </item>
    <item>
      <title>Django Blog DevLog: Load Frontmatter data into Template/Model Form Fields</title>
      <link>meetgor.com/django-form-load-frontmatter</link>
      <description>Rendering frontatter from content field into the Template Form field using HTMX and frontmatter libraries</description>
      <pubDate>Mon, 01 Aug 2022 00:00:00 UTC</pubDate>
      <content>## Introduction&#xA;&#xA;I have an Article Form where I load my post into it directly, it might have frontmatter. So what I wish to achieve is when I paste in the content, the frontmatter should be picked up and it should render the form fields like `title`, `description`, and then also remove the frontmatter from the content.&#xA;&#xA;To do that, we will require a model to work with and a form based on that model. We will exclude a few fields from that model so as to process these attributes on the server side. I am working on my Blog project which is a simple Django application.  You can get the source code for the project on the [GitHub repository](https://github.com/mr-destructive/techstructive-blog/).&#xA;&#xA;## Django Project Context&#xA;&#xA;The techstructive-blog is a django project, which has a couple of applications currently, not in a good situation. There are apps like `article`, `blog`, and `user`. This project has templates and static folder in the base directory. The project is deployed on [railway](https://www.railway.app) this is an always under development project, you can check out the [techstructive-blog](https://django-blog.up.railway.app). We can get the bits and pieces of the project details required for understanding what I want to do with the following sections.&#xA;&#xA;### Article Model&#xA;&#xA;We have an `Article` model with attributes like `title`, `description`,  `author` as a Foreign Key to the user model, and a few other attributes which is not related to what we are trying to achieve right now or at least don&#39;t require an explanation. We have a model method called `get_absolute_url` for getting a URL in order to redirect the client when the model instance is created or updated from the backend. You can definitely check out the details of these small components or templates in the project repository. &#xA;&#xA;```python&#xA;# articles/models.py&#xA;&#xA;&#xA;class Article(TimeStampedModel):&#xA;    class Article_Status(models.TextChoices):&#xA;        DRAFT = (&#xA;            &#34;DRAFT&#34;,&#xA;            _(&#34;Draft&#34;),&#xA;        )&#xA;        PUBLISHED = (&#xA;            &#34;PUBLISHED&#34;,&#xA;            _(&#34;Published&#34;),&#xA;        )&#xA;&#xA;    title = models.CharField(max_length=128)&#xA;    description = models.CharField(max_length=256)&#xA;    content = models.TextField(default=&#34;&#34;, null=False, blank=False)&#xA;    status = models.CharField(&#xA;        max_length=16,&#xA;        choices=Article_Status.choices,&#xA;        default=Article_Status.DRAFT,&#xA;    )&#xA;    blog = models.ForeignKey(Blog, on_delete=models.CASCADE, null=True, blank=True)&#xA;    author = models.ForeignKey(User, on_delete=models.CASCADE, related_name=&#34;author&#34;)&#xA;&#xA;    def __str__(self):&#xA;        return self.title&#xA;&#xA;    def get_absolute_url(self):      &#xA;        return reverse(&#39;articles:article-detail&#39;, args=[str(self.id)])&#xA;```&#xA;&#xA;In the below snippet, we have the forms defined in the article application for creating or updating of article instance.  We will be using model forms as our form data should contain fields related to a model in this case the `Article` model. So when we inherit the `forms.ModelForm` in our custom `ArticleForm` we simply need to specify the model and it will take in all the attributes of that model by default, but if we specify the `fields` or `exclude` tuples, it will include only or exclude only the provided list of attributes from the model. &#xA;&#xA;We have also added the widgets for the form fields which will allow us to customize the way the fields in the template/form will render. We can specify the HTML attributes like `width`, `height`, `style`, etc.  &#xA;&#xA;### Article Form&#xA;&#xA;```python&#xA;# article/forms.py&#xA;&#xA;&#xA;from django import forms&#xA;from .models import Article&#xA;&#xA;&#xA;class ArticleForm(forms.ModelForm):&#xA;    class Meta:&#xA;        model = Article&#xA;        exclude = (&#xA;            &#34;created&#34;,&#xA;            &#34;updated&#34;,&#xA;            &#34;author&#34;,&#xA;        )&#xA;        widgets = {&#xA;            &#34;title&#34;: forms.TextInput(&#xA;                attrs={&#xA;                    &#34;class&#34;: &#34;form-control&#34;,&#xA;                    &#34;style&#34;: &#34;max-width: 450px; align: center;&#34;,&#xA;                    &#34;placeholder&#34;: &#34;Title&#34;,&#xA;                }&#xA;            ),&#xA;            &#34;description&#34;: forms.TextInput(&#xA;                attrs={&#xA;                    &#34;class&#34;: &#34;form-control&#34;,&#xA;                    &#34;style&#34;: &#34;max-width: 900px; &#34;,&#xA;                    &#34;placeholder&#34;: &#34;Description&#34;,&#xA;                }&#xA;            ),&#xA;            &#34;content&#34;: forms.Textarea(&#xA;                attrs={&#xA;                    &#34;class&#34;: &#34;form-control post-body&#34;,&#xA;                    &#34;id&#34;: &#34;text-content&#34;,&#xA;                    &#34;style&#34;: &#34;max-width:900px;&#34;,&#xA;                    &#34;hx-post&#34;: &#34;/article/meta/&#34;,&#xA;                    &#34;placeholder&#34;: &#34;Content&#34;,&#xA;                }&#xA;            ),&#xA;            &#34;blog&#34;: forms.Select(&#xA;                attrs={&#xA;                    &#34;class&#34;: &#34;form-control&#34;,&#xA;                    &#34;placeholder&#34;: &#34;Blog Publication&#34;,&#xA;                }&#xA;            ),&#xA;        }&#xA;&#xA;```&#xA;&#xA;So, these are my models and form files in the article app. Using htmx and without any javascript I want to update the form so that it picks up the front matter in the content field which is a text area and fills the title, description other attributes automatically for me. &#xA;&#xA;This can be done in a lot of ways, but I will be sharing one of the ways that I recently used in my blog project. This process involves creating a class-based view and adding a `POST` method that won&#39;t post any data to the backend but will send necessary data to the view.&#xA;&#xA;&#xA;Let&#39;s see the process before diving into any of the code:&#xA;&#xA;## Gist of the Process&#xA;&#xA;- Attach a `hx-post` attribute to the form field for sending the request to a view&#xA;- When the request is sent, the data is loaded with `request.POST`, it is cleaned and converted in python-readable format with json.&#xA;- Once we have the data, we try to use the `frontmatter.loads` function that will load the content and if we have a frontmatter in the text, it will load it as a `frontmatter.POST` object.&#xA;- We will extract `title`, `description`, and other data fields from the object.&#xA;- We will initialize a Form instance of Article, with the initial data values as the extracted data from the frontmatter.&#xA;- Now we have two options:&#xA;    - If the article instance already exists i.e. we are updating the article&#xA;   - Else we are creating a new article&#xA;&#xA;Accordingly, we will load the form in the respective templates i.e. `update.html` for updating the existing articles and `article-form.html` for a new article.&#xA;&#xA;## Adding HTMX Magic&#xA;&#xA;If you&#39;d have seen we have a `hx-post` attribute in the `article/forms.py` file, the `content` widget has a `hx-post` attribute which sends a post request to the `article/meta/` URL route. This route we will bind to the `ArticleMetaView` which we will define in a few moments. This is usually sent once we change a certain text in the content field, so we can modify it as per your requirement with `hx-trigger` that can enable us to specify the trigger event or the type of trigger we want. Further, you can read from the [htmx docs](https://htmx.org/docs/#trigger-modifiers) about these triggers and other attributes. &#xA;&#xA;```python&#xA;# article/urls.py&#xA;&#xA;from django.urls import path&#xA;from . import views&#xA;&#xA;app_name = &#34;articles&#34;&#xA;&#xA;urlpatterns = [&#xA;    path(&#34;&#34;, views.ArticleCreateView.as_view(), name=&#34;article-create&#34;),&#xA;    path(&#34;&lt;int:pk&gt;/&#34;, views.ArticleDetailView.as_view(), name=&#34;article-detail&#34;),&#xA;    path(&#34;delete/&lt;int:pk&gt;/&#34;, views.ArticleDetailView.as_view(), name=&#34;article-delete&#34;),&#xA;    path(&#34;edit/&lt;int:pk&gt;&#34;, views.ArticleDetailView.as_view(), name=&#34;article-update&#34;),&#xA;&#xA;    # the new view that we will create&#xA;    path(&#34;meta/&#34;, views.ArticleMetaView.as_view(), name=&#34;article-meta&#34;),&#xA;]&#xA;```&#xA;&#xA;## Capture Frontmatter Meta-data View &#xA;&#xA;Along with the Create, Detail/List, Update, Delete View, I will create a separate class called `ArticleMetaView` that will fetch the form fields and render the templates again but this time it will fill in the frontmatter meta-data in the fields if the content is parsed with the relvant frontmatter.&#xA;&#xA;```python&#xA;# articles/view.py&#xA;&#xA;class ArticleMetaView(View):&#xA;    model = Article&#xA;&#xA;    def post(self, request, *args, **kwargs):&#xA;        &#xA;        data = json.loads(json.dumps(dict(request.POST)))&#xA;        loaded_frontmatter = frontmatter.loads(data[&#39;content&#39;][0])&#xA;&#xA;       # frontmatter has keys i.e. attributes like title, description, etc.&#xA;        if dict(loaded_frontmatter):&#xA;            article_title = loaded_frontmatter[&#39;title&#39;]&#xA;            article_description = loaded_frontmatter[&#39;description&#39;]&#xA;            form = ArticleForm(initial={&#39;title&#39;: article_title, &#xA;            &#39;description&#39;: article_description, &#39;content&#39;: loaded_frontmatter.content})&#xA;            context = {&#39;form&#39;: form}&#xA;            article_list = Article.objects.filter(title=article_title)&#xA;            if article_list:&#xA;                article = article_list.last()&#xA;                context[&#39;article&#39;] = article&#xA;                return render(request, &#39;articles/edit_article.html&#39;, context)&#xA;            return render(request, &#39;articles/article_form.html&#39;, context)&#xA;&#xA;        article_list = Article.objects.filter(title=data[&#39;title&#39;][0])&#xA;       &#xA;       # if the article title has been already taken i.e. we are updating an article&#xA;&#xA;        if article_list:&#xA;            article = article_list.last()&#xA;            form = ArticleForm(data=request.POST)&#xA;            context = {&#39;form&#39;: form}&#xA;            context[&#39;article&#39;] = article&#xA;            return render(request, &#39;articles/edit_article.html&#39;, context)&#xA;&#xA;        form = ArticleForm(data=request.POST)&#xA;        context = {&#39;form&#39;: form}&#xA;        return render(request, &#39;articles/article_form.html&#39;, context)&#xA;&#xA;```&#xA;&#xA;In the above `ArticleMetaView` we have created a `post` method as we want to get hold of the content from the form. So, we start by extracting and converting the `request.body` data into an appropriate type for easily working with python. So, the `request.body` will contain the data like `csrf_token`, `form_data`, etc. received from the frontend template. We store the received data as `data` and now from this data, we can load the content field which will have the content information.&#xA;&#xA;Firstly we will extract the `request.body` which will contain the data from the form as we have made a `POST` request to this endpoint. For doing that we need to parse the content in a apropriate format such that it is python friendly. So we wrap the `request.body` into json format and then decode it back into the json string. This will give us the dict of the request data.&#xA;&#xA;```python&#xA;data = json.loads(json.dumps(dict(request.POST)))&#xA;```&#xA;&#xA;```&#xA;{&#39;csrfmiddlewaretoken&#39;: [&#39;bSYJxD39XH509tD1tZGd0WU21PUaKaLeqjjGbyzRvLXF4P8iIxb5l0fmTWVFjELQ&#39;], &#39;title&#39;: [&#39;test2&#39;], &#39;description&#39;: [&#39;test&#39;], &#39;content&#39;: [&#39;test something&#39;], &#39;status&#39;: [&#39;DRAFT&#39;], &#39;blog&#39;: [&#39;&#39;]}&#xA;```&#xA;&#xA;So, this will grab the request data as a dict, we can then extract the data from this as it has data from the Form fields. We are interested in the content field in the Form, so we can get it by specifying the key `content` from the extracted data. But as we can see the data doesn&#39;t contain the actual data instead it is wrapped in a list i.e. `[&#39;test something&#39;]`, so we will have to index it and then fetch it.&#xA;&#xA;```python&#xA;content_string = data[&#39;content&#39;][0]&#xA;```&#xA;&#xA;This will give us the exact content field as a string. So, we can now move into extracting the frontmatter from the fields. &#xA;&#xA;Now, we can use the [frontmatter](https://python-frontmatter.readthedocs.io/en/latest/index.html) library to parse the content into the [loads](https://python-frontmatter.readthedocs.io/en/latest/api.html#frontmatter.loads) funciton and extract the frontmatter if it is present in the content field. The frontmatter library has a `loads` function which takes in a string and can give out a [frontmatter.Post](https://python-frontmatter.readthedocs.io/en/latest/api.html#post-objects) object. The loads function is differnet from the [load](https://python-frontmatter.readthedocs.io/en/latest/api.html#frontmatter.load) function as the load frunciton is for reading data from a stream of bytes i.e. a file or othe related byte object. The differnece is subtle but it took a read at the [documentation](https://python-frontmatter.readthedocs.io/en/latest/api.html#module-frontmatter).&#xA;&#xA;```python&#xA;post = data[&#39;content&#39;][0]&#xA;loaded_frontmatter = frontmatter.loads(post)&#xA;```&#xA;&#xA;This wil load the content and give us a `frontmatter.Post` as said earlier. This will contain a dict with all the frontmatter if it has any and will by default parse the non-frontmatter data i.e. the remaining text into the `content` key. We need a chack if the Form field had any fronmatter this can be checked by the `dict(loaded_frontmatter)` which will return None if it cannot load the frontmatter.&#xA;&#xA;```python&#xA;loaded_frontmatter = frontmatter.loads(data[&#39;content&#39;][0])&#xA;if dict(loaded_frontmatter):&#xA;  print(loaded_frontmatter.keys())&#xA;```&#xA;&#xA;```&#xA;dict_keys([&#39;templateKey&#39;, &#39;title&#39;, &#39;description&#39;, &#39;date&#39;, &#39;status&#39;])&#xA;```&#xA;&#xA;So once we have the frontmatter loaded we can get specific keys from it and initialize the form vaues to them. But we have made clear distictions that we want to perform a specific task if we have frontmatter keys in the content field of the Form else we can do something else.&#xA;&#xA;First let&#39;s handle the loading of the frontmatter into the form. For doing that we will get all the required attributes from the frontmatter like `title`, `description`, `content`, etc which can be accessed normally as we extract the value from a key in a dict.&#xA;&#xA;Once we have got those keys, we can start filling in the Form data with initial values. The [Django Model form](https://docs.djangoproject.com/en/4.0/topics/forms/modelforms/) takes in a parameter like [initial](https://docs.djangoproject.com/en/4.0/topics/forms/modelforms/#providing-initial-values) which can be a dict of the fiields along with the value that can be used for rendering the form initially when we load the template.&#xA;&#xA;```python&#xA;article_title = loaded_frontmatter[&#39;title&#39;]&#xA;article_description = loaded_frontmatter[&#39;description&#39;]&#xA;&#xA;form = ArticleForm(initial={&#39;title&#39;: article_title, &#39;description&#39;: article_description, &#39;content&#39;: loaded_frontmatter.content})&#xA;```&#xA;&#xA;This will take in a `ArticleForm` and fill the initial values like `title`, `description`, etc which we have provided in the dict with the values. Now, we need to parse this form in the current template or re-render the template. But before that, we need to parse this context into the template. We will create a dict with `form` as the key which can be used to render in the template.&#xA;&#xA;Also, we have a two ways here, either the user is creating a new article or it is updating a existing article. We need to make sure that we preserve the initial fields in the form as we are updating the existing article. So, we can filter the article objects as per the title of the current title and then if we find a article with that title, we will parse the context with that article object.&#xA;&#xA;```python&#xA;article_list = Article.objects.filter(title=article_title)&#xA;if article_list:&#xA;    article = article_list.last()&#xA;    context{&#xA;      &#39;form&#39;: form,&#xA;      &#39;article&#39;: article&#xA;    }&#xA;    return render(request, &#39;articles/edit_article.html&#39;, context)&#xA;context = {&#39;form&#39;: form}&#xA;return render(request, &#39;articles/article_form.html&#39;, context)&#xA;```&#xA;&#xA;Now, we have form data along with the article instance used for rendering the form with appropriate content. So, this will work for editing an already existing article. For a new article, we have to simply parse the form to the template and it will render the title picked from the fotnmatter or leave it empty.&#xA;&#xA;Similarly, for the article with no frontmatter we will iterate over the article and if the article&#39;s title already exist, we will render the article data with the form else render the form with the parsed title and other meta-data in the form.&#xA;&#xA;&#xA;&lt;video width=&#34;800&#34; height=&#34;450&#34; controls&gt;&#xA;  &lt;source src=&#34;https://res.cloudinary.com/techstructive-blog/video/upload/v1659370006/blog-media/frontmatter-load-htmx.mp4&#34; type=&#34;video/mp4&#34;&gt;&#xA;&lt;/video&gt;&#xA;&#xA;So that is how we render the form data with frontmatter into appropriate meta-data in the form. We have used Django forms and make use of HTMX for the dynamic updation of form.&#xA;</content>
      <type>til</type>
    </item>
    <item>
      <title>Django + HTMX CRUD application</title>
      <link>meetgor.com/django-htmx-crud</link>
      <description>Creating a basic CRUD application with Django and HTMX</description>
      <pubDate>Sun, 31 Jul 2022 00:00:00 UTC</pubDate>
      <content>&#xA;## Introduction&#xA;&#xA;Gone are the days of writing Ajax requests with javascript, just add a few parameters to the HTML content tags and you will be ready for sending requests to your backend. So, we are going back in time and correcting the way we think of APIs and client/server-side rendering. We are referring to the [Hypermedia model](https://en.wikipedia.org/wiki/Hypermedia) for levering the server-side processing of data. Let&#39;s get our feets wet with this ancient but revolutionary methodology of development with [HTMX](https://htmx.org/).&#xA;&#xA;Yes, HTMX can be used for the API/server-side calls directly in the HTML. We will be exploring the basis of HTMX by creating a basic CRUD application.&#xA;&#xA;&#xA;## What is HTMX?&#xA;&#xA;The first question that might come up is what and why HTMX? Htmx is a great library, it&#39;s a javascript library but wait. It is a javascript library designed to allow us to write less or no javascript at all. It acts as a way to send AJAX requests without you writing any javascript. It uses native browser features directly from HTML.&#xA;&#xA;So, we can use HTMX to create interactive templates in our Django application. We can dynamically call and fetch data from the server by using simple HTML attributes like `hx-get`, `hx-post`, etc. We&#39;ll cover those in this article.&#xA;&#xA;You can check the source code used in this article on this [GitHub repository](https://github.com/Mr-Destructive/htmx-blog-django).&#xA;&#xA;## Setup Django Project&#xA;&#xA;We&#39;ll be creating a Django project from scratch and designing a basic blog kind of app. We will be creating a quite simple project with a couple of apps like `user` for authentication and `article` for the CRUD part of our blog application.&#xA;&#xA;To set up a django project, we can run the following commands to quickly get up and running with a base django project.&#xA;&#xA;```&#xA;mkdir htmx_blog&#xA;python3 -m venv .venv&#xA;source .venv/bin/activate&#xA;pip install django&#xA;django-admin startproject htmx_blog .&#xA;```&#xA;&#xA;I have a base user model that I use for a simple authentication system in some basic django projects, you can define your own user app or get the app from [here](https://github.com/Mr-Destructive/django-todo/tree/master/user).&#xA;&#xA;So, that being said, we will be using the user model for the article model which we will be defined next. By creating a basic signup functionality, you are good to go!&#xA;&#xA;### Create the Article app&#xA;&#xA;We will need at least an app to work with htmx as we will define models, views, and URLs later as we configure the htmx.&#xA;&#xA;```&#xA;django-admin startapp article&#xA;```&#xA;&#xA;After the app has been created, you can add those app labels into the `INSTALLED_APPS` config in the `settings.py` file. The `user` app and the `article` app need to be added to the installed apps for the django to pick those up for various contexts related to the project.&#xA;&#xA;```&#xA;# htmx_blog/settings.py&#xA;&#xA;INSTALLED_APPS = [&#xA;    ...&#xA;    ...&#xA;    ...&#xA;&#xA;    &#39;article&#39;,  &#xA;    &#39;user&#39;,&#xA;]&#xA;```&#xA;&#xA;We are sone with the base setup, we also would require a few more configs for the proper working of the project.&#xA;&#xA;### Setup Templates and Static files&#xA;&#xA;Templates will play an important role in the htmx part, so it is equally important to configure them properly before dabbling into the htmx and client-side rendering of data.&#xA;&#xA;I like to keep all the templates in a single folder in the `BASE_DIR` with separate sub-folders for specific apps. Also a single `static` folder with `css`, `js`, and `images` as the sub-folfers for a larger project.&#xA;&#xA;```&#xA;mkdir templates static&#xA;```&#xA;&#xA;Further, configure the created static and templates in the settings.&#xA;&#xA;```python&#xA;&#xA;TEMPLATES = [&#xA;    {&#xA;        &#39;BACKEND&#39;: &#39;django.template.backends.django.DjangoTemplates&#39;,&#xA;        &#39;DIRS&#39;: [os.path.join(BASE_DIR, &#34;templates&#34;)],&#xA;        &#39;APP_DIRS&#39;: True,&#xA;        &#39;OPTIONS&#39;: {&#xA;            &#39;context_processors&#39;: [&#xA;                &#39;django.template.context_processors.debug&#39;,&#xA;                &#39;django.template.context_processors.request&#39;,&#xA;                &#39;django.contrib.auth.context_processors.auth&#39;,&#xA;                &#39;django.contrib.messages.context_processors.messages&#39;,&#xA;            ],&#xA;        },&#xA;    },&#xA;]&#xA;&#xA;STATIC_URL = &#39;static/&#39;&#xA;STATICFILES_DIRS = [str(BASE_DIR/ &#34;static&#34;)]&#xA;STATIC_ROOT = BASE_DIR / &#34;staticfiles&#34;&#xA;```&#xA;&#xA;### Initial migration&#xA;&#xA;Run migration command for the user model and default model in the django project.&#xA;&#xA;```&#xA;python manage.py makemigrations&#xA;python manage.py migrate&#xA;```&#xA;&#xA;So, this project will also include authentication simple registration, and login/logout routes. We will be using the default Django User model by creating an abstract user just in case we require any additional attributes. &#xA;&#xA;## Setup HTMX&#xA;&#xA;We don&#39;t have to configure much for using HTMX as it is a javascript library, we can call it via a CDN or manually install it and link up the static javascript files. Either way, both are equally good, you may like the one I might like the other. &#xA;&#xA;If you already have a base template, you can simply put the below script inside the head tag of the template. This will make us the htmx attributes available.&#xA;&#xA;```html&#xA;&lt;script src=&#34;https://unpkg.com/htmx.org@1.8.0&#34;&gt;&lt;/script&gt;&#xA;```&#xA;&#xA;If you don&#39;t have a base template, you can create one by creating an HTML file inside the `templates` directory. The name can be anything but be careful for following up as it might be different for me. I will choose `base.html` as the template for this project. It will look something like as follows:&#xA;&#xA;```html&#xA;&lt;!-- tempaltes/base.html --&gt;&#xA;&#xA;&lt;!DOCTYPE html&gt;&#xA;&lt;html lang=&#34;en&#34;&gt;&#xA;&lt;head&gt;&#xA;    &lt;meta charset=&#34;UTF-8&#34;&gt;&#xA;    &lt;title&gt;HTMX Blog&lt;/title&gt;&#xA;    {% load static %}&#xA;    &lt;link rel=&#34;stylesheet&#34; href=&#34;https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css&#34; integrity=&#34;sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm&#34; crossorigin=&#34;anonymous&#34;&gt;&#xA;    &lt;script src=&#34;https://unpkg.com/htmx.org@1.8.0&#34;&gt;&lt;/script&gt;&#xA;&lt;/head&gt;&#xA;&lt;body &gt;&#xA;        &lt;nav&gt;&#xA;        &lt;h2&gt;HTMX Blog&lt;/h2&gt;&#xA;        &lt;div class=&#34;navbar&#34;&gt;&#xA;          {% if user.is_authenticated %}&#xA;            &lt;a class=&#34;nav-item nav-link&#34; href=&#34;{% url &#39;logout&#39; %}&#34;&gt;&lt;button class=&#34;btn btn-link&#34;&gt;Logout&lt;/button&gt;&lt;/a&gt;&#xA;          {% else %}&#xA;            &lt;a class=&#34;nav-item nav-link&#34; href=&#34;{% url &#39;login&#39; %}&#34;&gt;&lt;button class=&#34;btn btn-link&#34;&gt;Login&lt;/button&gt;&lt;/a&gt;&#xA;            &lt;a class=&#34;nav-item nav-link&#34; href=&#34;{% url &#39;register&#39; %}&#34;&gt;&lt;button class=&#34;btn btn-link&#34;&gt;Register&lt;/button&gt;&lt;/a&gt;&#xA;          {% endif %}&#xA;        &lt;/div&gt;&#xA;        &lt;/nav&gt;&#xA;&#xA;    {% block body %}&#xA;    {% endblock %}&#xA;&lt;/body&gt;&#xA;&lt;/html&gt;&#xA;```&#xA;&#xA;I have a nav bar with my user authentication views, simply a login or signup button if the user is not logged in and a log-out button if the user is authenticated. We have added the htmx script file from the CDN just before the end of the head tag. We also have included the bootstrap CSS file for a decent UI which we will be creating in this post.&#xA;&#xA;That is one of the ways, htmx can be injected into an HTML template, you can even download the javascript file from the [htmx cdn](https://unpkg.com/browse/htmx.org/dist/). Further, this can be downloaded or pasted into your local folder and served as a static file or embedded directly into an HTML template.&#xA;&#xA;## Defining Models&#xA;&#xA;We will start the tutorial by defining the model of the application we are creating. Here, we will create a simple Article model with a few parameters like `title`, `content`, `author`, etc. &#xA;&#xA;```python&#xA;from django.db import models&#xA;from user.models import Profile&#xA;&#xA;class Article(models.Model):&#xA;    Article_Status = (&#xA;        (&#34;DRAFT&#34;, &#34;Draft&#34;),&#xA;        (&#34;PUBLISHED&#34;, &#34;Published&#34;),&#xA;    )&#xA;    title = models.CharField(max_length=128, unique=True)&#xA;    content = models.TextField()&#xA;    author = models.ForeignKey(Profile, on_delete=models.CASCADE)&#xA;    status = models.CharField(&#xA;        max_length=16,&#xA;        choices=Article_Status,&#xA;        default=Article_Status[0],&#xA;    )&#xA;&#xA;    def __str__(self):&#xA;        return self.title&#xA;```&#xA;&#xA;In the above model `Article`, we have a few fields like `title` simple Character Field, `content` as a text field as it will be a large text as the post body, `author` which is a ForeignKey to the User Model. We also have the status, which is defined as a character field but with a few choices like `draft` or `published`, we can further modify this status as public or private. But just keeping it simple and easy to understand.&#xA;&#xA;The object reference name for this model is the title as we have defined in the dunder string method. So, that is a simple model created, we can now migrate the changes into the database for adding the tables and attributes.&#xA;&#xA;```&#xA;python manage.py makemigrations&#xA;python manage.py migrate&#xA;```&#xA;&#xA;This will make migrations to the database i.e. convert the python model class into database tables and attributes. So, once the migration process is completed successfully, we can move into the crust of this article which is to actually design the views. In the next section, we will be utilizing the models in our views for representing the data on the templates.&#xA;&#xA;&#xA;## Creating Article Form&#xA;&#xA;Before diving into the views section, we need a few things like the Article Form, which will be a Django Model-based form. It will help us a lot in creating or updating the fields for the article model. We can define a form in a python file called `forms.py`, it&#39;s not necessary to keep your forms in the `forms.py` but if you have a lot of forms and models, it becomes a good practice to organize the components of our app. So, I&#39;ll be creating a new file inside of the `article` app called `forms.py` and defining the `ArticleForm`.&#xA;&#xA;```python&#xA;# article/forms.py&#xA;&#xA;from django import forms&#xA;from .models import Article&#xA;&#xA;&#xA;class ArticleForm(forms.ModelForm):&#xA;    class Meta:&#xA;        model = Article&#xA;        exclude = (&#xA;            &#34;created&#34;,&#xA;            &#34;updated&#34;,&#xA;            &#34;author&#34;,&#xA;        )&#xA;        widgets = {&#xA;            &#34;title&#34;: forms.TextInput(&#xA;                attrs={&#xA;                    &#34;class&#34;: &#34;form-control&#34;,&#xA;                    &#34;style&#34;: &#34;max-width: 450px; align: center;&#34;,&#xA;                    &#34;placeholder&#34;: &#34;Title&#34;,&#xA;                }&#xA;            ),&#xA;            &#34;content&#34;: forms.Textarea(&#xA;                attrs={&#xA;                    &#34;class&#34;: &#34;form-control&#34;,&#xA;                    &#34;style&#34;: &#34;max-width: 900px;&#34;,&#xA;                    &#34;placeholder&#34;: &#34;Content&#34;,&#xA;                }&#xA;            ),&#xA;        }&#xA;```&#xA;&#xA;So, the forms are inherited from the [ModelForm] which allows us to create forms based on our model. So, we specify the model name which in our case is `Article` and further we can have `exclude` or `fields` tuples. To exclude certain fields in the actual form, just parse the tuple of those attributes and if you want to only select a few attributes, you can specify the `fields` tuple and mention the required fields for the form.&#xA;&#xA;So, if we have a lot of things to be included in the form, we can specify only the attributes to be excluded with the `exclude` tuple. And if we have a lot of fields to be excluded, we can use the `fields` tuple to specify which attributes to use in the form.&#xA;&#xA;Let&#39;s take an example: For the above ArticleForm, if we wanted to specify the required fields to be included in the form, then we might use the `fields` tuple like below the rest will be not rendered in the form fields.&#xA;&#xA;```&#xA;class ArticleForm(forms.ModelForm):&#xA;    class Meta:&#xA;        model = Article&#xA;        fields = (&#xA;            &#34;title&#34;,&#xA;            &#34;content&#34;,&#xA;            &#34;status&#34;,&#xA;        )&#xA;```&#xA;&#xA;Both of them can be used, it just depends on how many fields you have to exclude or include in the rendered form.&#xA;&#xA;We have also specified the `widgets` attribute which gives a bit more control on how we need to display the form in a template. So I have specified the type of input it needs to render like a simple text input for the title, text area for content, etc. The cool thing about this is it can automatically set these by knowing the type of field in the model, but sometimes it can be a bit undesired mostly with complex relationships and attributes.&#xA;&#xA;## Creating Views&#xA;&#xA;Let&#39;s start creating views for creating, reading, updating, and deleting articles from the database. I will be using function-based views just because we are understanding the flow of how HTMX and Django can be integrated so we need to dive in deeper and understand the actual flow of the process.&#xA;&#xA;### Create View&#xA;&#xA;So, creating articles seems like a good way to start off. We can create a simple function-based view which will initially load in an empty `ArticleForm` and if the request is `GET` we will render the form in the `create.html` template. If the request is `POST` which will be after we submit the form, we will validate the form and attach the current user as the author of the article and save the for instance which will create an article record and this object will be rendered to the detail template.&#xA;&#xA;```python&#xA;from django.shortcuts import render&#xA;from .models import Article&#xA;from .forms import ArticleForm&#xA;&#xA;def createArticle(request):&#xA;    form = ArticleForm()&#xA;    context = {&#xA;        &#39;form&#39;: form,&#xA;    }&#xA;    return render(request, &#39;articles/create.html&#39;, context)&#xA;```&#xA;&#xA;#### Rendering the Form&#xA;&#xA;We are creating an empty instance of `ArticleForm` and rendering it in the template. So, this will render the empty form in the `create.html` template.&#xA;&#xA;```html&#xA;&lt;!-- templates/articles/create.html --&gt;&#xA;&#xA;{% extends &#39;base.html&#39; %}&#xA;&#xA;{% block body %}&#xA;&lt;div hx-target=&#34;this&#34; hx-swap=&#34;outerHTML&#34;&gt;&#xA;  &lt;form&gt;&#xA;    {% csrf_token %}&#xA;    {{ form.as_p }}&#xA;    &lt;button hx-post=&#34;.&#34; class=&#34;btn btn-success&#34;&#xA;      type=&#34;submit&#34;&gt;Save&lt;/button&gt;&#xA;  &lt;/form&gt;&#xA;&lt;/div&gt;&#xA;{% endblock %}&#xA;```&#xA;&#xA;Now, here we are inheriting from the base template and creating a form tag in HTML with the `{{ form}}` for rendering the form fields, we finally have the `button` element for submitting the form. We have used the `hx-post` attribute. More on this in just a minute. So, this is we create a template for rendering the article form.&#xA;&#xA;We have used the `hx-post` attribute here, which will send a `POST` request to the current `URL` represented by `hx-post=&#34;.&#34;`. You might have noticed the `div` attributes, the `hx-target` and `hx-swap`, so these are some of the many attributes provided by the htmx library for controlling the reactivity of the requests made. The `hx-target` allow us to specify the element or tag to which the data will be rendered. The `hx-swap` goes hand-in-hand for specifying the target DOM like `innerHTML`, `outerHTML`, etc. You can see the various options on the [htmx docs](https://htmx.org/docs/#swapping). By specifying the `hx-swap` as  `outerHTML`, we are saying to replace the entire element with the incoming content from the request which we will send with nearby request triggers.&#xA;&#xA;We need to map the view to a URL in order to get a good idea about the request and parsed content.&#xA;&#xA;We&#39;ll create a `create/` route and bind it to the `createArticle` view with the name `article-create`.&#xA;&#xA;```python&#xA;# article/urls.py&#xA;&#xA;from django.urls import path&#xA;from . import views&#xA;&#xA;urlpatterns = [&#xA;    path(&#39;create/&#39;, views.createArticle, name=&#39;article-create&#39;), &#xA;]&#xA;```&#xA;&#xA;This URL will be mapped to the global URL in the project, here we can simply specify the prefix for the URLs in the `article` app and include those URLs.&#xA;&#xA;```python&#xA;# htmx_blog/urls.py&#xA;&#xA;from django.contrib import admin&#xA;from django.urls import path, include&#xA;&#xA;urlpatterns = [&#xA;    path(&#39;admin/&#39;, admin.site.urls),&#xA;    path(&#39;user/&#39;, include(&#39;user.urls&#39;), name=&#39;auth&#39;),&#xA;    path(&#39;&#39;, include(&#39;article.urls&#39;), name=&#39;home&#39;),&#xA;]&#xA;```&#xA;Feel, free to add any other URL pattern like for instance, the article app is at `/` i.e. `127.0.01.:8000/`, you can add any other name like `127.0.0.1:8000/article/` by adding `path(&#39;article/&#39;, include(&#39;article.urls&#39;))`.&#xA;&#xA;![Django HTMX Create view Form Template](https://res.cloudinary.com/techstructive-blog/image/upload/v1659252089/blog-media/django-htmx-create-view.png)&#xA;&#xA;So, finally, we are sending a `GET` request to the `127.0.0.1:8000/create/` and this will output the form. As we have a `POST` request embedded in the button inside the form, we will send the `POST` request to the same URL -&gt; `127.0.0.1:8000/create/`.&#xA;&#xA;#### Submitting the Form&#xA;&#xA;Let&#39;s handle the `POST` request in the create view.&#xA;&#xA;```python&#xA;from django.shortcuts import render&#xA;from .models import Article&#xA;from .forms import ArticleForm&#xA;&#xA;def createArticle(request):&#xA;    form = ArticleForm(request.POST or None)&#xA;    if request.method == &#39;POST&#39;:&#xA;        if form.is_valid():&#xA;            form.instance.author = request.user&#xA;            article = form.save()&#xA;            return render(request, &#39;articles/detail.html&#39;, {&#39;article&#39;: article})&#xA;    context = {&#xA;        &#39;form&#39;: form,&#xA;    }&#xA;    return render(request, &#39;articles/create.html&#39;, context)&#xA;```&#xA;&#xA;**Simple explanation**&#xA;&#xA;- Create a form instance of ArticleForm with the request data or empty -&gt; `ArticleForm(request.POST or None)`&#xA;- If it&#39;s a POST request, validate and create the article, render the article object in `detail.html` template.&#xA;- If it&#39;s a GET request, render the empty form in `create.html`&#xA;&#xA;&#xA;There are a few changes in the view, instead of initializing the form to empty i.e. `ArticleForm()`, we are initializing with `ArticleForm(request.POST or None)`. This basically means that if we are having something in the `request.POST` dict, we will initialize the Form with that data or else an empty form instance.&#xA;&#xA;Next, we check if the request if `POST`, if it is then we check if the form is valid i.e. the form fields are not empty or if any other constraint on the model attributes is satisfied or not. If the form data is valid, we attach the author as the currently logged-in User/user who sent the request. Finally, we save the form which in turn creates the article record in the database. We then render the created article in the `detail.html` template which is not yet created.&#xA;&#xA;So, the `htmx-post` attribute has worked and it will send a post request to the same URL i.e. `127.0.0.1:8000/create` and this will again trigger the view `createArticle` this time we will have `request.POST` data. So, we will validate and save the form.&#xA;&#xA;### Detail View&#xA;&#xA;The detail view is used for viewing the details of an article. This will be rendered after the article has been created or updated. This is quite simple, we need an `id` or `primary key(pk)` of an article and render the `title` and `content` of the article in the template.&#xA;&#xA;We pass in a primary key along with the request as a parameter to the view, the `pk` will be passed via the URL. We fetch the Article object with the id as the parsed `pk` and finally render the `detail.html` template with the article object. The `context[&#39;article&#39;]` can be accessed from the template to render the specific attributes like `title`, `content`, etc.&#xA;&#xA;```python&#xA;# article/views.py&#xA;&#xA;def detailArticle(request, pk):&#xA;    article = Article.objects.get(id=pk)&#xA;    context = {&#39;article&#39;: article}&#xA;    return render(request, &#39;articles/detail.html&#39;, context)&#xA;&#xA;```&#xA;&#xA;We can now bind the view to a URL and parse the required parameter `pk` to the view. &#xA;&#xA;```python&#xA;from django.urls import path&#xA;from . import views&#xA;&#xA;urlpatterns = [&#xA;    path(&#39;create/&#39;, views.createArticle, name=&#39;article-create&#39;), &#xA;    path(&#39;&lt;int:pk&gt;&#39;, views.detailArticle, name=&#39;article-detail&#39;), &#xA;]&#xA;```&#xA;&#xA;We have parsed the `pk` as `int` to the URL parameter, so for an article with id=4, the URL will be, `127.0.0.1:8000/4/`.&#xA;&#xA;We need to create the template for rendering the context from the `detailArticle` view. So, we create the `detail.html` in the `templates/articles` folder. We inherit the base template and render the `article.title` and the `article.content` with a linebreaks template filter so as to display the content properly.&#xA;&#xA;```html&#xA;&lt;!-- templates/articles/detail.html --&gt;&#xA;&#xA;&#xA;{% extends &#39;base.html&#39; %}&#xA;{% block body %}&#xA;&lt;div id=&#34;article-card&#34;&gt;&#xA;  &lt;h2&gt;{{ article.title }}&#xA;  &lt;p&gt;{{ article.content|linebreaks|safe }}&lt;/p&gt;&#xA;&lt;div&gt;&#xA;{% endblock %}&#xA;&#xA;```&#xA;&#xA;![Detail View Template](https://res.cloudinary.com/techstructive-blog/image/upload/v1659252227/blog-media/django-htmx-detail-view.png)&#xA;&#xA;So, we can now use `createArticle` view as well as `detailArticle` view, this both are configured properly, so (CR) or CRUD is completed. We can add `listArticle` for listing out all the author&#39;s(logged-in user) articles.&#xA;&#xA;### List View&#xA;&#xA;Listview of the articles is much similar to the detail view as it will return a list of articles rather than a single article.&#xA;&#xA;So in the `listArticle` view, we will return all the articles with the author as the user who sent the request/logged-in user. We will parse this object list into the template as `base.html` or `articles/list.html`.&#xA;&#xA;```python&#xA;# article/views.py&#xA;&#xA;&#xA;def listArticle(request):&#xA;    articles = Article.objects.filter(author=request.user.id)&#xA;    context = {&#xA;        &#39;articles&#39;: articles,&#xA;    }&#xA;    return render(request, &#39;base.html&#39;, context)&#xA;```&#xA;&#xA;We will add the URL route for this as the `/` route that is on `127.0.0.1:8000/` this is the base URL for the article app and is the route for the `listArticle` view. So, we will display the list of articles on the homepage.&#xA;&#xA;```python&#xA;# article/urls.py&#xA;&#xA;&#xA;from django.urls import path&#xA;from . import views&#xA;&#xA;urlpatterns = [&#xA;    path(&#39;&lt;int:pk&gt;&#39;, views.detailArticle, name=&#39;article-detail&#39;), &#xA;    path(&#39;create/&#39;, views.createArticle, name=&#39;article-create&#39;), &#xA;    path(&#39;&#39;, views.listArticle, name=&#39;article-list&#39;), &#xA;]&#xA;```&#xA;&#xA;Let&#39;s create the template for the list view which will iterate over the articles and display the relevant data like the title and link to the article.&#xA;&#xA;```html&#xA;&lt;!-- templates/articles/list.html --&gt;&#xA;&#xA;&lt;ul id=&#34;article-list&#34;&gt;&#xA;  {% for article in articles %}&#xA;  &lt;li&gt;&#xA;    &lt;div class=&#34;card&#34; style=&#34;width: 18rem;&#34;&gt;&#xA;      &lt;div class=&#34;card-body&#34;&gt;&#xA;        &lt;h5 class=&#34;card-title&#34;&gt;{{ article.title }}&lt;/h5&gt;&#xA;        &lt;p class=&#34;card-text&#34;&gt;{{ article.content|truncatewords:5  }}&lt;/p&gt;&#xA;        &lt;a href=&#34;{% url &#39;article-detail&#39; article.id %}&#34; class=&#34;card-link&#34;&gt;Read more&lt;/a&gt;&#xA;      &lt;/div&gt;&#xA;    &lt;/div&gt;&#xA;  &lt;/li&gt;&#xA;  {% endfor %}&#xA;&lt;/ul&gt;&#xA;```&#xA;&#xA;We have used the `truncatewords:5` template filter for only displaying the content of the articles till the first 5 words as it is just a list view, we don&#39;t want to display every detail of the article here.&#xA;&#xA;![List view Template](https://res.cloudinary.com/techstructive-blog/image/upload/v1659252293/blog-media/django-htmx-list-view.png)&#xA;&#xA;We can use this template to render in the `base.html` file.&#xA;&#xA;```html&#xA;&lt;!DOCTYPE html&gt;&#xA;&lt;html lang=&#34;en&#34;&gt;&#xA;&lt;head&gt;&#xA;    &lt;meta charset=&#34;UTF-8&#34;&gt;&#xA;    &lt;title&gt;HTMX Blog&lt;/title&gt;&#xA;    {% load static %}&#xA;    &lt;link rel=&#34;stylesheet&#34; href=&#34;https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css&#34; integrity=&#34;sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm&#34; crossorigin=&#34;anonymous&#34;&gt;&#xA;    &lt;script src=&#34;https://unpkg.com/htmx.org@1.8.0&#34;&gt;&lt;/script&gt;&#xA;&lt;/head&gt;&#xA;&lt;body hx-target=&#34;this&#34; hx-swap=&#34;outerHTML&#34; hx-headers=&#39;{&#34;X-CSRFToken&#34;: &#34;{{ csrf_token }}&#34;}&#39;&gt;&#xA;        &lt;nav&gt;&#xA;        &lt;h2&gt;HTMX Blog&lt;/h2&gt;&#xA;        &lt;div class=&#34;navbar&#34;&gt;&#xA;          {% if user.is_authenticated %}&#xA;            &lt;a class=&#34;nav-item nav-link&#34; href=&#34;{% url &#39;article-list&#39; %}&#34;&gt;&lt;button class=&#34;btn btn-link&#34;&gt;Home&lt;/button&gt;&lt;/a&gt;&#xA;            &lt;a class=&#34;nav-item nav-link&#34; href=&#34;{% url &#39;logout&#39; %}&#34;&gt;&lt;button class=&#34;btn btn-link&#34;&gt;Logout&lt;/button&gt;&lt;/a&gt;&#xA;          {% else %}&#xA;            &lt;a class=&#34;nav-item nav-link&#34; href=&#34;{% url &#39;login&#39; %}&#34;&gt;&lt;button class=&#34;btn btn-link&#34;&gt;Login&lt;/button&gt;&lt;/a&gt;&#xA;            &lt;a class=&#34;nav-item nav-link&#34; href=&#34;{% url &#39;register&#39; %}&#34;&gt;&lt;button class=&#34;btn btn-link&#34;&gt;Register&lt;/button&gt;&lt;/a&gt;&#xA;          {% endif %}&#xA;        &lt;/div&gt;&#xA;        &lt;/nav&gt;&#xA;&#xA;    {% block body %}&#xA;    &lt;a href=&#34;{% url &#39;article-create&#39; %}&#34;&gt;&lt;button class=&#34;btn btn-success&#34; &gt;Create&lt;/button&gt;&lt;/a&gt;&#xA;    {% include &#39;articles/list.html&#39; %}&#xA;    {% endblock %}&#xA;&lt;/body&gt;&#xA;&lt;/html&gt;&#xA;```&#xA;&#xA;We have now included the `list.html` template on the homepage and also added the `create` button as the link to the `article-create` URL.&#xA;&#xA;### Delete View&#xA;&#xA;For deleting an article, we will simply rely on htmx for sending the request and on that request, we will delete the current article and render the updated list of articles.&#xA;&#xA;With the `deleteArticle` view, we will take in two parameters the request which is by default for a Django function-based view, and the primary key as `pk`. Again we will parse the `pk` from the URL. We will delete the article object and get the latest list of articles. Finally, render the updated list of articles in the base template which is our list view.&#xA;&#xA;```python&#xA;# article/views.py&#xA;&#xA;&#xA;def deleteArticle(request, pk):&#xA;    Article.objects.get(id=pk).delete()&#xA;    articles = Article.objects.filter(author=request.user)&#xA;    context = {&#39;article&#39;: articles}&#xA;    return render(request, &#34;base.html&#34;, context)&#xA;&#xA;```&#xA;&#xA;We will add the `deleteArticle` into the URL patterns and call it `article-delete` with the URL of `delete/&lt;int:pk&gt;`. This will allow us to send a request to the URL `127.0.0.1:8000/delete/4` for deleting the article with id `4`.&#xA;&#xA;```python&#xA;# article/urls.py&#xA;&#xA;&#xA;from django.urls import path&#xA;from . import views&#xA;&#xA;urlpatterns = [&#xA;    path(&#39;&#39;, views.listArticle, name=&#39;article-list&#39;), &#xA;    path(&#39;&lt;int:pk&gt;&#39;, views.detailArticle, name=&#39;article-detail&#39;), &#xA;    path(&#39;create/&#39;, views.createArticle, name=&#39;article-create&#39;), &#xA;    path(&#39;delete/&lt;int:pk&gt;&#39;, views.deleteArticle, name=&#39;article-delete&#39;), &#xA;]&#xA;```&#xA;&#xA;In the delete view, the template is important as we want to send a request appropriately to the defined URL. To do that, we will have a form but it won&#39;t have any inputs as such just a button that indicates to delete the current article. We will add the `hx-delete` attribute as the URL to the `deleteArticle` view. with the id of the article. This will send a request to the `article-delete` URL which will, in turn, trigger the view with the given id and delete the article.&#xA;&#xA;We have added the `hx-confirm` attribute for showing a pop-up of confirmation of deleting the article. As you can see we have added a little script for adding `csrf_token` into the HTML, this is important in order to submit a form with a valid `CSRFToken`.&#xA;&#xA;```html&#xA;&lt;!-- templates/article/delete.html --&gt;&#xA;&#xA;&lt;script&gt;&#xA;  document.body.addEventListener(&#39;htmx:configRequest&#39;, (event) =&gt; {&#xA;    event.detail.headers[&#39;X-CSRFToken&#39;] = &#39;{{ csrf_token }}&#39;;&#xA;  })&#xA;&lt;/script&gt;&#xA;&lt;div &gt;&#xA;  &lt;form method=&#34;post&#34; &gt;&#xA;  {% csrf_token %}&#xA;    &lt;button class=&#34;btn btn-danger&#34;&#xA;      hx-delete=&#34;{% url &#39;article-delete&#39; article.id %}&#34;&#xA;      hx-confirm=&#34;Are you sure, You want to delete this article?&#34;&#xA;      type=&#34;submit&#34;&gt;&#xA;      Delete&#xA;    &lt;/button&gt;&#xA;  &lt;/form&gt;&#xA;&lt;/div&gt;&#xA;```&#xA;&#xA;Do you have a question like how do we access the `article.id`? we are not rendering the `delete.html` template from the view, so there is no context to pass. We will include this snippet into the detail view template, so as to have the option of deleting the current article.&#xA;&#xA;We will modify the `articles/detail.html` template and include the `delete.html` template. This includes simply adding an HTML template in the specified location. So, we will basically inject the delete form into the detail template.&#xA;&#xA;```html&#xA;{% extends &#39;base.html&#39; %}&#xA;{% block body %}&#xA;&lt;div hx-target=&#34;this&#34; hx-swap=&#34;outerHTML&#34;&gt;&#xA;  &lt;h2&gt;{{ article.title }}&#xA;  {% include &#39;articles/delete.html&#39; %}&#xA;  &lt;p&gt;{{ article.content|linebreaks|safe }}&lt;/p&gt;&#xA;&lt;div&gt;&#xA;{% endblock %}&#xA;```&#xA;&#xA;Hence, we will have a nice option to delete the article in the detail section, this can be placed anywhere but remember, we need to add the `hx-target=&#34;this&#34;` and `hx-swap=&#34;outerHTML&#34;` in the div so as to correctly swap the HTML content after the request has been made.&#xA;&#xA;### Update View&#xA;&#xA;We can now move into the final piece of the CRUD i.e. `Update`. This will be similar to the `createArticle` with a couple of changes. We will parse parameters like `pk` to this view as well because we want to update a specific article. So, we will have to get the primary key of the article from the URL slug.&#xA;&#xA;Inside the `updateArticle` view, we will first grab the article object from the parsed primary key. We will have two kinds of requests here, one will be for fetching the `form` with the current article data, and the next request will be the `PUT` request for actually saving the changes in the article.&#xA;&#xA;The first request is simple as we need to parse the form data with the instance of the article object. We will call the `ArticleForm` with the instance of `article` this will load the data of the article into the form ready to render into the template. So once the `GET` request has been sent, we will render the template with the form pre-filled with the values of the article attributes.&#xA; &#xA; ```python&#xA;# article/views.py&#xA;&#xA;&#xA;def updateArticle(request, pk):&#xA;    article = Article.objects.get(id=pk)&#xA;    form = ArticleForm(instance=article)&#xA;    context = {&#xA;        &#39;form&#39;: form,&#xA;        &#39;article&#39;: article,&#xA;    }&#xA;    return render(request, &#39;articles/update.html&#39;, context)&#xA;```&#xA;&#xA;We will create a template in the `templates/articles/` folder as  `update.html` which will have a simple form for rendering the form fields and a button for sending a `PUT` request. We will render the `form` and then add a button element with the attribute `hx-put` for sending the `PUT` request to save changes to the article record. We will parse in the `article.id` for the primary key parameter to the view.&#xA;&#xA;```html&#xA;&lt;!-- templates/articles/update.html --&gt;&#xA;&#xA;&lt;div hx-target=&#34;this&#34; hx-swap=&#34;outerHTML&#34;&gt;&#xA;  &lt;form&gt;&#xA;    {% csrf_token %}&#xA;    {{ form.as_p }}&#xA;    &lt;button hx-put=&#34;{% url &#39;article-update&#39; article.id %}&#34;&#xA;      type=&#34;submit&#34;&gt;Update&lt;/button&gt;&#xA;  &lt;/form&gt;&#xA;&lt;/div&gt;&#xA;```&#xA;&#xA;We are yet to link the `updateArticle` into the URLs. We will add the view `updateArticle` into the URLs with the name as `article-update` and `update/&lt;int:pk` as the slug pattern. This URL pattern will trigger the `updateArticle` when we send an HTTP request to the `127.0.0.1:8000/update/4` for updating the article with id as `4`.&#xA;&#xA;```python&#xA;# article/urls.py&#xA;&#xA;&#xA;from django.urls import path&#xA;from . import views&#xA;&#xA;urlpatterns = [&#xA;    path(&#39;&#39;, views.listArticle, name=&#39;article-list&#39;), &#xA;    path(&#39;&lt;int:pk&gt;&#39;, views.detailArticle, name=&#39;article-detail&#39;), &#xA;    path(&#39;create/&#39;, views.createArticle, name=&#39;article-create&#39;), &#xA;    path(&#39;delete/&lt;int:pk&gt;&#39;, views.deleteArticle, name=&#39;article-delete&#39;), &#xA;    path(&#39;update/&lt;int:pk&gt;&#39;, views.updateArticle, name=&#39;article-update&#39;), &#xA;]&#xA;```&#xA;&#xA;This is not done yet, we will need to handle the `PUT` request as well i.e. when the form details have been modified and we are about to save changes to the form data. So, we will check for the request method&#39;s type. If it is a `PUT` request, we will have to process a few things.&#xA;&#xA;```python&#xA;# article/views.py&#xA;&#xA;&#xA;from django.http import QueryDict&#xA;&#xA;def updateArticle(request, pk):&#xA;    article = Article.objects.get(id=pk)&#xA;    if request.method == &#39;PUT&#39;:&#xA;        qd = QueryDict(request.body)&#xA;        form = ArticleForm(instance=article, data=qd)&#xA;        if form.is_valid():&#xA;            article = form.save()&#xA;            return render(request, &#39;articles/detail.html&#39;, {&#39;article&#39;: article})&#xA;    form = ArticleForm(instance=article)&#xA;    context = {&#xA;        &#39;form&#39;: form,&#xA;        &#39;article&#39;: article,&#xA;    }&#xA;    return render(request, &#39;articles/update.html&#39;, context)&#xA;```&#xA;&#xA;In the above `updateArticle` view, we have to check for a `PUT` request, if we are sending a `PUT` request, the form instance needs to be loaded from the request object. We use the `request.body` to access the data sent in the request. The incoming data received from the `request.body` object is not a valid format to parse it to the form instance, so we will parse it using `QueryDict`. This will allow us to modify the `request.body` object into valid python serializable data.&#xA;&#xA;So, we import the `QueryDict` from `django.http` module. We parse the data as the parameter to `QueryDict` and store it in a variable. We then have to get the `ArticleForm` for fetching the data as per the form details, so we parse the instance and also the `data` parameter. The instance is the article object and the data is the received form data which we have stored in `qd` as `QueryDict(request.body)`. This will load the new form data and then we can validate it the form.&#xA;&#xA;After we have verified the form details, we can save the form and this will update the article record. Thereby we can render the updated article in the `detail` view with the updated `article` object as the context.&#xA;&#xA;![Update View Form Template](https://res.cloudinary.com/techstructive-blog/image/upload/v1659252091/blog-media/django-htmx-update-view.png)&#xA;&#xA;So, this will set up the update view as well, we can now create, read, update, and delete an article instance with HTMX in templates and Django function-based views without writing any javascript.&#xA;&#xA;## Summary&#xA;&#xA;We were able to create a basic CRUD application in Django with HTMX. We used simple function-based views to demonstrate the inner details of how we can work with HTMX and handle requests from the templates. By creating simple standalone templates, we can connect those together to make a fully functional and responsive webpage. The UI is not great but the purpose of this tutorial was to make a barebone CRUD app to work with the backend using HTMX, so hopefully, you would have got a good overview of how HTMX can be integrated into a Django application.&#xA;&#xA;Overall HTMX is a great library that can be used to enhance or even create a new web application for making the site responsive and without writing any javascript.&#xA;&#xA;![Django HTMX CRUD Application Demo GIF](https://res.cloudinary.com/techstructive-blog/image/upload/v1659252296/blog-media/django-htmx-demo.gif)&#xA;&#xA;You can check out the source code for this project and blog on the [htmx-blog GitHub](https://github.com/Mr-Destructive/htmx-blog-django) repository.&#xA;&#xA;## Conclusion&#xA;&#xA;From this post, we were able to understand the basics of HTMX and how we can integrate it into a Django application. Hopefully, you enjoyed the post, if you have any queries or feedback, please let me know in the comments or on my social handles. Thank you for reading. Happy Coding :)&#xA;</content>
      <type>posts</type>
    </item>
    <item>
      <title>Deploying Django Project with Railway Nixpacks</title>
      <link>meetgor.com/django-deploy-railway-nixpacks</link>
      <description>Configuring and Seting up nixpacks for deploying django project on Railway app. Interacting with the nixpacks CLI for building and creating deployable django applications.</description>
      <pubDate>Sat, 16 Jul 2022 00:00:00 UTC</pubDate>
      <content>&#xA;## Introduction&#xA;&#xA;We have seen how to deploy a Django application on railway app in the [previous article](https://www.meetgor.com/django-deploy-railway/) of the [series](https://www.meetgor.com/series/django-deployment/). We deployed the django project using the Heroku Buildpacks under the hood. The railway app provides a couple of options on how to build your web application. Currently, there are three options, one of which is the [heroku buildpacks](https://devcenter.heroku.com/articles/heroku-20-stack) which is the default one, second, we have the nixpacks which we will see today, and the third is the [Paketo buildpack](https://paketo.io/). &#xA;&#xA;## What is a Buildpack?&#xA;&#xA;A buildpack is a set of programs that turns your source code into a container image. So it is basically a tool for converting your application into a deployment-ready state with the help of containerization technology. Buildpacks allow us to extract away the steps for deploying an application. The layer of abstraction for converting a source code into a deployable code/container is played by the build packs.&#xA;&#xA;### Benefits of buildpacks&#xA;&#xA;Buildpacks as we discussed act as a layer of abstraction from converting source code into the deployable containers, so it helps in avoiding manually writing dependencies and installing them. But on top of that, they can even detect low-level changes to the source code, i.e. if a dependency is changed, it would know which dependencies are altered and which components can be fetched from the cache. Caching is a great property of buildpacks which enhances the performance and deployment time. Since we can specify the commands for the build process, the buildpacks are customizable and hence provide a solid foundation for professional applications.&#xA;&#xA;For more references on Buildpacks, you can follow up with the great article on [dockerfile vs buildpacks](https://technology.doximity.com/articles/buildpacks-vs-dockerfiles).&#xA;&#xA;## What are Nixpacks?&#xA;&#xA;[Nixpacks](https://nixpacks.com/docs) are quite similar to buildpacks, but they have their own set of technologies used in managing and installing builds for the application. Nixpacks as the name suggests uses [Nix Packages](https://search.nixos.org/packages) for creating and installing dependencies and [Docker](https://www.docker.com/) for building images and running containers.&#xA;&#xA;Nixpacks are quite cool as most of the applications require little or almost no configuration. You don&#39;t need a lot of knowledge of docker or nix technologies, everything is abstracted for you. Nixpacks uses nix packages for installing the runtime environment and the dependencies for the applications. It also caches support for detecting the core modules or packages in the runtime, so it gets a huge boost in deployment performance. Minimal deployment time, simultaneously makes it developer friendly and improves the quality of the application.&#xA;&#xA;- Abstracted technologies like Nix and Docker.&#xA;- Caching of dependencies and steps to build.&#xA;- Customizable at most of the steps.&#xA;- Extensible and Developer friendly.&#xA;&#xA;## Installing Nixpacks&#xA;&#xA;Nixpacks are the [nix packges](https://search.nixos.org/packages) which are used with the source code to create a buildpack of their own. The nix packages take in the source code of your application and convert it into a simple OCI image e.g. Docker image that can be run on various environments. It is similar to buildpacks but it&#39;s not the same instead it is better and uses a different ecosystem.&#xA;&#xA;Railway has a cool [CLI](https://nixpacks.com/docs/cli) tool for creating nixpacks on your local system. You can install the nixpack cli from the official documentation site. There are a couple of ways to install them on your system. &#xA;You can install the nixpack with the curl command in your terminal which is one of the simplest ways to install it.&#xA;&#xA;```&#xA;curl -fsSL https://raw.githubusercontent.com/railwayapp/nixpacks/master/install.sh | bash&#xA;```&#xA;&#xA;![Railway Nixpacks Install](https://res.cloudinary.com/techstructive-blog/image/upload/v1657725394/blog-media/railway-nixpacks-install.png)&#xA;&#xA;Once it has been installed we can check the status if nixpacks was successfully installed or not.&#xA;&#xA;```&#xA;nixpacks --version&#xA;&#xA;OR &#xA;&#xA;nixpacks&#xA;```&#xA;&#xA;So that&#39;s how we install nixpacks CLI into the system. Now, we can move into the configuration required for creating a nixpack from the Django application.&#xA;&#xA;## Creating a Django Project&#xA;&#xA;So, I assume here, you have your django project ready. You can pick any django project and configure it as mentioned below.&#xA;&#xA;### Creating requirements file&#xA;&#xA;It is a good practice to include the `requirements.txt` file in any python based applications. It becomes really easy to set up and give the project a spin. It&#39;s often the case, that we have to use a virtual environment for creating a pip file, otherwise, we might conflict and mix up the globally installed packages with project-specific dependencies.&#xA;&#xA;```&#xA;pip freeze &gt; requirements.txt&#xA;```&#xA;&#xA;This will create a `requirements.txt` file in the current folder, which will contain the list of all the dependencies with the version mentioned in. We also have other package management system like [pipenv](https://www.meetgor.com/pipenv-intro/) or [poetry](https://python-poetry.org/).&#xA;&#xA;&#xA;## Creating a Nixpack for the project&#xA;&#xA;Finally, we can now start creating nixpacks from the source code of the django application. So, make sure the Django project is running on your local system. Set up a virtualenv and database as per your local environment. We will be using the build command for creating the nixpack of our django project.&#xA;&#xA;```&#xA;nixpacks build .&#xA;```&#xA;&#xA;&lt;video width=&#34;800&#34; height=&#34;450&#34; controls&gt;&#xA;  &lt;source src=&#34;https://res.cloudinary.com/techstructive-blog/video/upload/v1657881139/blog-media/nixpacks-demo-base.mp4&#34; type=&#34;video/mp4&#34;&gt;&#xA;&lt;/video&gt;&#xA;&#xA;This is the simplest of commands you can run to create a nixpack. You need to be in the source file where all your files are located. In Django, we call it the `BASE_DIR`, the same folder where your `manage.py` resides. So, be on that path and run the above command. It would pick up a few things from the source code itself. There are also some default values picked up after analyzing the source code, for example in the case if it detects the django project, it attaches the `python manage.py migrate &amp;&amp; gunicorn &lt;project_name&gt;.wsgi` command as the default build command.&#xA;&#xA;Similarly, there are other default options like the version of the runtime, installation steps, etc. We can see that the port is not accessible from the docker container that we ran it is because of two reasons either we have not exposed the port or the port is not bound with gunicorn. We will see that configuration later, it&#39;s quite easy to bind the local port to the docker container.&#xA;&#xA;### Steps for creating Nixpacks&#xA;&#xA;Now, we need to understand the process of the creation of nixpacks. There were several stages that you can see in the above video. &#xA;&#xA;1. Planning &#xA;2. Building&#xA;&#xA;#### Planning Phase&#xA;&#xA;The first step was quite important, to understand the runtime environment. This is critical because it can decide how our application installs, runs, or even performs in the actual container environment. This is just the phase where we define the sets of commands or nix packages to be used for the building of the application.&#xA;&#xA;You would get a clear look in the nixpack cli, it gives a list of the planned instructions before the build process starts in the build command. You can get the plan before building the application by using the `plan` command in the CLI.&#xA;&#xA;```&#xA;nixpacks plan .&#xA;```&#xA;![Nixpacks Plan Command](https://res.cloudinary.com/techstructive-blog/image/upload/v1657960771/blog-media/nixpacks-plan-command.gif)&#xA;&#xA;![Nixpacks Plan Command Output](https://res.cloudinary.com/techstructive-blog/image/upload/v1657960816/blog-media/nixpacks-plan-cmd.png)&#xA;&#xA;So, this gives a `nix` output of all the configuration needed to build and install the application and it&#39;s dependencies. When you would have built the application i.e. the base build command, it also shows in the CLI, some useful information before moving to the build step.&#xA;&#xA;![Nixpacks Plan Steps in Build Command](https://res.cloudinary.com/techstructive-blog/image/upload/v1657960880/blog-media/nixpacks-build-plan.png)&#xA;&#xA;So the list of the following procedure is listed in the planning phase of building the application.&#xA;&#xA;- Packages/base runtime environment&#xA;- Installation commands&#xA;- Build commands&#xA;- Commands to Start Application &#xA;&#xA;In the case of django, the following correspond to the planning attributes.&#xA;&#xA;- Python version as the application runtime.&#xA;- Installing dependencies via pip/pipenv/poetry&#xA;- Building the Django app (collecting static files, setting database, etc)&#xA;- Running the Django app (gunicorn/Nginx web server to run the app)&#xA;&#xA;So, hopefully, this gives you a better understanding of what is going on in the nixpack CLI. We are trying to automate the process of deployment and building the application for repeated deployments i.e. in a continuous integration/delivery system.&#xA;&#xA;#### Building Phase&#xA;&#xA;This is the phase, where actual installation, setup, and configuration takes place at the application level. In the build phase, we have several layers where things happen like installing the core packages for the application, installing dependencies, setting/generating up the necessary steps for the proper running of the application, and finally steps to run the application. This process creates an OSI(a standard used in containers/virtualization technology) image of the application. We can run the image and thus create a container of the application. You will need docker or any other containerization tool for the building of images and running containers.&#xA;&#xA;![Django Build Command](https://res.cloudinary.com/techstructive-blog/image/upload/v1657961801/blog-media/nixpacks-build-command.gif)&#xA;&#xA;For the Django application, we have several steps of the application to be followed. We can use python as the base runtime environment, install the python packages, perform other commands like setting up admin accounts, static/media files, database setup, and finally run the steps to run the application at the container level.&#xA;&#xA;- Installing python as a [Nix Package](https://search.nixos.org/packages?channel=22.05&amp;show=python38&amp;from=0&amp;size=50&amp;sort=relevance&amp;type=packages&amp;query=python)&#xA;- Installing all python packages provided in the `requirements.txt`/`Pipfile`/`pyproject.toml` files.&#xA;- Call commands from the environment to set up the applications like `createsuperuser`, `collectstatic`, `makemigrations`, pull data, management commands, etc. There are a lot of things that can be done here depending on the application.&#xA;- Finally, the step to run the Django app, usually gunicorn/Nginx server is used for running the django application on a port with the host.&#xA;&#xA;So, this is what the build phase does, this is the whole and soul of the nixpacks. We literally do every installation setup and configuration of the application. Though the planning phase is equally important, a single missing data can ruin the build phase.&#xA;&#xA;&#xA;### Understanding the build phase for Django&#xA;&#xA;We ran the build command for creating the nixpack build, this started with planning the application configuration and then building up the application. This build phase was also divided into further processes like installing, running commands, copying actual source code to an image, and all the docker-related stuff that is required to create an image for a django application.&#xA;&#xA;![Django Application build nixpacks](https://res.cloudinary.com/techstructive-blog/image/upload/v1657961691/blog-media/nixpacks-build-process.png)&#xA;&#xA;So, we have used the Debian nixpack, which sets as the base runtime for the application. Railway provides a [package](https://github.com/railwayapp/nixpacks/pkgs/container/nixpacks) of the Debian image as the base runtime for our application. This is where we will run all the build processes on. This Debian image will be used for installing all types of dependencies and layers of language-specific runtime installation in the form of [nix packages](https://search.nixos.org/packages). &#xA;&#xA;Now, we have the base image of debian, the nixpack build command actually starts executing the `Dockerfile`, this is an auto-generated step after the planning phase. So, with the instructions in `Dockerfile`, steps are executed one after other just as a normal Docker image build. This will generate the image for the application and after a while, because this process takes a while on the first iteration locally, after the build process has been completed, it will give a container name for you to run. This can be used to test the application locally, in production, the container is instantly created after the image has been generated.&#xA;&#xA;```&#xA;RUN:&#xA;&#xA;docker run -it &lt;container_id_or_name&gt;&#xA;&#xA;```&#xA;&#xA;![Nixpacks build command run container](https://res.cloudinary.com/techstructive-blog/image/upload/v1657966274/blog-media/nixpacks-build-run.png)&#xA;&#xA;This is the command for running your application, this marks the end of the build process and also the build command provided with the CLI.&#xA;&#xA;### Build Command Parameters&#xA;&#xA;The build command in the nixpacks CLI provides a few parameters or arguments to customize how to output the result and build the application, you can definitely provide the configuration in the application source code itself, but it is nicer to have it locally before deploying the application.&#xA;&#xA;#### Give a name to the Nixpack Image/Container&#xA;&#xA;The first parameter which might be helpful is to provide a name to the application at the build time. This becomes useful for running the container, this helps in avoiding long container names and giving a context of the nixpack.&#xA;&#xA;```&#xA;nixpacks build . --name &lt;project_name&gt;&#xA;&#xA;OR &#xA;&#xA;nixpacks build . -n &lt;project_name&gt;&#xA;&#xA;```&#xA;&#xA;![Nixpacks Build Command Name Image](https://res.cloudinary.com/techstructive-blog/image/upload/v1657962253/blog-media/nixpacks-build-name.png)&#xA;&#xA;![Nixpacks Build Command name run](https://res.cloudinary.com/techstructive-blog/image/upload/v1657962328/blog-media/nixpacks-build-name-image-run.png)&#xA;&#xA;This gives a name to the image which has been built. Thereby providing a better context for the user to run the image and create a container out of it.&#xA;&#xA;#### Output the Built Image to a folder&#xA;&#xA;This is the command that can output the built application into a  provided folder. This parameter will not run the docker step thereafter; hence, no image is created if you provide an output folder. Though the folder will contain the `Dockerfile` and `environment.nix` files for creating the image and running the container. **Make sure the output folder is NOT in the application folder itself, it will result in errors.** The output command will not create an image but the process will be definitely executed in order to generate the `Dockerfile` and `environment.nix` files.&#xA;&#xA;```&#xA;nixpacks build . --out ../blog_image&#xA;&#xA;OR&#xA;&#xA;nixpacks build . -o ../blog_image&#xA;```&#xA;&#xA;![Nixpacks Build Command Output folder](https://res.cloudinary.com/techstructive-blog/image/upload/v1657962407/blog-media/nixpacks-build-output.png)&#xA;&#xA;&#xA;**Dockerfile**&#xA;&#xA;![Nixpacks Build command ouptut](https://res.cloudinary.com/techstructive-blog/image/upload/v1657962479/blog-media/nixpacks-build-output-folder.png)&#xA;&#xA;&#xA;**environment.nix File**&#xA;&#xA;![Nixpacks environment.nix file](https://res.cloudinary.com/techstructive-blog/image/upload/v1657969127/blog-media/nixpacks-build-environment-nix-file.png)&#xA;&#xA;So, this will output the built application into the provided path. The output folder should necessarily be out of the application folder as it makes no sense to output in the same folder as the application since the nixpacks CLI will consider the folder as the application folder.&#xA;&#xA;### Provide a Install/Build/Start Command&#xA;&#xA;We can provide the commands at the install phase/build/start phase of the application to the build command in order to build the app with non-default or custom commands. This will add up to the docker steps that will involve making the build for the application.&#xA;&#xA;```&#xA;nixpacks build . --build-cmd &#39;python manage.py collectstatic&#39;&#xA;&#xA;OR&#xA;&#xA;nixpacks build . -b &#39;python manage.py collectstatic&#39;&#xA;```&#xA;&#xA;![Nixpacks Build Command Providing install/build/start commands](https://res.cloudinary.com/techstructive-blog/image/upload/v1657962514/blog-media/nixpacks-build-build-command.png)&#xA;&#xA;These kinds of parameters can be passed similarly for `install-cmd` and `start-cmd` as `-i` and `-s` respectively. We can further chain up the commands and customize the build process as per the application&#39;s requirements.&#xA;&#xA;### Providing environment variables to image&#xA;&#xA;The environment variable can be passed to the build command for parsing to the application. This can be used for parsing additional or optional environment variables to the application image.&#xA;&#xA;```&#xA;nixpacks build . --env &#39;NAME=VALUE&#39;&#xA;&#xA;nixpack build . --env &#39;DATABASE_URL=postgres://postgres:postgres@localhost:5432/techstructive_blog&#39;&#xA;```&#xA;&#xA;![Nixpacks Build Comand parsing environment variables](https://res.cloudinary.com/techstructive-blog/image/upload/v1657963255/blog-media/nixpacks-build-env-variable-db-url.png)&#xA;&#xA;![Nixpacks Build Command env variable migrate](https://res.cloudinary.com/techstructive-blog/image/upload/v1657963302/blog-media/nixpacks-build-db-migrate-env.png)&#xA;&#xA;Here, we provide the environment variable `DATABASE_URL` to the build command and this is parsed to the application image. Thereby when the image is run as a container, it is parsed as a normal environment variable and thereby is available for utilization from the application.&#xA;&#xA;For further references on the build command arguments, you can follow the [documentation of nixpack](https://nixpacks.com/docs/cli) by railway app.&#xA;&#xA;### Creating a Procfile&#xA;&#xA;This is important for telling any buildpack in this case nixpacks to understand the process to start for this web application. For django it is simply to add the web process like to mention the `wsgi` app with the project name. We can use the gunicorn as the web server in production.&#xA;&#xA;```&#xA;&#xA;# Procfile&#xA;&#xA;web: gunicorn &lt;django_project_name&gt;.wsgi&#xA;&#xA;```&#xA;&#xA;This is the Procfile, this is a file type without the extension. So, this is a typical Django application Procfile, you can also use the other variants of Procfile for applying migration for every web process start-up.&#xA;&#xA;```&#xA;&#xA;# Procfile&#xA;&#xA;web: python manage.py migrate &amp;&amp; gunicorn &lt;django_project_name&gt;.wsgi&#xA;&#xA;```&#xA;&#xA;As we saw in the base build command, the local server was not able to listen to the gunicorn server in the container, so we need to bind the gunicorn server to the local port.&#xA;&#xA;```&#xA;&#xA;# Procfile&#xA;&#xA;web: python manage.py migrate &amp;&amp; gunicorn &lt;django_project_name&gt;.wsgi -b :8000&#xA;&#xA;```&#xA;&#xA;So, we use the `-b` option in the gunicorn command to bind the port in the container to the port in the local machine. Now, if we build the application and forward the port to the `8000` port in the local machine, we will see our application running &#xA;&#xA;&lt;video width=&#34;800&#34; height=&#34;450&#34; controls&gt;&#xA;  &lt;source src=&#34;https://res.cloudinary.com/techstructive-blog/video/upload/v1657964597/blog-media/nixpacks-local-bind.mp4&#34; type=&#34;video/mp4&#34;&gt;&#xA;&lt;/video&gt;&#xA;&#xA;```&#xA;docker run -p 8000:8000 -it &lt;container_id&gt; &#xA;&#xA;```&#xA;&#xA;### Specifying the Python version&#xA;&#xA;This is created for specifying the python version for building the Django application or any other python app.&#xA;&#xA;```&#xA;# .python-version&#xA;&#xA;3.10&#xA;```&#xA;&#xA;Save the `.python-version` file with just the python version like `3.6`, `3.10`, etc. and this will be picked by the build command while creating the build image.&#xA;&#xA;## Deploying the Django Application&#xA;&#xA;After we looked at the nix picks specifications, we can now deploy our Django application with nixpacks on Railway. So, you can follow up with the [Railway Deployment]() Article for setting up your Django app for deployment at the railway. This usually involves a few steps like creating Procfile(not necessary but recommended), requirements.txt(necessary to pull dependencies), and the python version which is chosen as `3.8` as default. The further steps are to create a GitHub repository to link with the Railway app and create a PostgreSQL database service on the railway platform.&#xA;&#xA;### Create configuration files&#xA;&#xA;As we have seen we will require a `requirements.txt` file, `Pipfile` or a `pyproject.toml` file for listing out and installing dependencies for our django application. This can be done with various commands like:&#xA;&#xA;```&#xA;# For requirements.txt and virtualenv&#xA;pip freeze &gt; requirements.txt&#xA;&#xA;# Autogenerated Pipfile for pipenv&#xA;# Autogenerated pyproject.toml for poetry&#xA;&#xA;```&#xA;&#xA;So, this file should be present on the base directory of the django application in order for the nixpack to pick up and install the python packages. Also, for customization of the start command in the build process, you can create a `Procfile` as discussed earlier in order to run commands to start the Django web server.&#xA;&#xA;The python version can be specified with the `.python-version` file with just the version name as `3.9`, `3.10`, etc. OR we can add an environment variable `NIXPACKS_PYTHON_VERSION` to the python version we want.&#xA;&#xA;### Create and Linkup a GitHub repository for existing Django projects&#xA;&#xA;We can create a GitHub repository and link up the project to the Railway platform and thereby creating an automated build for every push. &#xA;&#xA;The below video will explain how to set up the GitHub repository for the Railway app.&#xA;&#xA;&lt;video width=&#34;800&#34; height=&#34;450&#34; controls&gt;&#xA;  &lt;source src=&#34;https://res.cloudinary.com/techstructive-blog/video/upload/v1652970864/blog-media/django-deployment/railway_project_init.webm&#34; type=&#34;video/mp4&#34;&gt;&#xA;&lt;/video&gt;&#xA;&#xA;&lt;video width=&#34;800&#34; height=&#34;450&#34; controls&gt;&#xA;  &lt;source src=&#34;https://res.cloudinary.com/techstructive-blog/video/upload/v1657965284/blog-media/railway-platform-github.mp4&#34; type=&#34;video/mp4&#34;&gt;&#xA;&lt;/video&gt;&#xA;&#xA;### Setup environment variables &#xA;&#xA;We can use `python-environ` to set up environment variables in a Django application, we will require these environment variables for attributes like `SECRET_KEY`, `DATABASE_URL`, email-stuff, etc. These are quite handy to avoid leaking sensitive information to the open source project on GitHub.&#xA;&#xA;You can install the `python-environ` package with pip or any other package management tool as follows:&#xA;&#xA;```&#xA;pip install python-environ&#xA;```&#xA;&#xA;After installing the package, we can set up the environment variable in the settings file.&#xA;&#xA;``` python&#xA;# &lt;project_name&gt;/settings.py&#xA;&#xA;import os&#xA;from dotenv import load_dotenv&#xA;&#xA;BASE_DIR = Path(__file__).resolve().parent.parent&#xA;&#xA;load_dotenv(os.path.join(BASE_DIR, &#34;.env&#34;))&#xA;```&#xA;&#xA;After loading the environment variables, we can access them with `os.env(&#34;ENV_NAME&#34;, default=&#34;&#34;)`, this will load the environment variable with the name or we can provide a default value.&#xA;&#xA;### Attach a PostgreSQL database service&#xA;&#xA;You can add a PostgreSQL database service to your Django Railway app by attaching a service. This will add a new service along with the django application, so these two act as different entities within a railway project. &#xA;&#xA;&lt;video width=&#34;800&#34; height=&#34;450&#34; controls&gt;&#xA;  &lt;source src=&#34;https://res.cloudinary.com/techstructive-blog/video/upload/v1652963718/blog-media/django-deployment/postgres_spinup_railway_d2xkpt.mp4&#34; type=&#34;video/mp4&#34;&gt;&#xA;&lt;/video&gt;&#xA;&#xA;You can then access the `DATABASE_URL` from the connect settings and copy the database URL and set it as an environment variable in the django railway project service. This will link up the Django app and the PostgreSQL database. While setting it up locally, you can use the `.env` file and add the environment variable there.&#xA;&#xA;```&#xA;# environment variable&#xA;DATABASE_URL=postgres://username:password@hostname:port/db_name&#xA;&#xA;# local database postgres&#xA;DATABASE_URL=postgres://postgres:postgres@localhost:5432/db_name&#xA;```&#xA;&#xA;&lt;video width=&#34;800&#34; height=&#34;450&#34; controls&gt;&#xA;  &lt;source src=&#34;https://res.cloudinary.com/techstructive-blog/video/upload/v1657964943/blog-media/railway-postgres-spinup.mp4&#34; type=&#34;video/mp4&#34;&gt;&#xA;&lt;/video&gt;&#xA;&#xA;&#xA;This will set up the database environment variable and you can access these from the settings.py file with the `env.db` function as follows:&#xA;&#xA;```python&#xA;env.db(&#34;DATABASE_URL&#34;, default=&lt;local_database_url&gt;)&#xA;```&#xA;&#xA;So, we can finally use the database from the Railway app in our Django application once the environment variable is correctly used.&#xA;&#xA;### Choose the Buildpack&#xA;&#xA;We can choose a buildpack for our Django application in the Railway platform, we have options like &#xA;&#xA;1. Heroku Buildpack&#xA;2. Railway Nixpacks&#xA;3. Paketo Buildpack&#xA;&#xA;As of the writing of the article, on 16th July 21, the Railway has made `Nixpacks` the default buildpack for an application :) It was the `Heroku` Buildpack as a default earlier. So, that is a cool thing, you can toggle these settings for choosing the buildpacks from the project settings.&#xA;&#xA;Railway Dashboard Choose BuildPack&#xA;&#xA;&lt;video width=&#34;800&#34; height=&#34;450&#34; controls&gt;&#xA;  &lt;source src=&#34;https://res.cloudinary.com/techstructive-blog/video/upload/v1657964699/blog-media/nixpacks-railway-dashboard.mp4&#34; type=&#34;video/mp4&#34;&gt;&#xA;&lt;/video&gt;&#xA;&#xA;### Deploy to Railway with Nixpacks&#xA;&#xA;Now, we have seen how to set up the nixpacks, we had the Postgres database setup, and we can finally deploy our application to the railway platform with nixpacks.&#xA;&#xA;&#xA;&lt;video width=&#34;800&#34; height=&#34;450&#34; controls&gt;&#xA;  &lt;source src=&#34;https://res.cloudinary.com/techstructive-blog/video/upload/v1657965560/blog-media/railway-nixpacks-deploy.mp4&#34; type=&#34;video/mp4&#34;&gt;&#xA;&lt;/video&gt;&#xA;&#xA;So, we simply can configure the source code or include the `environment.nix` file into the source code for desired behavior. The nixpack selection can be done based on the source code or the presence of `environment.nix` and that&#39;s why we can rely on expected behaviors from the deployment builds. &#xA;&#xA;## Summary&#xA;&#xA;So, nixpacks is a great way to deploy an application, for me it&#39;s an automated docker deployment, it basically creates docker images of the application and runs it with the appropriate environment. There is a lot of language support on nixpacks currently on Railway, you can check them out on the official website. Every programming language has specific requirements for managing or installing dependencies and packages, the nixpacks manage them automatically for us.&#xA;&#xA;## Conclusion&#xA;&#xA;So, from this post of the [Django Deployment Series](https://www.meetgor.com/series/django-deployment/), we were able to understand how to deploy a Django application on the Railway app with Nixpacks which are a very intuitive way to deploy apps. We covered what are nixpacks, the process of building an application with nixpacks, and deploying a existing, new Django project on the railway with nixpacks. We also explored the various commands provided in the nixpacks CLI to build. plan a Django application.&#xA;&#xA;Hopefully, you were able to understand the concept of nixpacks and how they can automate the process of containerization and deployment. Thank you for reading, if you have any queries or feedback, you can leave them down in the comments or freely drop them on social media. Happy Coding :)&#xA;</content>
      <type>posts</type>
    </item>
    <item>
      <title>APTUI</title>
      <link>meetgor.com/</link>
      <description>A terminal interface for testing and working with APIs and web requests.</description>
      <pubDate>Wed, 22 Jun 2022 00:00:00 UTC</pubDate>
      <content>A terminal client interface for testing and working with APIs and web requests.&#xA;&#xA;Tech Stack:&#xA;&#xA;- Python&#xA;    - Textual&#xA;    - Rich&#xA;&#xA;</content>
      <type>projects</type>
    </item>
    <item>
      <title>Django Project with PostgreSQL Deployment on Railway App</title>
      <link>meetgor.com/django-deploy-railway</link>
      <description>Creating and Configuring a Django Application for deployment on Railway.app Platform</description>
      <pubDate>Thu, 19 May 2022 00:00:00 UTC</pubDate>
      <content>&#xA;## Introduction&#xA;&#xA;We have already seen the process of deployment of a Django app on Heroku, now we can move to another platform which is [Railway App](https://railway.app). This allows a faster and more intuitive way to deploy a Django app(or any sort of web app). This platform has several [Starter Apps](https://railway.app/starters) for shipping your app in several clicks, definitely, it would require some configuration and tweaking a bit.&#xA;&#xA;We will be following similar steps from the [Django-Heroku Deployment Guide](https://mr-destructive.github.io/techstructive-blog/series/django-deployment/) for configuring and setting up our Django project for the deployment on the Railway app. We explore a few different ways to create and deploy a Django project on Railway.&#xA;&#xA;&#xA;## Creating a Project on Railway App&#xA;&#xA;Once we have our Django project setup, we can move ahead and create a Railway Project. A Railway project is a collection of environments, plugins, services, and deployment variables. By heading on the [New Project](https://railway.app/new) webpage, you can log in or sign up for a free account and create a simple project.&#xA;&#xA;Here we can have a few options:&#xA;&#xA;1. Create a Django App Template (Djangopy Starter)&#xA;2. Pull a Project from a GitHub Repository (Deploy from GitHub Repo)&#xA;&#xA;We&#39;ll look into each of them, the first one is by allowing the `Railway` bot to create a prebuilt Django template on our GitHub account. The second option is for fetching and deploying an existing Django project repository on GitHub.&#xA;&#xA;## Railway Django Project Template&#xA;&#xA;Railway provides a simple Django project template, it consists of a single app and a simple view that displays a `HttpResponse`. The Django project template provided by Railway is open source and available on [GitHub](https://github.com/railwayapp/starters/tree/master/examples/djangopy). With this method, you won&#39;t require any django project to create by yourself, it would be a template of django project created by the railway bot. Though for extending and building a meaningful django project, you will have to clone the repository and make necessary changes to it.&#xA;&#xA;Create a Project by heading on to the [New Project](https://railway.app/new) Tab and search for `Django`, you should see a `django` project as a starter pack.&#xA;&#xA;![New Railway Django Project](https://res.cloudinary.com/techstructive-blog/image/upload/v1652945887/blog-media/django-deployment/railway-django-new-project.png)&#xA;&#xA;Once you select the Django project, we have an initial configuration tab opened up for us. It is mandatory to fill the `SECRET_KEY` environment variable as it makes your django project more secure. Also, do change the name of the `repository` as it will be the name of your repository name in your GitHub account.&#xA;&#xA;To create a `SECRET_KEY` key, you can move into your terminal and do some python wizardry.&#xA;&#xA;Open a Python REPL, by entering the command `python` or `python3`. Import the `secrets` module and run the function `token_hex(24)` which will generate a key of length 24.&#xA;&#xA;```&#xA;python&#xA;&#xA;import secrets&#xA;secrets.token_hex(24)&#xA;```&#xA;&#xA;![Python Secret Key Generation](https://res.cloudinary.com/techstructive-blog/image/upload/v1652946842/blog-media/django-deployment/python-secret-key-gen.png)&#xA;&#xA;Now, copy the `SECRET_KEY` without quotes into the prompt and this will create a repository on your GitHub with the provided name. The `Railway` Bot will create a django project with the name `djangopy` in that repository with some pre-configured settings.&#xA;&#xA;![Django Proejct Create](https://res.cloudinary.com/techstructive-blog/image/upload/v1652947362/blog-media/django-deployment/create-project-django.png)&#xA;&#xA;![Railway Bot creating Djangopy](https://res.cloudinary.com/techstructive-blog/image/upload/v1652947344/blog-media/django-deployment/railway-bot-djangopy.png)&#xA;&#xA;This will create a simple repository on your GitHub but also a django application deployed on Railway along with PostgreSQL Database attached to it.&#xA;&#xA;![Railway Django Project Dashboard](https://res.cloudinary.com/techstructive-blog/image/upload/v1652947689/blog-media/django-deployment/deployed-project-dashboard.png)&#xA;&#xA;So, this has deployed the project on Railway with this [https://djangopy-production-43cb.up.railway.app/](https://djangopy-production-43cb.up.railway.app/) URL Link. The name of the link can be configured from the Settings Tab in Dashboard Section and editing the Service Domains and even adding a Custom domain.&#xA;&#xA;So this is how we deploy a basic django application on railway app. Further, you can modify the contents of the Github repository and push the code by committing the changes and it will pick it from there and also deploy it automatically, thereby creating a sort of CI-CD.&#xA;&#xA;We&#39;ll be demonstrating this in the next section which is a method to deploy the project from a custom GitHub repository i.e. by setting up everything ourselves and then attaching the Railway app for deployment. The benefit of this method is that we can configure some already existing Django applications by tinkering a bit.&#xA;&#xA;## Deploying from GitHub repository to Railway&#xA;&#xA;This is the second method for deploying the Railway project. For this we need a proper Django Project, we will set up a django application from scratch, I have already created a simple CRUD application in Django for a Blog on [GitHub](https://github.com/Mr-Destructive/django-blog). This won&#39;t be a Django guide for setting up views and creating models, I&#39;ve explained all the setup of the django-blog in my [Django Basics series](https://mr-destructive.github.io/techstructive-blog/series/django-basics/).&#xA;&#xA;### Creating a Django Application&#xA;&#xA;For deploying an app, we definitely need an app, we need to create a basic Django application to deploy on the web. We&#39;ll be creating a simple blog application with a couple of views and a simple model structure. As for the database, we&#39;ll be using Postgres as Railway has an database service for it and it is pretty easy to configure.&#xA;&#xA;#### Set up a virtual environment&#xA;&#xA;We need to set up a virtual environment in order to keep the Django project neat and tidy by managing the project-specific dependencies and packages. We can use the [virtualenv](https://pypi.org/project/virtualenv/) package to isolate a python project from the rest of the system.&#xA;&#xA;```&#xA;# install the virtualenv package&#xA;pip install virtualenv&#xA;&#xA;# create a virtual env for the project&#xA;virtualenv .venv&#xA;&#xA;# activate the virtualenv&#xA;Windows:&#xA;.venv\Scripts�ctivate&#xA;&#xA;Linux/macOS:&#xA;source .venv/bin/activate&#xA;```&#xA;&#xA;This will set up the project nicely for a Django project, you now install the core Django package and get started with creating a Django application.&#xA;&#xA;&#xA;```bash&#xA;# install django&#xA;pip install django&#xA;&#xA;# start a django project&#xA;django-admin startproject blog .&#xA;&#xA;cd blog&#xA;&#xA;# create a application in django project&#xA;python manage.py createapp api&#xA;&#xA;# Create some models, views, URLs, templates&#xA;&#xA;# run the server&#xA;python manage.py runserver&#xA;```&#xA;&#xA;We assume you already have a Django project configured with some basic URLs, views, and templates or static files as per your project and requirements, for this tutorial I will be using the simple blog application from my previous Django tutorials as a reference. As said earlier, you can follow along with my [Django Basics](https://techstructiveblog.hashnode.dev/series/django-basics) series and refer to the Blog Application project on [GitHub](https://github.com/Mr-Destructive/django-blog).&#xA;&#xA;### Configuring the Django Application&#xA;&#xA;Make sure to create and activate the virtual environment for this django project. This should be done to manage the dependencies and packages used in the project. If you are not aware of the virtual environment and django setup, you can follow up with this [post](https://mr-destructive.github.io/techstructive-blog/django-setup-script/).&#xA;&#xA;#### Creating a runtime.txt file&#xA;&#xA;Now, Firstly we need to specify which type and version of language we are using. Since Django is a Python-based web framework, we need to select the python version in a text file.&#xA;&#xA;**runtime.txt**&#xA;```&#xA;python-3.9.5&#xA;```&#xA; &#xA;Here, the version can be anything as per your project and the packages installed.  &#xA;&#xA;#### Creating requirements.txt file&#xA;&#xA;We&#39;ll first create a `requirements.txt` file for storing all the dependencies and packages installed in the application. This will help in installing dependencies while deploying the application. We can either use a `requirements.txt` file using `virtualenv` or a `Pipfile` using Pipenv. Both serve the same purpose but a bit differently. &#xA;&#xA;Assuming you are in an isolated virtual environment for this Django project, you can create a requirements.txt file using the below command:&#xA;&#xA;Make sure the virtualenv is activated before running the command:&#xA;&#xA;```&#xA;pip freeze &gt; requirements.txt&#xA;```&#xA;&#xA;This will create a simple text file that contains the package names along with the versions used in the current virtual environment. A simple Django requirements file would look something like this:&#xA;&#xA;```&#xA;asgiref==3.4.1&#xA;Django==3.2.11&#xA;pytz==2021.3&#xA;sqlparse==0.4.2&#xA;typing_extensions==4.0.1&#xA;```&#xA;&#xA;![pip freeze command](https://res.cloudinary.com/techstructive-blog/image/upload/v1652956558/blog-media/django-deployment/railway_requirements_freeze.png)&#xA;&#xA;This is vanilla Django without any additional dependencies but if you have integrated other functionalities like Django Rest Framework, PostgreSQL, Crispy Forms, Schedulers, etc. there might be additional dependencies that become quite crucial for the smooth working of the project.  &#xA;&#xA;If you are using pipenv, you don&#39;t need to make any efforts to manually activate and manage the virtual environment, the dependencies are installed and taken care of by the pipenv installer. You just need to make sure to install any package with `pipenv install` and not `pip install` for better and improved package tracking.&#xA;&#xA;So, that&#39;s all we need to take care of packages and keep a list of these integrated packages for the project. You need to update the requirements.txt file every time you install any new package or modify the dependencies for a project. Simply use the command `pip freeze &gt; requirements.txt` in the activated virtual environment.  &#xA;&#xA;#### Creating a Procfile&#xA;&#xA;Next up, we have the `Procfile`, a procfile is a special file that holds information about the processes to be run to start or activate the project. In our case, for django we need a web process that can manage the server.&#xA;&#xA;A Procfile is a simple file without any extension, make sure to write `Procfile` as it is the name of the file in the root folder of the project. Inside the file add the following contents:&#xA;&#xA;**Procfile**&#xA;```Procfile&#xA;web: gunicorn &lt;project_name&gt;.wsgi&#xA;```&#xA;&#xA;For the Procfile, Railway has a built [Procfile](https://github.com/railwayapp/starters/blob/master/examples/djangopy/Procfile) in the Django Template, you can refer to it and create it as follows:&#xA;&#xA;```Procfile&#xA;web: python manage.py migrate &amp;&amp; gunicorn &lt;project_name&gt;.wsgi&#xA;```&#xA;&#xA;As we can see we have defined the `web` process using `gunicorn`, [Gunicorn](https://pypi.org/project/gunicorn/) is a python package that helps in creating WSGI HTTP Server for the UNIX operating systems. So, we need to install the package and update the package dependency list. &#xA;&#xA;```&#xA;pip install gunicorn&#xA;&#xA;pip freeze &gt; requirements.txt&#xA;``` &#xA;&#xA;#### Configuring Environment Variables&#xA;&#xA;We need to keep our secrets for the django project out of the deployed code and in a safe place, we can create environment variables and keep them in a `.env` file which will be git-ignored. We do not want this `.env` file to be open source and thus should not be committed.&#xA;&#xA;We first need to create a new secret key if you already have a GitHub repository, chances are you would have committed the default secret key open for the world to see, it is an insecure way of deploying django apps in production.&#xA;&#xA;This should generate a secret key that only you know now. So, just copy the key without the quotes and create a file `.env` in the root project folder. &#xA;&#xA;**.env**&#xA;```&#xA;SECRET_KEY=76419fd6885a677f802fd1d2b5acd0188e23e001042b05a8&#xA;```&#xA;&#xA;The `.env` file should also be added to the `.gitignore` file, so simply append the following in the `.gitignore` file&#xA;&#xA;```&#xA;.env&#xA;```&#xA;&#xA;This is just one of the environment variables in our django project, further, we will also be adding a few other variables like database credentials, debug status, etc.&#xA;&#xA;We have now created environment variables for our django application, we now need a way to parse these environment variables into the Django project.  &#xA;&#xA;#### Parsing Environment variables using python-dotenv&#xA;&#xA;We will use [python-dotenv](https://pypi.org/project/python-dotenv/) to parse variables into the django settings configurations like `SECRET_KEY` and `DATABASES`. &#xA;&#xA;- Install `python-dotenv` with pip with the command :  &#xA;&#xA;```&#xA;pip install python-dotenv&#xA;```&#xA;&#xA;We need to then modify the default variables in the `settings.py` file. Firstly, we will load in the `.env` file for accessing the environment variables for the configuration of the project.&#xA;&#xA;Append the following code, to the top of the `settings.py` file, make sure don&#39;t override the configuration so remove unnecessary imports and configurations.&#xA;&#xA;``` python&#xA;# &lt;project_name&gt;/settings.py&#xA;&#xA;import os&#xA;from dotenv import load_dotenv&#xA;&#xA;BASE_DIR = Path(__file__).resolve().parent.parent&#xA;&#xA;load_dotenv(os.path.join(BASE_DIR, &#34;.env&#34;))&#xA;&#xA;```&#xA;&#xA;We have imported the package `dotenv` basically the `python-dotenv` into the `settings.py` file and the module `os` for loading the `.env` file. The `load_dotenv` function helps in loading the `key-value` pairs which are the configuration variables that can act as actual environment variables. We provide in a file to the [load_dotenv](https://saurabh-kumar.com/python-dotenv/) function which is the `.env` file in our case, you can pick up any location for the `.env` file but make sure to change the location while parsing the file into the `load_dotenv` function. &#xA;&#xA;After loading the variables into the `settings.py` file, we now need to access those variables and set the appropriate variables the configuration from the variables received from the `load_dotenv` function. The `os.getenv` function to access the environment variables. The `os.getenv` function takes a parameter as the `key` for the environment variable and returns the value of the environment variable.&#xA;&#xA;``` python&#xA;SECRET_KEY = os.getenv(&#34;SECRET_KEY&#34;)&#xA;```&#xA;&#xA;We have secretly configured the `SECRET_KEY` for the django project. If you have any other variables as simple key-value pairs like `AUTH` passwords, username, etc. you can use this method to get the configuration variables. &#xA;&#xA;#### Add gitignore file&#xA;&#xA;We would need a `.gitignore` file for only committing the project and pushing it to the remote repository. Here, we will set up a minimal `.gitignore` file in our root repository.&#xA;&#xA;Here&#39;s a sample `.gitignore` for a minimal django project.&#xA;&#xA;```gitignore&#xA;.env/&#xA;.venv/&#xA;env/&#xA;venv/&#xA;*.env&#xA;&#xA;*.pyc&#xA;db.sqlite3&#xA;staticfiles/&#xA;```&#xA;&#xA;If you want a full-fledged `.gitignore` for a complex django project, you can take the reference from Jose Padilla&#39;s [gitignore Template](https://github.com/jpadilla/django-project-template/blob/master/.gitignore) for a django project.  &#xA;&#xA;That would be good to go for creating and serving up the project while deploying the project on Railway App.&#xA;&#xA;### Git Commit the Django Project&#xA;&#xA;Now, we can safely commit the code and push it to a GitHub repository. This will make sure you have a basic django proejct on GitHub from which we can build the Railway app into deployment.&#xA;&#xA;```&#xA;git status &#xA;&#xA;git add .&#xA;&#xA;git commit -m &#34;config for railway deployment&#34;&#xA;```&#xA;&#xA;Carefully check the status of the git repository before committing and make sure you don&#39;t forget anything by mistake, only commit the files which you think are important and ignore the rest.&#xA;&#xA;```&#xA;git remote add rail https://github.com/Mr-Destructive/django-blog/tree/railway&#xA;&#xA;git push rail railway&#xA;```&#xA;&#xA;![Django Project Push GitHub](https://res.cloudinary.com/techstructive-blog/image/upload/v1652956515/blog-media/django-deployment/railway_push_github.png)&#xA;&#xA;### Creating the Railway project&#xA;&#xA;Now, since we have a django project nicely configured and setup on GitHub, we can pull out a railway project and fetch the project from the GitHub repository.&#xA;&#xA;&lt;video width=&#34;800&#34; height=&#34;450&#34; controls&gt;&#xA;  &lt;source src=&#34;https://res.cloudinary.com/techstructive-blog/video/upload/v1652970864/blog-media/django-deployment/railway_project_init.webm&#34; type=&#34;video/mp4&#34;&gt;&#xA;&lt;/video&gt;&#xA;&#xA;![Railway Proejct from GitHub](https://res.cloudinary.com/techstructive-blog/image/upload/v1652970665/blog-media/django-deployment/railway-proejct-github.png)&#xA;&#xA;#### Spinning up the database &#xA;&#xA;We also need a database that we can attach in the django project in our Railway application. We can integrate a `PostgreSQL` database as a service running in our Railway project instance. We can do that by locating the `+New` tab on the project dashboard and attaching a `Database` in the drop-down menu. &#xA;&#xA;&#xA;&lt;video width=&#34;800&#34; height=&#34;450&#34; controls&gt;&#xA;  &lt;source src=&#34;https://res.cloudinary.com/techstructive-blog/video/upload/v1652963718/blog-media/django-deployment/postgres_spinup_railway_d2xkpt.mp4&#34; type=&#34;video/mp4&#34;&gt;&#xA;&lt;/video&gt;&#xA;&#xA;After creating a database service, we need the credentials of the database or the `DATABASE_URL` of the PostgreSQL in order to integrate it into the django settings. We can locate into the `Connect` of the PostgreSQL service and grab the URL of the database. This can be stored in the main django application serves as an environment variable. &#xA;&#xA;```&#xA;DATABASE_URL=postgresql://postgres:SE74bEw@containers-51.railway.app:6919/railway&#xA;```&#xA;&#xA;![PostgreSQL database variable config](https://res.cloudinary.com/techstructive-blog/image/upload/v1652964755/blog-media/django-deployment/postgres_database_config.png)&#xA;&#xA;In the Django Starter Project provided by Railway, we should have a PostgreSQL database integrated as a Service. So, we can consume the database in our django project. &#xA;&#xA;We will add the `DATABASE_URL` config variable into the `.env` file and also add it into the main Django project service so that it can communicate to the database. You need to copy the `DATABSE_URL` into our local setup file(`.env` file). Copy the Database URL and paste it into the `.env` file as follows:&#xA;&#xA;```env&#xA;DATABASE_URL=postgres://sjxgipufegmgsw:78cbb568e@ec2-52-4-104-184.compute-1.amazonaws.com:5432/dbmuget&#xA;```&#xA;&#xA;The format for the Postgres URL is as follows:&#xA;&#xA;```&#xA;postgresql://[user[:password]@][netloc][:port][/dbname]&#xA;```&#xA;&#xA;#### Loading Database configuration&#xA;&#xA;Databases are a bit different as compared to other simple configurations in django. We need to make a few adjustments to the default database configuration. We will install another package `dj-database-url` to configure `DATABASE_URL`. Since the databse_url has a few components we need a way to extract the details like the `hostname`, `port`, `database_name`, and `password`. Using the `dj-database-url` package we have a few functions that can serve the purpose.&#xA;&#xA;```&#xA;pip install dj-database-url&#xA;```&#xA;&#xA;At the end of your `settings.py` file, append the following code. &#xA;&#xA;``` python&#xA;import dj_database_url&#xA;&#xA;DATABASE_URL = os.getenv(&#34;DATABASE_URL&#34;)&#xA;&#xA;DATABASES = {&#xA;    &#34;default&#34;: dj_database_url.config(default=DATABASE_URL, conn_max_age=1800),&#xA;}&#xA;```&#xA;&#xA;We would need an adapter for making migrations to the `PostgreSQL` database i.e. the `psycopg2` package. This is a mandatory step if you are working with `postgres` database. This can be installed with the simple pip install:&#xA;&#xA;```&#xA;pip install psycopg2&#xA;&#xA;# If it does not work try&#xA;pip install psycopg2-binary&#xA;&#xA;&#xA;# if still error persists try installing setuptools&#xA;pip install -U setuptools&#xA;pip install psycopg2&#xA;```&#xA;&#xA;Now, that we have configured the database, we can now apply migrations to the new database of Postgres provided by Railway. We will simply run the migrate command and in the Railway Project the PostgreSQL database would have been modified and an appropriate schema should be applied.&#xA;&#xA;```&#xA;python manage.py migrate&#xA;```&#xA;&#xA;![Railway PostgreSQL db migrate](https://res.cloudinary.com/techstructive-blog/image/upload/v1652965335/blog-media/django-deployment/railway_database_migrate.png)&#xA;&#xA;Make sure to update the `requirements.txt` file before pushing the project to Railway app for making sure everything works as expected. Since we have installed a few additional packages that are directly used in the `settings.py` file, we need to run the `pip freeze` command to update the `requiremnets.txt` file.&#xA;&#xA;#### Serving Static Files&#xA;&#xA;Now, if you have some static files like `CSS`, `Javascript`, or `images`, you need to configure the static files in order to serve them from the Railway app server. We will require another config variable for collecting the static files from the selected repository. &#xA;&#xA;```python&#xA;&#xA;STATIC_URL = &#34;static/&#34;&#xA;STATICFILES_DIRS = [os.path.join(BASE_DIR, &#34;static&#34;)]&#xA;STATIC_ROOT = os.path.join(BASE_DIR, &#34;staticfiles&#34;)&#xA;&#xA;``` &#xA;&#xA;Here, if you have served your static files from the `static` folder in the root directory of your django project, you can add the above code in the settings.py file. We will collect all static files in the folder along with the default static files provided by django in the `staticfiles` directory. Run the following command if you want to test whether the static files are properly collected and served.&#xA;&#xA;```&#xA;python manage.py collectstatic &#xA;```&#xA;&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1652600828657/JgL4nLuiL.png)&#xA;&#xA;So, this command will collect all the static files and store them in a single place. We see that the files from the admin section are also copied as well as the custom static files from the project configuration. Now, we can move on to set the config variable for the Railway app in the Variables Tab.&#xA;&#xA;```&#xA;DISABLE_COLLECTSTATIC = 0&#xA;```&#xA;&#xA;We can set the `DISABLE_COLLECTSTATIC` variable as `0` or `1` indicating whether to disable it or not. We have currently enabled the static file collection while deploying the app but you can set it to `1` to disable the collection of static files.&#xA;&#xA;Since I first tested the application on Railway, the static files don&#39;t work as expected, we need another package to make sure the staticfiles are served property. We will be installing the `whitenoise` package which serves as the middleware for serving the static files.&#xA;&#xA;```&#xA;pip install whitenoise&#xA;```&#xA;&#xA;Add the whitenoise middleware `whitenoise.middleware.WhiteNoiseMiddleware` to the `MIDDLEWARE` list in the `settings.py` file.&#xA;&#xA;```python&#xA;MIDDLEWARE = [&#xA;...&#xA;...&#xA;...&#xA;    &#39;whitenoise.middleware.WhiteNoiseMiddleware&#39;,&#xA;]&#xA;&#xA;```&#xA;&#xA;That should be enough to make the most of the deployment on Railway app. You will have to make a few adjustments as per your requirements and project.&#xA;&#xA;&#xA;## Deploy to GitHub&#xA;&#xA;Finally, we will have all the pieces connected, only we need to push the code to the GitHub repository in order to trigger a build on the railway app. So, we make sure we commit every critical thing that are in our django project and include every sensitiv information in the gitignore file.&#xA;&#xA;```&#xA;pip freeze &gt; requirements.txt&#xA;```&#xA;&#xA;This step is quite important because you need to make sure that all the packages are listed in the `requirements.txt` file else you will have to wait for the build to fail and redeploy.&#xA;&#xA;Make sure the server is running first on your local machine, remember the server will be set up from scratch but the database will already have applied migrations if you have applied migrations before after connecting the Railway database service.&#xA; &#xA;```&#xA;python manage.py collectstatic&#xA;&#xA;python manage.py runserver&#xA;```&#xA;&#xA;This will set up the origin of the remote repository that will be pushing the project code. Next, make sure to commit the code which will contain all the required stuff for deploying the code.&#xA;&#xA;Checklist for deploying the code&#xA;&#xA;```&#xA;- requirements.txt&#xA;- Procfile&#xA;- runtime.txt&#xA;- django-project&#xA;- environment variables / config variables &#xA;- static file configuration&#xA;- database configuration&#xA;- migrate schema of database &#xA;- gitignore file for ignoring virtualenvs, .env file, staticfiles, etc&#xA;```&#xA;&#xA;```&#xA;git push origin main&#xA;&#xA;origin -&gt; remote repository URL&#xA;main   -&gt; branch name&#xA;```&#xA;&#xA;![Deployed Railway Project](https://res.cloudinary.com/techstructive-blog/image/upload/v1652966755/blog-media/django-deployment/railway-production-ss.png)&#xA;&#xA;## Railway CLI &#xA;&#xA;Railway also provides a cool CLI, it has some quite handy features like creating and managing services, local development environment, etc. We&#39;ll just dive into a few nice features of the CLI tool.&#xA;&#xA;We&#39;ll first install the CLI on our local system, for that the guide is quite limited in a way for a few options to choose from like `npm`, `shell`, and `scoop`. For me, the shell was the way to go, but it had a few issues with permission, so I made a few changes in the [install.sh](https://github.com/railwayapp/cli/blob/master/install.sh) script ran on my machine and it worked fine.&#xA;&#xA;![Install Railway CLI](https://res.cloudinary.com/techstructive-blog/image/upload/v1652944836/blog-media/django-deployment/railway-install.png)&#xA;&#xA;Now, that we have the `Railway CLi` set up we can run a few commands like:&#xA;&#xA;```&#xA;railway login&#xA;&#xA;OR&#xA;&#xA;# if it doesn&#39;t work&#xA;railway login --browserless&#xA;&#xA;OR&#xA;&#xA;# with node&#xA;npx railway login&#xA;```&#xA;&#xA;![Railway CLI Login](https://res.cloudinary.com/techstructive-blog/image/upload/v1652967978/blog-media/django-deployment/railway-cli-login.png)&#xA;&#xA;This will sign you in with your railway account.&#xA;&#xA;We now need to link our project and execute and work around the command in that project from the railway app. To link a project from a railway account, you have to use the `link` command. The link command takes in a parameter as the project id which can be obtained from the project dashboard settings tab. &#xA;&#xA;```&#xA;railway link &lt;proejct_id&gt;&#xA;```&#xA;&#xA;&lt;video width=&#34;800&#34; height=&#34;450&#34; controls&gt;&#xA;  &lt;source src=&#34;https://res.cloudinary.com/techstructive-blog/video/upload/v1652969451/blog-media/django-deployment/railway-proejct-link.webm&#34; type=&#34;video/mp4&#34;&gt;&#xA;&lt;/video&gt;&#xA;&#xA;&#xA;Now, we can explore some more commands like `run`, `up`, and so on. The `run` command is pretty solid and provides an interface to run commands for your project for instance in Django, create a superuser, manage dependencies, collectstatic files, etc. This allows us to set up and run commands into the actual production environment just from the CLI.&#xA;&#xA;&#xA;```&#xA;# railway run (command to be executed)&#xA;railway run python manage.py createsuperuser&#xA;&#xA;# deploy the project&#xA;railway up&#xA;```&#xA;&#xA;&lt;video width=&#34;800&#34; height=&#34;450&#34; controls&gt;&#xA;  &lt;source src=&#34;https://res.cloudinary.com/techstructive-blog/video/upload/v1652968693/blog-media/django-deployment/railway-cli-run-cmd.webm&#34; type=&#34;video/mp4&#34;&gt;&#xA;&lt;/video&gt;&#xA;&#xA;So, this was all about creating and deploying a django application on Railway. Here are some reference links:&#xA;&#xA;- [GitHub Repository](https://github.com/Mr-Destructive/django-blog/tree/railway)&#xA;- [Live Webpage](https://django-blog-production.up.railway.app/)&#xA;&#xA;## Conclusion&#xA;&#xA;So, that&#39;s how we deploy a Django project on the Railway app. We have seen two of the many ways to create and deploy a Django application on Railway. We also integrated a PostgreSQL service provided by Railway in our Django Project. Using the Railway CLI, we were able to manage and create Projects from the terminal, also interaction of the railway project was achieved along with the production build from CLI.&#xA;&#xA;Hopefully, you liked the above tutorial, if you have any questions. feedback, or queries, you can contact me on the Social handles provided below. Thank you for reading and till the next post Happy Coding :) &#xA;</content>
      <type>posts</type>
    </item>
    <item>
      <title>Django + PostgreSQL Deployment on Heroku</title>
      <link>meetgor.com/django-deploy-heroku</link>
      <description></description>
      <pubDate>Sun, 15 May 2022 00:00:00 UTC</pubDate>
      <content>&#xA;## Introduction&#xA;&#xA;Django projects are quite easy to build and simple to understand, you might have created a Django application and wanted to show it to the world? You can deploy a basic Django application with a database(PostgreSQL) with Heroku. It provides a decent free tier with some great features and add-ons. A free tier Heroku account has a limitation of 5 apps, limited data in the database, limited connections to the server per month, and so on.  &#xA;&#xA;Though the free tier is not a great option for bigger applications, it suits really well for smaller scale and ide projects, so we will be looking into the details of how to deploy a Django application to [Heroku](https://heroku.com/) which is a Platform as Service (PaS). &#xA;&#xA;This series will be an extension of the series [Django basics](https://techstructiveblog.hashnode.dev/series/django-basics) which covered the basics of the Django framework, we covered from basic Django fundamentals to building a CRUD API. In this series, we will be exploring some platforms for giving a better understanding of how things work and understanding a few components that were left as default while understanding the basics of Django. Let&#39;s get started with [Django Deployment](https://techstructiveblog.hashnode.dev/series/django-deployment)!&#xA;&#xA;## Creating a Django Application&#xA;&#xA;For deploying an app, we definitely need an app, we need to create a basic Django application to deploy on the web. We&#39;ll be creating a simple blog application with a couple of views and a simple model structure. As for the database, we&#39;ll be using Postgres as Heroku has an add-on for it and it is pretty easy to configure. &#xA;&#xA;### Set up a virtual environment&#xA;&#xA;We need to set up a virtual environment in order to keep the Django project neat and tidy by managing the project-specific dependencies and packages. We can use the [virtualenv](https://pypi.org/project/virtualenv/) package to isolate a python project from the rest of the system.&#xA;&#xA;```&#xA;# install the virtualenv package&#xA;pip install virtualenv&#xA;&#xA;# create a virtual env for the project&#xA;virtualenv .venv&#xA;&#xA;# activate the virtualenv&#xA;Windows:&#xA;.venv\Scripts�ctivate&#xA;&#xA;Linux/macOS:&#xA;source .venv/bin/activate&#xA;```&#xA;&#xA;This will set up the project nicely for a Django project, you now install the core Django package and get started with creating a Django application.&#xA;&#xA;&#xA;```bash&#xA;# install django&#xA;pip install django&#xA;&#xA;# start a django project&#xA;django-admin startproject blog .&#xA;&#xA;cd blog&#xA;&#xA;# create a application in django project&#xA;python manage.py createapp api&#xA;&#xA;# Create some models, views, URLs, templates&#xA;&#xA;# run the server&#xA;python manag.py runserver&#xA;```&#xA;&#xA;We assume you already have a Django project configured with some basic URLs, views and templates or static files as per your project and requirements, for this tutorial I will be using the simple blog application from my previous Django tutorials as a reference. You can follow along with my [Django Basics](https://techstructiveblog.hashnode.dev/series/django-basics) series and refer to the Blog Application project on [GitHub](https://github.com/Mr-Destructive/django-blog).&#xA;&#xA;## Configuring the Django Application&#xA;&#xA;Make sure to create and activate the virtual environment for this django project. This should be done to manage the dependencies and packages used in the project. If you are not aware of the virtual environment and django setup, you can follow up with this [post](https://mr-destructive.github.io/techstructive-blog/django-setup-script/).&#xA;&#xA;### Creating a runtime.txt file&#xA;&#xA;Now, Firstly we need to specify which type and version of language we are using. Since Django is a Python-based web framework, we need to select the python version in a text file.&#xA;&#xA;**runtime.txt**&#xA;```&#xA;python-3.9.5&#xA;```&#xA; &#xA;Here, the version can be anything as per your project and the packages installed.  &#xA;&#xA;### Creating requirements.txt file&#xA;&#xA;We&#39;ll first create a `requirements.txt` file for storing all the dependencies and packages installed in the application. This will help in installing dependencies while deploying the application. We can either use a `requirements.txt` file using `virtualenv` or a `Pipfile` using Pipenv. Both serve the same purpose but a bit differently. &#xA;&#xA;Assuming you are in an isolated virtual environment for this Django project, you can create a requirements.txt file using the below command:&#xA;&#xA;Make sure the virtualenv is activated before running the command:&#xA;&#xA;```&#xA;pip freeze &gt; requirements.txt&#xA;```&#xA;&#xA;This will create a simple text file that contains the package names along with the versions used in the current virtual environment. A simple Django requirements file would look something like this:&#xA;&#xA;```&#xA;asgiref==3.4.1&#xA;Django==3.2.11&#xA;pytz==2021.3&#xA;sqlparse==0.4.2&#xA;typing_extensions==4.0.1&#xA;```&#xA;&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1652614060461/kPTZ9R8Xp.png)&#xA;&#xA;This is vanilla Django without any additional dependencies but if you have integrated other functionalities like Django Rest Framework, PostgreSQL, Crispy Forms, Schedulers, etc. there might be additional dependencies that become quite crucial for the smooth working of the project.  &#xA;&#xA;If you are using pipenv, you don&#39;t need to make any efforts to manually activate and manage virtual environment, the dependencies are installed and taken care of by the pipenv installer. You just need to make sure to install any package with `pipenv install` and not `pip install` for better and improved package tracking.&#xA;&#xA;So, that&#39;s all we need to take care of packages and keep a list of these integrated packages for the project. You need to update the requirements.txt file every time you install any new package or modify the dependencies for a project. Simply use the command `pip freeze &gt; requirements.txt` in the activated virtual environment.  &#xA;&#xA;### Creating a Procfile&#xA;&#xA;Next up, we have the `Procfile`, a procfile is a special file that holds information about the processes to be run to start or activate the project. In our case, for django we need a web process that can manage the server.&#xA;&#xA;A Procfile is a simple file without any extension, make sure to write `Procfile` as it is as the name of the file in the root folder of the project. Inside the file add the following contents:&#xA;&#xA;**Procfile**&#xA;```Procfile&#xA;web: gunicorn &lt;project_name&gt;.wsgi&#xA;```&#xA;&#xA;As we can see we have defined the `web` process using `gunicorn`, [Gunicorn](https://pypi.org/project/gunicorn/) is a python package that helps in creating WSGI HTTP Server for the UNIX operating systems. So, we need to install the package and update the package dependency list. &#xA;&#xA;```&#xA;pip install gunicorn&#xA;&#xA;pip freeze &gt; requirements.txt&#xA;``` &#xA;&#xA;That would be good to go for creating and serving up the project while deploying the project on Heroku.&#xA;&#xA;## Creating a Heroku App&#xA;&#xA;A Heroku App is basically like your Django Project, you can create apps for deploying your django projects on Heroku. You are limited to 5 apps on the Free tier but that can be expanded on the paid plans.  &#xA;&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1652456732519/cyOQZ3UZK.png)&#xA;&#xA;The name of your heroku app should be unique globally, you need to try a few combinations before a good one fits your project. This name has no significance on your django project code, though it would be the name from which you would access the web application as a name `&lt;app-name&gt;.herokuapp.com`.   &#xA;&#xA;So, choose it wisely if you are not attaching a custom domain. You can attach a custom domain, you can navigate to the `domain` section in the settings tab. &#xA;&#xA;&#xA;## Setting up the database &#xA;&#xA;To set up and configure a database in django on Heroku, we need to manually acquire and attach a PostgreSQL add-on to the heroku app.&#xA;&#xA;- Firstly locate to the Resources Tab in your Heroku app.&#xA;- Search `postgres` in the Add-ons Search bar&#xA;- Click on the `Heroku Postgres` Add-on&#xA;- Submit the Order Form and you have the add-on enabled in the app.&#xA;&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1652456842273/ijeWsVdOf.png)&#xA;&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1652456877447/dLG30ac_m.png)&#xA;&#xA;Alternately, you can use the Heroku CLI,&#xA;&#xA;### Heroku CLI Setup&#xA;&#xA;You can use the Heroku CLI which is a command-line interface for managing and creating Heroku applications.  You need to first install the CLI by heading towards the [heroku documentation](https://devcenter.heroku.com/articles/heroku-command-line). Once the CLI is installed, you need to login into your Heroku account by entering the following command:&#xA;&#xA;```&#xA;heroku login&#xA;&#xA;``` &#xA;&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1652605604920/HnTr2KbTi.png)&#xA;&#xA;This will allow us to work with heroku commands and manage our heroku application from the command line itself. The below command will create a add-on for `heroku-postgres` for the application provided as the parameter options &#xA;&#xA;```&#xA;heroku addons:create heroku-postgresql:hobby-dev --app &lt;app_name&gt;&#xA;```&#xA;&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1652507166978/i1IJ5EGjJ.png)&#xA;&#xA;This should hopefully add a fresh instance of a postgres database for your heroku app. You can now configure the database for your project, we simply need the Database URL from the heroku app dashboard. We&#39;ll see how to configure the environment variables in Django for Heroku to keep your secrets like the `SECRET_KEY`, `DATABSE_URL`, etc. &#xA;&#xA;If you want MySQL as a database, you can check out the [ClearDB](https://devcenter.heroku.com/articles/cleardb) Add-On for Heroku to simply attach it like Postgres on your Heroku application. Also, if you wish to add [MongoDB](https://www.mongodb.com/compatibility/mongodb-and-django) into your Django application on Heroku, you can use [Object Rocket](https://devcenter.heroku.com/articles/ormongo)(OR Mongo). It is not available in the free tier though, unlike PostgreSQL and MySQL.&#xA;&#xA;## Configuring Environment Variables&#xA;&#xA;We need to keep our secrets for the django project out of the deployed code and in a safe place, we can create environment variables and keep them in a `.env` file which will be git-ignored. We do not want this `.env` file to be open source and thus should not be committed.  &#xA;&#xA;&#xA;&#xA;We first need to create a new secret key if you already have a GitHub repository, chances are you would have committed the default secret key open for the world to see, it is an insecure way of deploying django apps in production.&#xA;&#xA;So, open up a terminal and launch a python REPL:&#xA;&#xA;```&#xA;python&#xA;&#xA;import secrets&#xA;secrets.token_hex(24)&#xA;```&#xA;&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1652512239319/5AACaTGOD.png)&#xA;&#xA;This should generate a secret key that only you know now. So, just copy the key without the quotes and create a file `.env` in the root project folder. &#xA;&#xA;**.env**&#xA;```&#xA;SECRET_KEY=76419fd6885a677f802fd1d2b5acd0188e23e001042b05a8&#xA;```&#xA;&#xA;The `.env` file should also be added to the `.gitignore` file, so simply append the following in the `.gitignore` file&#xA;&#xA;```&#xA;.env&#xA;```&#xA;This file is only created to test the project locally, so we need to also make this key available on heroku. For doing that we need to add Config Variables to the heroku app. &#xA;&#xA;- Locate to the Settings Tab in your Heroku Application Dashboard&#xA;- We have the `Config Vars` section in the located tab&#xA;= We need to reveal those variables and we will be able to see all the variables.&#xA;&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1652456988713/5VM6E29_o.png)&#xA;&#xA;We already have a `DATABASE_URL` variable declared when we attached the `django-postgres` database to our application. We will now add one more variable to the Application, i.e. the `SECRET_KEY`. Simply, enter the name of the key and also enter the value of the key, so basically a key-value pair. Simply click on the `Add` button and this will add the variable to your application.&#xA;&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1652515244870/LRyPzJr41.png)&#xA;&#xA;You also need to copy the `DATABSE_URL` into our local setup file(`.env` file). Copy the Database URL and paste it into the `.env` file as follows:&#xA;&#xA;```env&#xA;DATABASE_URL=postgres://sjxgipufegmgsw:78cbb568e@ec2-52-4-104-184.compute-1.amazonaws.com:5432/dbmuget&#xA;```&#xA;The format for the postgres URL is as follows:&#xA;&#xA;```&#xA;postgresql://[user[:password]@][netloc][:port][/dbname]&#xA;```&#xA;&#xA;We have now created environment variables for our django application and also added config vars in the heroku app, we now need a way to parse these environment variables into the Django project.  &#xA;&#xA;### Parsing Environment variables using python-dotenv&#xA;&#xA;We will use [python-dotenv](https://pypi.org/project/python-dotenv/) to parse variables into the django settings configurations like `SECRET_KEY` and `DATABASES`. &#xA;&#xA;- Install `python-dotenv` with pip with the command :  &#xA;```&#xA;pip install python-dotenv&#xA;```&#xA;We need to then modify the default variables in the `settings.py` file. Firstly, we will load in the `.env` file for accessing the environment variables for the configuration of the project.&#xA;&#xA;Append the following code, to the top of the `settings.py` file, make sure don&#39;t override the configuration so remove unnecessary imports and configurations.&#xA;&#xA;``` python&#xA;# &lt;project_name&gt;/settings.py&#xA;&#xA;import os&#xA;from dotenv import load_dotenv&#xA;&#xA;BASE_DIR = Path(__file__).resolve().parent.parent&#xA;&#xA;load_dotenv(os.path.join(BASE_DIR, &#34;.env&#34;))&#xA;&#xA;```&#xA;&#xA;We have imported the package `dotenv` basically the `python-dotenv` into the `settings.py` file and the module `os` for loading the `.env` file. The `load_dotenv` function helps in loading the `key-value` pairs which are the configuration variables that can act as actual environment variables. We provide in a file to the [load_dotenv](https://saurabh-kumar.com/python-dotenv/) function which is the `.env` file in our case, you can pick up any location for the `.env` file but make sure to change the location while parsing the file into the `load_dotenv` function. &#xA;&#xA;After loading the variables into the `settings.py` file, we now need to access those variables and set the appropriate variables the configuration from the variables received from the `load_dotenv` function. The `os.getenv` function to access the environment variables. The `os.getenv` function takes a parameter as the `key` for the environment variable and returns the value of the environment variable.&#xA;&#xA;``` python&#xA;SECRET_KEY = os.getenv(&#34;SECRET_KEY&#34;)&#xA;```&#xA;&#xA;We have secretly configured the `SECRET_KEY` for the django project. If you have any other variables as simple key-value pairs like `AUTH` passwords, username, etc. you can use this method to get the configuration variables. &#xA;&#xA;### Loading Database configuration&#xA;&#xA;Databases are a bit different as compared to other simple configurations in django. We need to make a few adjustments to the default database configuration. We will install another package `dj-database-url` to configure `DATABASE_URL`. Since the databse_url has a few components we need a way to extract the details like the `hostname`, `port`, `database_name`, and `password`. Using the `dj-database-url` package we have a few functions that can serve the purpose.&#xA;&#xA;```&#xA;pip install dj-database-url&#xA;```&#xA;&#xA;At the end of your `settings.py` file, append the following code. &#xA;&#xA;``` python&#xA;import dj_database_url&#xA;&#xA;DATABASE_URL = os.getenv(&#34;DATABASE_URL&#34;)&#xA;&#xA;DATABASES = {&#xA;    &#34;default&#34;: dj_database_url.config(default=DATABASE_URL, conn_max_age=1800),&#xA;}&#xA;```&#xA;&#xA;We would need an adapter for making migrations to the `PostgreSQL` database i.e. the `psycopg2` package. This is a mandatory step if you are working with `postgres` database. This can be installed with the simple pip install:&#xA;&#xA;```&#xA;pip install psycopg2&#xA;&#xA;# If it does not work try&#xA;pip install psycopg2-binary&#xA;&#xA;&#xA;# if still error persists try installing setuptools&#xA;pip install -U setuptools&#xA;pip install psycopg2&#xA;```&#xA;&#xA;Now, that we have configured the database, we can now apply migrations to the fresh database of postgres provided by heroku. We will simply run the migrate command and in the heroku app the PostgreSQL database would have been modified and an appropriate schema should be applied.&#xA;&#xA;```&#xA;python manage.py migrate&#xA;```&#xA;&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1652602284553/oTtGev28-.png)&#xA;&#xA;Make sure to update the `requirements.txt` file before pushing the project to Heroku for making sure everything works as expected. Since we have installed a few additional packages that are directly used in the `settings.py` file, we need to run the `pip freeze` command to update the `requiremnets.txt` file.&#xA;&#xA;## Serving Static Files&#xA;&#xA;Now, if you have some static files like `CSS`, `Javascript`, or `images`, you need to configure the staticfiles in order to serve them from the heroku server. We will require another config variable for collecting the static files from the selected repository. &#xA;&#xA;```python&#xA;&#xA;STATIC_URL = &#34;static/&#34;&#xA;STATICFILES_DIRS = [os.path.join(BASE_DIR, &#34;static&#34;)]&#xA;STATIC_ROOT = os.path.join(BASE_DIR, &#34;staticfiles&#34;)&#xA;&#xA;``` &#xA;&#xA;Here, if you have served your static files from the `static` folder in the root directory of your django project, you can add the above code in the settings.py file. We will collect all static files in the folder along with the default static files provided by django in the `staticfiles` directory. Run the following command if you want to test whether the static files are properly collected and served.&#xA;&#xA;```&#xA;python manage.py collectstatic &#xA;```&#xA;&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1652600828657/JgL4nLuiL.png)&#xA;&#xA;So, this command will collect all the static files and store them in a single place. We see that the files from the admin section are also copied as well as the custom static files from the project configuration. Now, we can move on to set the config variable for the heroku app.&#xA;&#xA;```&#xA;DISABLE_COLLECTSTATIC = 0&#xA;```&#xA;&#xA;We can set the `DISABLE_COLLECTSTATIC` variable as `0` or `1` indicating whether to disable it or not. We have currently enabled the static file collection while deploying the app but you can set it to `1` to disable the collection of static files.&#xA;&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1652613798420/mbqzf1Kqd.png)&#xA;&#xA;Since I first tested the application on heroku, the static files don&#39;t work as expected, we need another package to make sure the staticfiles are served property. We will be installing the `whitenoise` package which serves as the middleware for serving the static files.&#xA;&#xA;```&#xA;pip install whitenoise&#xA;```&#xA;&#xA;Add the whitenoise middleware `whitenoise.middleware.WhiteNoiseMiddleware` to the `MIDDLEWARE` list in the `settings.py` file.&#xA;&#xA;````python&#xA;MIDDLEWARE = [&#xA;...&#xA;...&#xA;...&#xA;    &#39;whitenoise.middleware.WhiteNoiseMiddleware&#39;,&#xA;]&#xA;&#xA;```&#xA;&#xA;That should be enough to make the most of the deployment on heroku. You will have to make a few adjustments as per your requirements and project.&#xA;&#xA;## Deploy from GitHub&#xA;&#xA;We are now all set to deploy the application on Heroku, we can use the `Connect to GitHub` or `Heroku CLI` to push the code into production. Heroku CLI is quite easy with a few sets of commands but if your project is deployed on GitHub, you can straightaway let the deployment start the build on a push to a specific branch. This becomes quite automotive and easy to scale while deploying a large-scale application. &#xA;&#xA;```&#xA;pip freeze &gt; requirements.txt&#xA;```&#xA;&#xA;This step is quite important because you need to make sure that all the packages are listed in the `requirements.txt` file else you will have to wait for the build to fail and redeploy.&#xA;&#xA;Make sure the server is running first on your local machine, remember the server will be set up from scratch but the database will already have applied migrations if you have applied migrations before after connecting the Heroku Postgres database.&#xA; &#xA;```&#xA;python manage.py collectstatic&#xA;&#xA;python manage.py runserver&#xA;```&#xA;&#xA;This will set up the origin of the remote repository that will be pushing the project code. Next, make sure to commit the code which will contain all the required stuff for deploying the code.&#xA;&#xA;Checklist for deploying the code&#xA;&#xA;```&#xA;- requirements.txt&#xA;- Procfile&#xA;- runtime.txt&#xA;- django-project&#xA;- environment variables / config variables &#xA;- static file configuration&#xA;- database configuration&#xA;- migrate schema of database &#xA;- gitignore file for ignoring virtualenvs, .env file, staticfiles, etc&#xA;```&#xA;&#xA;here&#39;s a sample `.gitignore` for a minimal django project.&#xA;&#xA;```gitignore&#xA;.env/&#xA;.venv/&#xA;env/&#xA;venv/&#xA;*.env&#xA;&#xA;*.pyc&#xA;db.sqlite3&#xA;staticfiles/&#xA;```&#xA;&#xA;If you want a full-fledged `.gitignore` for a complex django project, you can take the reference from Jose Padilla&#39;s [gitignore Template](https://github.com/jpadilla/django-project-template/blob/master/.gitignore) for a django project.  &#xA;&#xA;### Git Commit the Django Project&#xA;```&#xA;git status &#xA;&#xA;git add .&#xA;&#xA;git commit -m &#34;config for heroku deployment&#34;&#xA;```&#xA;Carefully check the status of the git repository before committing and make sure you don&#39;t forget anything by mistake, it won&#39;t a big problem but it would mess up the build process.&#xA;&#xA;&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1652613991525/hxQgtGOoM.png)&#xA;&#xA;After committing the code, we can now push the code to GitHub. We first need to set the remote repository reference to be able to push the code to it. &#xA;&#xA;```&#xA;git remote add origin https://github.com/&lt;username&gt;/&lt;repo_name&gt;&#xA;```&#xA;This will set up the `origin` as the remote repository on GitHub. Once the remote repository is created, we can move into the push of the git repository that will trigger the build. First, navigate to the `Deploy` section in the heroku app&#39;s dashboard where we want to connect the `GitHub` repository and allow the automatic deploy from a branch in this case we have chosen the `main` branch.&#xA;&#xA;Due to some `Heroku` Internal Server Issues, the GitHub integration seems to have broken and isn&#39;t working as of May 2022, but it might work later. &#xA;&#xA;Below is a screenshot of my previous project deployed to Heroku using a GitHub repository.&#xA;&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1652605497382/5VuQUQ0t0.png)&#xA;&#xA;```&#xA;git push origin main&#xA;```&#xA;&#xA;This will prompt you for your GitHub credentials and will deploy the commits to the remote repository on GitHub. This push on the main branch should also trigger the build process of the heroku app for this django project. You can navigate to the Activity section for the Build logs. &#xA;&#xA;If you have followed the article well, and your repository has all the correct configurations, the build will succeed, else chances are you might have missed a few things and the app might have crashed. You can debug your application build with the simple heroku CLI command:&#xA;&#xA;```&#xA;heroku logs --tail -a &lt;app_name&gt;&#xA;```&#xA;&#xA;This can be quite handy and saves a lot of time in understanding what went wrong in the build. It might be related to database migration, static files, python package not found, and some silly mistakes and errors that can be fixed after committing the code and pushing it to GitHub again.&#xA;&#xA;If you do not want a GitHub repository, you can directly push the code from the local git repository to the remote heroku app center. This will require us the Heroku CLI.&#xA;&#xA;## Heroku CLI&#xA;&#xA;We can use the heroku CLI for pushing the code via the simple git repository. We can push the references via the branch and a remote repository on heroku to build our app.  For this, we assume you have heroku installed and logged in. We will require the django project code and heroku cli to build the django web application.&#xA;&#xA;```bash&#xA;heroku git:remote -a &lt;heroku_app_name&gt;&#xA;&#xA;# for my case&#xA;heroku git:remote -a blog-django-dep&#xA;```&#xA;&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1652614221069/vCAKD0zsz.png)&#xA;&#xA;After this, you can commit your code and the project as git repository. We have added the remote repository location on heroku, we can now simply push the code to the remote repository.&#xA;&#xA;```&#xA;git push heroku main&#xA;```&#xA;&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1652614125785/uEzFQ9VvQ.png)&#xA;&#xA;Here, `heroku` is the remote repository location and `main` is the branch of the repository. This will push the code to the repository and thereafter create a build to deploy the Django project as a Heroku application.&#xA;&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1652614381808/kYTmB3EO2p.png)&#xA;&#xA;You can hit the `Open App` button on the top right corner and there should be your deployed Django application. &#xA;&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1652610395538/xjUiODhoK.png)&#xA;&#xA;&#xA;## A Few Tricks and Gotchas&#xA;&#xA;There are a few tricks and issues that you might pop into while deploying a django project on heroku, especially the build process. It requires a few iterations to get the complete app setup.&#xA;&#xA;### Run command from the Dashboard console&#xA;&#xA;If you don&#39;t have heroku CLI set up and want to fix a few things on the pushed code to the heroku app, you can use the `Run Console` option from the `More` Tab on the top right corner of theApplication dashboard. This is a great way to run migrations, configure static files or tweak a few things here and there without messing up the code on GitHub or the remote git repositories. &#xA;&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1652614775294/lgDPwr2yr.png)&#xA;&#xA;&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1652614821950/uTzQVB8sC.png)&#xA;&#xA;&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1652614845269/BkZhu3SGH.png)&#xA;&#xA;### Deploy with Docker &#xA;&#xA;You can even use the docker container to deploy a Django application on Heroku. It is a great way of learning a lot of deployment strategies and techniques using Docker. You&#39;ll get familiar with interesting concepts like virtualization, and containerization, and also learn Docker on the way. You can follow this tutorial on [Deploying Django applications with Docker on Heroku](https://testdriven.io/blog/deploying-django-to-heroku-with-docker/). Also, you can check out the official Heroku documentation for [deploying python applications](https://devcenter.heroku.com/articles/deploying-python).&#xA;&#xA;### What are Dynos?&#xA;&#xA;Dynos are simply web processes or workers that serve your web application. Dynos in Heroku are allocated based on the build process, once the slug is created a dyno is created as it runs on a VM container. This simply means there are limitations on how to use the web application and its sleep process. The hobby tier is sufficient for normal testing projects and side projects though you will have to pay and move into advance tiers to increase the dyno allocations and scaling of those web processes. &#xA;&#xA;It&#39;s not a simple thing to understand but to keep it simple, it might be a container to process the client&#39;s request and serve the page for a finite duration of the interaction. Also, your application will sleep after half an hour, if you try to reload the application every half an hour it will consume your resource allocation for the month and this is how the tiers and divided for paid services on Heroku. You can check out the detail over [here](https://www.heroku.com/pricing#containers).&#xA;&#xA;## Conclusion&#xA;&#xA;So, that is one of the ways we can deploy a Django application on Heroku with the PostgreSQL database. You can find the [django-blog project] on [GitHub] for following along with the deployment process.  In the next few parts of the series, we will be hopefully covering other platforms where you can deploy a Django o application.&#xA;&#xA;Hopefully, you liked the above tutorial, if you have any questions. feedback, or queries, you can contact me on the Social handles provided below. Thank you for reading and till the next post Happy Coding :) &#xA;</content>
      <type>posts</type>
    </item>
    <item>
      <title>Autoformat Python file with Black after saving in Vim</title>
      <link>meetgor.com/vim-python-black-autoformat</link>
      <description>Automatically format python code in the current file after saving the file in Vim.</description>
      <pubDate>Tue, 29 Mar 2022 00:00:00 UTC</pubDate>
      <content>If you are like me who writes Python very badly, it has empty lines with whitespaces, no proper format in assigning variables, not formatted according to [PEP 8](https://peps.python.org/pep-0008/) standards, and you use Vim as your text editor then my friend you need a autocmd badly for it.&#xA;&#xA;## Install Black in Python&#xA;&#xA;Install the [black](https://pypi.org/project/black/) package in python globally or locally as per your preferences.&#xA;&#xA;```&#xA;pip install black&#xA;```&#xA;&#xA;OR with pipx&#xA;&#xA;```&#xA;pipx install black&#xA;```&#xA;&#xA;For a detailed guide about running packages with pipx head toward my article on [pipx](https://mr-destructive.github.io/techstructive-blog/pipx-intro/).&#xA;&#xA;## Set up Autocmd in Vim&#xA;&#xA;We can set up a autocmd. What is a autocmd? It is about running commands when certain events occur like running a command when a file is saved, a buffer is opened or closed, and so on. What we want is to run the black command from the shell when the current file is saved. &#xA;&#xA;So, we can create a autocmd as follows:&#xA;&#xA;```vimscript&#xA;autocmd BufWritePost * !black %&#xA;```&#xA;&#xA;Now, this will run when any type of file is saved, so we will make it specific to python by adding a `*.py` to add in the autocmd.&#xA;&#xA;```vimscript&#xA;autocmd BufWritePost *.py !black %&#xA;```&#xA;&#xA;This works, but it gives a prompt after the command has been executed, to run the command silently we can simply add the silent keyword before the execution of the command from the shell.&#xA;&#xA;```vimscript&#xA;autocmd BufWritePost *.py silent !black %&#xA;```&#xA;&#xA;This looks perfect! &#xA;&#xA;But still, we need to add a auto-group(`augroup`) that groups the autocmds and by adding `autocmd!` it will clear all the commands from the group. &#xA;&#xA;```vimscript&#xA;augroup python_format&#xA;    autocmd!&#xA;    autocmd BufWritePost *.py silent !black %&#xA;augroup end&#xA;```&#xA;We can now add it to the vimrc to work all the time.&#xA;&#xA;## Using pipx &#xA;&#xA;If you have used pipx to install black, you need to setup the autocmd a bit differently. &#xA;&#xA;```vimscript&#xA;autocmd BufWritePost *.py silent !pipx run black %&#xA;```&#xA;&#xA;It might be a bit slower than running with global installation, but it is a neat way to run python package. &#xA;&#xA;So, that&#39;s it we can now write clean and safe python code without breaking a sweat in Vim. Happy Coding :)&#xA;</content>
      <type>til</type>
    </item>
    <item>
      <title>Python: Search and Replace in File</title>
      <link>meetgor.com/python-search-replace-file</link>
      <description>Perform search-replace operation in a file using python</description>
      <pubDate>Mon, 28 Mar 2022 00:00:00 UTC</pubDate>
      <content>&#xA;## Searching and Replacing the text in a File&#xA;&#xA;Using simple python semantics, we can perform search and replace in a file. Firstly, we will define the file name, along with the words to search and replace. After defining the sets of variables, we will open the file in `r+` mode i.e. we can perform read as well as write operations in the file.&#xA;&#xA;We will store the entire file contents using the [read](https://docs.python.org/3/tutorial/inputoutput.html#reading-and-writing-files) function, the contents of file are now stored in the form of a string. We further can set the position of the cursor or the current position in the file using the [seek](https://python-reference.readthedocs.io/en/latest/docs/file/seek.html) function. The seek function takes in a optional parameter as the position to set for reading/writing of file. Using the [truncate](https://python-reference.readthedocs.io/en/latest/docs/file/truncate.html) function, we can clear all the contents of the file.&#xA;&#xA;Finally, we generate the content by replacing the words i.e. the old word with the new word from the string which we store the contents. After replacing the content in the string, we write the string variable into the file and hence the substitution was performed in the text file.&#xA;&#xA;```python&#xA;file_name = &#39;temp.txt&#39;&#xA;old_text = &#39;foo&#39;&#xA;new_text = &#39;python&#39;&#xA;&#xA;with open(file_name, &#34;r+&#34;) as fname:&#xA;    lines = fname.read()&#xA;    fname.seek(0)&#xA;    fname.truncate(0)&#xA;    subs = lines.replace(old_text, new_text)&#xA;    fname.write(subs)&#xA;```&#xA;&#xA;![Python Search Replace in File](https://res.cloudinary.com/techstructive-blog/image/upload/v1648479344/blog-media/cstvfdlazyfriwvnilju.png)&#xA;&#xA;</content>
      <type>til</type>
    </item>
    <item>
      <title>Feedparser: Python package for reading RSS feeds</title>
      <link>meetgor.com/python-feedparser</link>
      <description>Read and extract content from RSS feeds in python using feedparser</description>
      <pubDate>Sat, 26 Mar 2022 00:00:00 UTC</pubDate>
      <content>&#xA;## Introduction&#xA;&#xA;[Feedparser](https://pypi.org/project/feedparser/) is a simple but powerful python package that can be used to extract information about a specific webpage or a publication with its RSS feed(not only RSS). By providing the RSS feed link, we can get structured information in the form of python lists and dictionaries. It can be basically used in a pythonic way to read RSS feeds, it is really simple to use and it even normalizes different types of feeds.&#xA;&#xA;Today, we will be taking a look at the feedparser package in python and how to extract information from a given RSS feed.&#xA;&#xA;## What is feedparser&#xA;&#xA;Feedparser is a python package for parsing feeds of almost any type such as RSS, Atom, RDF, etc. It is a package that allows us to parse or extract information using python semantics. For example, all the latest posts from a given blog can be accessed on a list in python, further different attributes like links, images, titles, descriptions, can be accessed within a dictionary as key-value pairs. &#xA;&#xA;## Installing feedparser&#xA;&#xA;As feedparser is a python package you can install it with pip very easily.&#xA;&#xA;```&#xA;pip install feedparser&#xA;```&#xA;&#xA;This will install feedparser in your respective python environment, it can be a virtual environment or a global environment. &#xA;&#xA;&#xA;## Using feedparser&#xA;&#xA;To test out feedparser, you can open up a python repl, in the environment where you installed the Feedparser package.&#xA;&#xA;```&#xA;python&#xA;```&#xA;&#xA;Firstly import the package.&#xA;&#xA;```python&#xA;import feedparser&#xA;```&#xA;&#xA;Now, we can use the module in our application to get all of the functions or methods from the package.&#xA;&#xA;## Parse an RSS feed URL&#xA;&#xA;To parse an RSS feed link, we can simply use the `parse` function from the feedparser package. The [parse](https://feedparser.readthedocs.io/en/latest/introduction.html) function takes in a string that can be a URL or a file path. Generally, the URL seems to be more useful. So, we can look up any RSS feed on the internet like your blog&#39;s feed, publications feeds, and so on. &#xA;&#xA;```python&#xA;feedparser.parse(&#34;url_of_the_rss_feed&#34;)&#xA;```&#xA;&#xA;The parse function basically fetches the feed from the provided URL or the file. It extracts the feed in a systematic way storing each piece of information in a structured format. At the high level, it returns a dictionary with a few key-value pairs. Further, each key might have a list or nested dictionaries in it. The key identifiers are named in a uniform manner for any feed you parse in the function. Though there might be a few cases where there might be additional information to be parsed, it can even add more information ad shape the structure accordingly.&#xA;&#xA;This will give you a dictionary in python, that can have more or less similar keys. The most common keys that can be used in extracting information are `entries` and `feed`. We can get all the keys associated with a feed that is parsed using the `keys` function.&#xA;&#xA;```python&#xA;feedparser.parse(&#34;url_of_the_rss_feed&#34;).keys()&#xA;```&#xA;&#xA;![Feedparser Keys](https://res.cloudinary.com/techstructive-blog/image/upload/v1648370871/blog-media/ph6bsxobyifqmusumirx.png)&#xA;&#xA;The keys function basically gets all the keys in the dictionary in python.&#xA;&#xA;```&#xA;&gt;&gt;&gt; feedparser.parse(&#34;https://dev.to/feed/&#34;).keys()&#xA;dict_keys([&#39;bozo&#39;, &#39;entries&#39;, &#39;feed&#39;, &#39;headers&#39;, &#39;etag&#39;, &#39;href&#39;, &#39;status&#39;, &#39;encoding&#39;, &#39;version&#39;, &#39;namespaces&#39;])&#xA;```   &#xA;&#xA;This will give out a list of all the keys in the feed which we have parsed from the RSS feed previously. From this list of keys, we can extract the required information from the feed.&#xA;&#xA;Before we extract content from the feed, we can store the dictionary that we get from calling the parse function. We can assign it to a variable and store the dictionary for later use.&#xA;&#xA;```python&#xA;feed = feedparser.parse(&#34;url_of_the_rss_feed&#34;)&#xA;```&#xA;&#xA;&#xA;## Extract the contents from the feed&#xA;&#xA;Now, we have the dictionary of the feed, we can easily access the values from the listed keys. We can get the list of all the posts/podcasts/entries or any other form of content the feed is serving for from the `entries` key in the dictionary. &#xA;&#xA;To get more information and the most possible keys in the returned dictionary, you can refer to the feedparser [reference list](https://feedparser.readthedocs.io/en/latest/reference.html)&#xA;&#xA;### Access Articles from Feed&#xA;&#xA;To access the articles from the feed, we can access those as a list of the articles. Using the `entries` key in the dictonary as follows:&#xA;&#xA;```python&#xA;feedparser.parse(&#34;url_of_the_rss_feed&#34;)[&#34;entries&#34;]&#xA;&#xA;OR&#xA;&#xA;feedparser.parse(&#34;url_of_the_rss_feed&#34;).entries&#xA;```&#xA;&#xA;If you have already defined a variable set to the parse function, you can use that for more efficient extraction.&#xA;&#xA;```python&#xA;feed = feedparser.parse(&#34;url_of_the_rss_feed&#34;)&#xA;&#xA;feed[&#39;entries&#39;]&#xA;&#xA;OR &#xA;&#xA;feed.entries&#xA;```&#xA;&#xA;### Get Number of Articles/Entries from Feed&#xA;&#xA;To get the number of entries in the list, we can simply use the len function in python.&#xA;&#xA;```python&#xA;len(feed.entries)&#xA;&#xA;OR &#xA;&#xA;len(feedparser.parse(&#34;url_of_the_rss_feed&#34;).entries)&#xA;```&#xA;&#xA;![Feedparser Number of Entries](https://res.cloudinary.com/techstructive-blog/image/upload/v1648371042/blog-media/didijxcvsgvl4scrnhje.png)&#xA;&#xA;This gives us the number of entries in the provided feed. This is basically the list that stores all the content from the publication/website. So, we can iterate over the list and find all the different attributes we can extract.&#xA;&#xA;### Get details of the entries from the feed&#xA;&#xA;To get detail information about a particular article/entry in the feed, we can iterate over the `feed.entries` list and access what we require. &#xA;&#xA;So, we will iterate over the entries and simply print those entries one by one to inspect what and how we can extract them. &#xA;&#xA;```python&#xA;for entry in feed.entries:&#xA;  print(entry)&#xA;```&#xA;&#xA;It turns out that every entry in the list is a dictionary again containing a few key-value pairs like `title`, `summary`, `link`, etc. To get a clear idea of those keys we can again use the keys function in python.&#xA;&#xA;```python&#xA;feed = feedparser.parse(&#34;url_of_the_rss_feed&#34;)&#xA;print(feed.entries[0].keys())&#xA;```&#xA;&#xA;![Feedparser Entries Keys](https://res.cloudinary.com/techstructive-blog/image/upload/v1648371221/blog-media/c8uog85goe9jzrzl1pq1.png)&#xA;&#xA;```python&#xA;&gt;&gt;&gt; feed.entries[0].keys()&#xA;dict_keys([&#39;title&#39;, &#39;title_detail&#39;, &#39;authors&#39;, &#39;author&#39;, &#39;author_detail&#39;, &#39;published&#39;, &#39;published_parsed&#39;, &#39;links&#39;, &#39;link&#39;, &#39;id&#39;, &#39;guidislink&#39;, &#39;summary&#39;, &#39;summary_detail&#39;, &#39;tags&#39;])&#xA;```&#xA;&#xA;Now, we have all the keys associated with the entries we can now extract the specific details like the content, like `title`, `author`, `summary_detail`(actual content in this case).  &#xA;&#xA;Though this might not be the same for all RSS feeds, it might be very similar and a matter of using the right keyword for the associated keys in the list of dictionaries.  &#xA;&#xA;Let&#39;s say, we want to print out the titles of all the entries in the feed, we can do that by iterating over the entries list and fetching the title from the iterator as `entry.title` if `entry` is the iterator.&#xA;&#xA;```python&#xA;for entry in feed.entries:&#xA;  print(entry.title)&#xA;```&#xA;&#xA;![Feedparser List of Entries](https://res.cloudinary.com/techstructive-blog/image/upload/v1648372532/blog-media/lhofdzmr3ks0fuut7pxm.png)&#xA;&#xA;Similarly, we will get the links of the entries using the link key in the dictionary.&#xA;&#xA;```python&#xA;for entry in feed.entries:&#xA;  print(entry.link)&#xA;```&#xA;&#xA;### Get information about the Website/Publication&#xA;&#xA;To get the metadata about the information you are extracting from i.e. the website or any publication, we can use the key `feed`. This key stores another dictionary as its value which might have information like `title`, `description` or `subtitle`, `canonical_url`, or any other data related to the website company.&#xA;&#xA;```python&#xA;feed.feed&#xA;&#xA;or&#xA;&#xA;feedparser.parse(&#34;url_of_the_rss_feed&#34;).feed&#xA;```&#xA;&#xA;![Feedparser Feed](https://res.cloudinary.com/techstructive-blog/image/upload/v1648373487/blog-media/r7hiojfdrtrjqfhkjbdt.png)&#xA;&#xA;From this dictionary, we can now simply extract the specific information from the keys. But first, as in the previous examples, we need a clear idea of what are the keys in the dictionary where we can extract the specific value.&#xA;&#xA;```python&#xA;feed.feed.keys()&#xA;&#xA;or&#xA;&#xA;feedparser.parse(&#34;url_of_the_rss_feed&#34;).feed.keys()&#xA;```&#xA;&#xA;Using the keys like `title`, `links`, `subtitle`, we can get the information on the website/company level and not related to the specific post in the entries list. &#xA;&#xA;```python&#xA;# get the title of the webpage/publication&#xA;feed.feed.title&#xA;&#xA;# get the links associated with the webpage&#xA;feed.feed.links&#xA;&#xA;# get the cover-image for the webpage&#xA;feed.feed.image&#xA;``` &#xA;&#xA;You can further get information specific to your feed. &#xA;&#xA;## Checking for keys existence in the dictionary of feed&#xA;&#xA;We also need to check for the existence of a key in a dictionary in the provided feed, this can be a good problem if we are parsing multiple RSS feeds which might have a different structure. This problem occurred to me in the making of [podevcast](https://podevcast.netlify.app) where I had to parse multiple RSS feeds from different RSS generators. Some of the feeds had the cover image but most of them didn&#39;t. So, we need to make sure we have a check over those missing keys.&#xA;&#xA;```python&#xA;feedlist = [&#39;https://freecodecamp.libsyn.com/rss&#39;, &#39;https://feeds.devpods.dev/devdiscuss_podcast.xml&#39;]&#xA;&#xA;for feed in feedlist:&#xA;    feed = feedparser.parse(feed)&#xA;&#xA;    print(feed.entries[0].keys())&#xA;    for entry in feed.entries:&#xA;        if &#39;image&#39; in entry:&#xA;            image_url = entry.image&#xA;        else:&#xA;            image_url = feed.feed.image&#xA;        &#xA;        #print(image_url)&#xA;```&#xA;&#xA;```python&#xA;&gt;&gt;&gt; feedlist = [&#39;https://freecodecamp.libsyn.com/rss&#39;, &#39;https://feeds.devpods.dev/devdiscuss_podcast.xml&#39;]&#xA;&gt;&gt;&gt; for feed in feedlist:&#xA;...     feed = feedparser.parse(feed)&#xA;...     for entry in feed.entries:&#xA;...             if &#39;image&#39; in entry:&#xA;...                     image_url = entry.image&#xA;...             else:&#xA;...                     image_url = feed.feed.image&#xA;...     print(feed.entries[0].keys())&#xA;...&#xA;&#xA;dict_keys([&#39;title&#39;, &#39;title_detail&#39;, &#39;itunes_title&#39;, &#39;published&#39;, &#39;published_parsed&#39;, &#39;id&#39;, &#39;guidislink&#39;, &#39;links&#39;, &#39;link&#39;, &#39;image&#39;, &#39;summary&#39;, &#39;summary_detail&#39;, &#39;content&#39;, &#39;itunes_duration&#39;, &#39;itunes_explicit&#39;, &#39;subtitle&#39;, &#39;subtitle_detail&#39;, &#39;itunes_episode&#39;, &#39;itunes_episodetype&#39;, &#39;authors&#39;, &#39;author&#39;, &#39;author_detail&#39;])&#xA;&#xA;dict_keys([&#39;title&#39;, &#39;title_detail&#39;, &#39;links&#39;, &#39;link&#39;, &#39;published&#39;, &#39;published_parsed&#39;, &#39;id&#39;, &#39;guidislink&#39;, &#39;tags&#39;, &#39;summary&#39;, &#39;summary_detail&#39;, &#39;content&#39;, &#39;subtitle&#39;, &#39;subtitle_detail&#39;, &#39;authors&#39;, &#39;author&#39;, &#39;author_detail&#39;, &#39;itunes_explicit&#39;, &#39;itunes_duration&#39;])&#xA;```&#xA;&#xA;As we can see we do not have an image key in the second RSS feed which means each entry doesn&#39;t have a unique cover image, so we have to fetch the image from the `feed` key then the `image` key in the entries list.&#xA;&#xA;![Feedparser Cover Image Demo](https://res.cloudinary.com/techstructive-blog/image/upload/v1648373275/blog-media/fzdqie5dubigxzfhtv2x.png)&#xA;&#xA;&#xA;As we can see here, the image_url will pick up the `image` key in the dictionary if it is present else we will assign it to another URL which is the website/podcast cover image. This is how we handle exceptions in providing the keys when there are multiple feeds to be extracted though they are quite similar, they will have subtle changes like this that need to be handled and taken care of.&#xA;&#xA;&#xA;## Conclusion&#xA;&#xA;From this little article, we were able to understand and use the feedparser Python package which can be used to extract information from different feeds. We saw how to extract contents for the entries, a number of entries in the feed, check for keys in the dictionary, and so on. Using Python&#39;s Feedparser package, some of the projects I have created include:&#xA;&#xA;- [podevcast](https://podevcast.netlify.app)&#xA;- [dailydotdev-bookmark-cli](https://pypi.org/project/dailydotdev-bookmark-cli/)&#xA;- [Django Newsletter](https://github.com/Mr-Destructive/newsletter)&#xA;&#xA;For further reading, you can specifically target a feed type by getting the appropriate methods from the feedparser [documentation](https://feedparser.readthedocs.io/en/latest/)&#xA;&#xA;Thank you for reading, if you have any suggestions, additions, feedback, please let me know in the comments or my social handles below. Hope you enjoyed reading. Happy Coding :)&#xA;</content>
      <type>posts</type>
    </item>
    <item>
      <title>Pipx: A python package consumption tool for CLI packages</title>
      <link>meetgor.com/pipx-intro</link>
      <description>Exploring the pipx package in python to run CLI tools globally in an isolated environment</description>
      <pubDate>Sun, 20 Mar 2022 00:00:00 UTC</pubDate>
      <content>&#xA;## Introduction&#xA;&#xA;Previously, I explored the [pipenv](https://mr-destructive.github.io/techstructive-blog/pipenv-intro/) as a python package management tool and this week it is time for exploring a python CLI package isolation tool called `pipx`. It is a really simple and powerful tool for running commands as an executable from an isolated environment. Those commands should be associated with a python package that has CLI. In pipx, we install the package once and we can use the package anywhere on our system isolated from other virtual environments. &#xA;&#xA;In this article, We will explore the pipx package/tool in python. From installation to setting up your environment and removing some friction in your python workflow. This won&#39;t be an in-depth guide of pipx, though we would cover a few python packages that can be easily used in your environment.&#xA;&#xA;## What is Pipx&#xA;&#xA;Pipx is a python package that works similar to `pip` but it is quite specific to the usage. It can run CLI commands of any python package from anywhere on your system. It uses its own virtual environment for managing the packages and the python version. &#xA;&#xA;**NOTE**&#xA;&#xA;- Pipx is a tool to install and execute CLI commands provided in the python packages&#xA;- Pipx is not a python package management tool like pip or pipenv.&#xA;&#xA;Pipx is similar to `npx` for nodejs. Though the major difference is that pipx runs and installs all packages/tools globally unlike npx. &#xA;&#xA;&#xA;## Install Pipx&#xA;&#xA;**Pipx requires Python 3.6 or above.**&#xA;&#xA;- You can install it normally like a python package with pip:&#xA;&#xA;```&#xA;pip install pipx&#xA;```&#xA;&#xA;To find out if pipx was successfully installed, you can simply type in the command:&#xA;&#xA;```&#xA;pipx --version&#xA;```&#xA;&#xA;If it gives a number and no errors, it has been successfully installed in your system globally.&#xA;&#xA;## Pipx Commands &#xA;&#xA;The primary commands that pipx can use are:&#xA;&#xA;1. pipx install&#xA;2. pipx list&#xA;3. pipx run&#xA;4. pipx inject&#xA;5. pipx uninstall&#xA;&#xA;For further command options for a specific use case, you can use the `pipx -h` command to get the detailed list of commands and options available in pipx.&#xA;&#xA;Also, the documentation of pipx is really incredibly beginner-friendly. You can follow up with the article from the [documentation](https://pypa.github.io/pipx/) webpage or the [GitHub](https://github.com/pypa/pipx/) repository. The documentation and the webpage are simple single-page websites that really make learning the tool easier and it also has a well-documented package.&#xA;&#xA;### Pipx Install Command&#xA;&#xA;Pipx can install packages in a virtual environment specific to the package provided. This means that you will have different virtual envs for each package you install and not a single virtual env for a project, it creates and makes the package venvs accessible globally. The next step after installing the package in a different venv is to make that package commands accessible via the PATH environment variable. &#xA;&#xA;```&#xA;pipx install &lt;package_name&gt;&#xA;```&#xA;&#xA;If say we install [pgcli](https://pypi.org/project/pgcli/), a package for interacting with postgres database using python in the Command line. We will simply enter the following commands:&#xA;&#xA;```&#xA;pipx install pgcli&#xA;```&#xA;&#xA;![install package with pipx](https://res.cloudinary.com/techstructive-blog/image/upload/v1647783261/blog-media/du830o3fbqogvkaesxnq.png)&#xA;&#xA;We can use the package pgcli globally in our system. So, we have access to the databases in the local Postgres server. We can run the commands as normally as we want using the pgcli by just prefixing with `pipx run`.&#xA;&#xA;```&#xA;pipx run pgcli &lt;local_database_name&gt; -U postgres&#xA;```&#xA;&#xA;![PGCLI demonstration GIF](https://res.cloudinary.com/techstructive-blog/image/upload/v1647782221/blog-media/dfpwlxkh5ybqj5pdos8d.gif)&#xA;&#xA;This is a really cool way to interact with CLI applications without installing separately or globally, using pipx the virtual environment for the specific package makes it a clean and persistent behavior for running the commands anywhere in the system.&#xA;&#xA;If you want to know more about pgcli tool/package in Python, you can it&#39;s [documentation](https://www.pgcli.com/docs) webpage or the [GitHub](https://github.com/dbcli/pgcli) repository.&#xA;&#xA;#### Pipx Default PATH&#xA;&#xA;The default path at which pipx stores the virtual environments for each package is by default the `~/.local/pipx/venvs`(here ~ refers to the root/default directory), the documentation says that it can be changed by editing the environment variable `PIPX_HOME`. &#xA;&#xA;The default path at which pipx stores the binaries/command apps for each package is stored in the path `~/.local/bin`, even this path can be modified by editing the environment variable `PIPX_BIN_DIR`&#xA;&#xA;### Pipx List Command&#xA;&#xA;Pipx list command simply lists the executables or the commands you can run with pipx. This command will display the commands associated with the packages that are installed in the pipx environment. &#xA;&#xA;```&#xA;pipx list&#xA;```&#xA;&#xA;![Pipx list output](https://res.cloudinary.com/techstructive-blog/image/upload/v1647782349/blog-media/qu95nynklbuceqqd9qke.png)&#xA;&#xA;This command gives a detailed list of the commands associated with their respective packages. It also gives the meta-information like the Python version in which the package was installed. &#xA;&#xA;&#xA;### Pipx Run Command&#xA;&#xA;The most useful command in pipx has to be `pipx run`, this command can execute provide package along with the specified command associated with the package. &#xA;&#xA;The structure of the command is as follows:&#xA;&#xA;```&#xA;pipx run &lt;package_name&gt; &lt;command&gt;&#xA;```&#xA;The pipx documentation refers to the `command` as an `APP`, as it is an executable created from the package specification.&#xA;&#xA;If the APP/command name is not matching the `package_name`(most of the time it won&#39;t), you need to add an argument to the run command.&#xA;&#xA;```&#xA;pipx run --spec &lt;package_name&gt; &lt;command&gt;&#xA;```&#xA;&#xA;The `--spec` option allows specifying a certain package to be used while running the command/APP. Using this option with the `pipx run` command, we can run package-specific commands. For example, if we want to run an ipython from the terminal, without messing up the current environment i.e. without installing any package. You can do that by using pipx.&#xA;&#xA;```&#xA;pipx install dailydotdev-bookmark-cli&#xA;&#xA;pipx run --spec dailydotdev-bookmark-cli bookamrks&#xA;```&#xA;&#xA;![dailydotdev-bookmark-cli demo](https://res.cloudinary.com/techstructive-blog/image/upload/v1647782547/blog-media/vsfmwlzazqtosuwttexb.gif)&#xA;&#xA;This is my shameless plug of installing my [first python package](https://github.com/Mr-Destructive/bookmarks-cli). The command used for the CLI is totally not related to the package name and hence we have to use the `--spec` option.&#xA;&#xA;## Install and Run packages from Pipx&#xA;&#xA;Any python package which provide a Command Line Interface can be installed and run with pipx. Some of the packages like [pytest](https://docs.pytest.org/en/7.1.x/contents.html), [pipenv](https://pipenv-fork.readthedocs.io/en/latest/install.html), [rich-cli](https://github.com/Textualize/rich-cli), [Black code formatter](https://github.com/psf/black), [markata](https://markata.dev/) and many others. &#xA;You can install any of the packages which do have a cli to interact with on the go with pipx. &#xA;&#xA;### Running Ipython shell&#xA;&#xA;We can use [Ipython](https://pypi.org/project/ipython/) shell from pipx as an isolated environment. We simply install the package first, after installing the package it creates the virtual environment. Creating a separate virtual environment registers the app/command binaries into the PATH environment of the system so that they can be accessed globally. &#xA;&#xA;```&#xA;pipx install ipython&#xA;&#xA;pipx run ipython&#xA;```&#xA;&#xA;![IPython pipx demo](https://res.cloudinary.com/techstructive-blog/image/upload/v1647782651/blog-media/ssgymybn0dwi8ocs6xpf.png)&#xA;&#xA;For further documentation on ipython using the CLI, you can refer to the [GitHub](https://github.com/ipython/ipython) link or the [documentation](https://ipython.org/ipython-doc/3/interactive/reference.html#command-line-usage) page.&#xA;&#xA;### Reading an IPYNB file from pipx with JUT&#xA;&#xA;If you just want to read an ipynb file from the terminal, you can do that using [jut](https://pypi.org/project/jut/) by specifying the command:&#xA;&#xA;```&#xA;pipx install jut&#xA;&#xA;pipx run jut &lt;notebook.ipynb&gt;&#xA;```&#xA;&#xA;![jut pipx demo](https://res.cloudinary.com/techstructive-blog/image/upload/v1647782686/blog-media/ddm5uiqarjjmedhqvcsk.png)&#xA;&#xA;You can find more information on JUT via their official [GitHub](https://github.com/kracekumar/jut) repository.&#xA;&#xA;### Using rich-cli to display text using pipx&#xA;&#xA;We can even use [Rich-CLI](https://pypi.org/project/rich-cli/) to print rich content in the project. Rich-CLI as the name suggests is a CLI for the Rich package in python. It is really intuitive and simple to use. If we want to take snaps of the rich content of a markdown file, source file, dataset, etc. rich-cli is a tool that can quickly do that. Use pipx to install the package globally and simply run wherever required in an isolated environment.&#xA;&#xA;```&#xA;pipx install rich-cli&#xA;&#xA;pipx run --spec rich-cli rich &#34;[blue]Hello[/], [yellow]World[/]!&#34; --print&#xA;```&#xA;&#xA;![rich-cli pipx demo](https://res.cloudinary.com/techstructive-blog/image/upload/v1647782738/blog-media/xvdyhxjpj2hsghl2x1ng.png)&#xA;&#xA;&#xA;This will give you a colorful display of &#34;Hello, World&#34; without you messing up your current project. Pipx has an isolated environment so it doesn&#39;t tinker with your local virtual environment or project. Though you can use your current project to use those CLI to execute commands which might require the source file in the project.&#xA;&#xA;We can even print the markdown file in a rich format, simply using pipx and rich-cli. There are a lot of things we can do with rich-cli.&#xA;&#xA;```&#xA;pipx run rich-cli &lt;markdown_file.md&gt;&#xA;```&#xA;&#xA;![rich-cli markdown demo](https://res.cloudinary.com/techstructive-blog/image/upload/v1647785474/blog-media/bwmvucrcgrtgwdv58ffj.png)&#xA;&#xA;For further reading on the rich-cli package, you visit their [GitHub](https://github.com/Textualize/rich-cli) link and the [Documentation](https://github.com/Textualize/rich-cli/blob/main/README.md) Readme.&#xA;&#xA;### Using pytest to perform a test for the current project&#xA;&#xA;[Pytest](https://pypi.org/project/pytest/) allows writing simple and scalable tests for Python apps, libraries, and packages. We can use it to write tests in the project without adding it as a dependency in the python environment. Simply install the package with pipx and run the tests in an isolated environment.&#xA;&#xA;```&#xA;pipx install pytest&#xA;&#xA;pipx run pytest temp.py&#xA;```&#xA;&#xA;![Pytest pipx demo](https://res.cloudinary.com/techstructive-blog/image/upload/v1647782771/blog-media/qutb0bxzlnwctl9mbuon.png)&#xA;&#xA;Here, we can see the pytest was performed on the `temp.py` file which can be any application file for your project. This gave us results without installing pytest in our application&#39;s virtual environment. This becomes really convenient to run certain package commands whose package should not be a dependency on your project in the virtual environment.&#xA;&#xA;You can visit Pytest&#39;s [GitHub](https://github.com/pytest-dev/pytest/), [Documentation](https://docs.pytest.org/en/stable/) and their [Home Page](https://pytest.org/).&#xA;&#xA;### Using Black (Python code formatter)&#xA;&#xA;We can use pipx to even format the python source files using [black](https://pypi.org/project/black/). We don&#39;t have to install `black` as a dependency in the project. Pipx will simply install black in its isolated environment and run the specified command.&#xA;&#xA;```&#xA;pipx install black&#xA;&#xA;pipx run black temp.py&#xA;```&#xA;&#xA;![Black pipx demo](https://res.cloudinary.com/techstructive-blog/image/upload/v1647782823/blog-media/dtnae85fvgae2y4aiqkg.png)&#xA;&#xA;Black is a code formatter in Python, it basically edits your source python files for any incorrect python semantics and syntax, it corrects/formats them without a compromise. You can visit the [GitHub](https://github.com/psf/black), [Documentation](https://black.readthedocs.io/en/stable) or the Black package [Playground webpage](https://black.vercel.app/).&#xA;&#xA;### Using httpie (curl equivalent in Python)&#xA;&#xA;We can use the [httpie](https://pypi.org/project/httpie/) package in python which is a CLI tool for HTTP clients. It is very similar to the `curl` command in Linux. We can even use that with pipx to test out API endpoints or any website that you might be working with without leaving the terminal. For further details on the httpie package, you can visit their [Home page](https://httpie.io/), [GitHub](https://github.com/httpie), or [PyPI webpage](https://pypi.org/project/httpie/). &#xA;&#xA;```&#xA;pipx install httpie&#xA;&#xA;pipx run --spec httpie http -v dev.to&#xA;```&#xA;&#xA;![httpie pipx demo](https://res.cloudinary.com/techstructive-blog/image/upload/v1647782857/blog-media/jbaudm3pbnnsjtzy5ok7.png)&#xA;&#xA;Here, we can see the package simply gives a simple output of the headers of the request. It is smart enough to understand the web link as `https://dev.to` unlike CURL which needs to have an exact match.&#xA;&#xA;### Running Markata blog with pipx &#xA;&#xA;As said, every package that bundles itself with a CLI can be installed and run from anywhere. So, [markata](https://pypi.org/project/markata/) which is a plugin-driven static site generator which is a python package also bundles with a CLI. Using the base app(markata) we can run its associated commands like `build`, `list`, etc. I use this to build my blog.&#xA;&#xA;```&#xA;pipx install markata&#xA;&#xA;pipx run markata build&#xA;```&#xA;&#xA;![Markata pipx demo](https://res.cloudinary.com/techstructive-blog/image/upload/v1647783021/blog-media/cygzwixyzwv4wwsccbfc.gif)&#xA;&#xA;You can visit the Markata&#39;s [documentation](https://markata.dev/) web page or the [GitHub](https://github.com/WaylonWalker/markata) repository for further insights on the Static site generator.&#xA;&#xA;**If you want to explore more packages that you can use with pipx, then you can look at the docs guide [programs-to-try](https://pypa.github.io/pipx/programs-to-try/) section.**&#xA;&#xA;## Conclusion&#xA;&#xA;So, from this simple introduction, we were able to understand the basics of pipx which is a python package for isolating and running CLI-specific package commands. We saw how to setup pipx, install packages, run the commands from the package and interact with the virtual environment that it creates for each package we install. &#xA;&#xA;Thank you for reading, if you have any comments, suggestions, feedback please let me know in the comments. Happy Coding :)&#xA;</content>
      <type>posts</type>
    </item>
    <item>
      <title>Pipenv: Python&#39;s Official Package Management tool</title>
      <link>meetgor.com/pipenv-intro</link>
      <description>Exploring the Python&#39;s recommended package management tool</description>
      <pubDate>Mon, 14 Mar 2022 00:00:00 UTC</pubDate>
      <content>&#xA;## Introduction&#xA;&#xA;Pipenv is Python&#39;s officially recommended Package management tool, as the name suggests it combines the power of `pip` and `virtualenv`. It is really powerful and gives control of package management for a python project. It also has support for adding dev packages, python versions, smartly recognizing main and derived package installation/uninstallation, and so on. It is the [official package management tool for Python](https://packaging.python.org/en/latest/tutorials/managing-dependencies/#managing-dependencies). &#xA;&#xA;It is quite similar to npm for Nodejs in Javascript, or bundle for Ruby, cargo for Rust, and so on. It really simple and easy to use as it manages the overhead for package management for us and hence it is also a high-level package management tool as opposed to pip, which is not as powerful as Pipenv. So, in this article, we&#39;ll explore [Pipenv](https://pypi.org/project/pipenv/) package manager for Python and how you can use it in your next python project. Let&#39;s get started. &#xA;&#xA;## Install Pipenv&#xA;&#xA;[Pipenv](https://pypi.org/project/pipenv/) is just like any other package in python, you can install it with pip as normally you install any other package with the command:&#xA;&#xA;```&#xA;pip install pipenv&#xA;```&#xA;&#xA;![Pipenv Install](https://res.cloudinary.com/techstructive-blog/image/upload/v1647193069/blog-media/hnhoeigfhx2hsypexgm5.png)&#xA;&#xA;You can refer to the documentation of Pipenv from [here](https://pipenv.pypa.io/en/latest/).&#xA;&#xA;## Set up a Python Environment&#xA;&#xA;This step is not mandatory but it avoids any mistakes that you can make in the future while installing the package, so to simply create a new python environment for your project, you simply have to write the following command:&#xA;&#xA;```&#xA;pipenv shell&#xA;```&#xA;&#xA;![Pipenv initialize](https://res.cloudinary.com/techstructive-blog/image/upload/v1647192853/blog-media/dahwaqnblvvvqyyw62uq.png)&#xA;This will create the virtual environment for Python in the local folder. It is quite similar to installing `virtualenv` and then activating the env/venv folder script. Though pipenv is quite powerful as it automatically detects the environment. &#xA;&#xA;If you look at it carefully, there will be a file generated after the command has been executed successfully. The file called `Pipfile` without any extension will have been created in your current folder where you executed the command from. The file contains the version of python used in this project along with the list of dependencies(currently empty). Also the source from where it will download and manage the dependencies. &#xA;&#xA;The Pipfile after simply creating the virtualenv via the command `pipenv shell` looks something like follows:&#xA;&#xA;```&#xA;[[source]]&#xA;url = &#34;https://pypi.org/simple&#34;&#xA;verify_ssl = true&#xA;name = &#34;pypi&#34;&#xA;&#xA;[packages]&#xA;&#xA;[dev-packages]&#xA;&#xA;[requires]&#xA;python_version = &#34;3.8&#34;&#xA;```&#xA;&#xA;If you want to set up a specific version of python for the virtual environment, you can do this using pipenv. The version should be installed in your system though for the pipenv to pick it up, if you have the specific version of python set up with all path variables configured, you can use the below command to set up the version of python in pipenv.&#xA;&#xA;```&#xA;pipenv --python version-number&#xA;```&#xA;&#xA;For example : `pipenv --python 3.9` will set up the virtual environment with python version `3.9`. &#xA;&#xA;## What is Pipfile&#xA;&#xA;Pipfile is basically a TOML file that has all the details of the different dependencies/packages and the version of Python used in the project/directory. A TOML is a simple configuration file that is reader-friendly, it is a map of keys and values as configuration data structures. In Pipenv, we can have keys like `package-names` and the value as the `version-number`, certain groups of dependencies like `dev-packages` and `packages`, etc. Pipenv is the file that Pipenv implements its package management environment. The file is really important and powerful as it can install all dependencies even if provided with `requirements.txt` file. Yes, it can automatically detect that if you provide the path to that file. &#xA;&#xA;Pipenv also has additional features like adding dev dependencies/packages in the project as a separate dependency. So if you want to test a feature with a specific package you can add it as a dev package and it will be stored separately. The pipfile will segregate the dependencies so that Pipenv can install/uninstall from the virtual environment. In short, Pipfile lets you have great control over your project&#39;s packages management. &#xA;&#xA;## Installing Python Packages&#xA;&#xA;Once your Pipenv is initialized as a virtual environment for Python, we can install dependencies with either `pip` or `pipenv`. This is the mistake that might get you trapped, if you already have not run the command `pipenv shell` and installed any dependencies with `pip`, you will install that dependency globally and make some mess of the project. So, it is advised to use `pipenv shell` in order to activate your virtual environment. If you do not wanna do that, you can use the command to install any dependency without activating the virtual environment.&#xA;&#xA;```&#xA;pipenv install &lt;package-name&gt;&#xA;```&#xA;&#xA;![Pipenv Install Flask](https://res.cloudinary.com/techstructive-blog/image/upload/v1647192980/blog-media/dfsokm6e1easwvxtgehh.png)&#xA;&#xA;This will detect any virtual environment in the project, if it&#39;s not created already it will create it and install that package in that environment.&#xA;&#xA;Installing any package using `pipenv` will update the Pipenv file and the package to its packages list.&#xA;```toml&#xA;[[source]]&#xA;url = &#34;https://pypi.org/simple&#34;&#xA;verify_ssl = true&#xA;name = &#34;pypi&#34;&#xA;&#xA;[packages]&#xA;flask = &#34;*&#34;&#xA;&#xA;[dev-packages]&#xA;&#xA;[requires]&#xA;python_version = &#34;3.8&#34;&#xA;```&#xA;&#xA;OR &#xA;&#xA;If you wish to install with pip, as usual, you need to be in the virtual subshell. If you already are, then Pipenv will add that dependency to the virtual environment. Note though, if you install any package with `pip` and not with `pipenv`, the package won&#39;t be added to Pipfile but would be installed in the virtual environment. &#xA;&#xA;![Pipenv pip install](https://res.cloudinary.com/techstructive-blog/image/upload/v1647193149/blog-media/suaykqsyrgn1w0mou7f0.png)&#xA;&#xA;Here, if we type the command `pipenv graph` it will show us a nice detailed list of all the installed dependencies. &#xA;&#xA;```&#xA;pipenv graph&#xA;```&#xA;```shell&#xA;$ pipenv graph&#xA;Flask==2.0.3&#xA;  - click [required: &gt;=7.1.2, installed: 8.0.4]&#xA;    - colorama [required: Any, installed: 0.4.4]&#xA;  - itsdangerous [required: &gt;=2.0, installed: 2.1.1]&#xA;  - Jinja2 [required: &gt;=3.0, installed: 3.0.3]&#xA;    - MarkupSafe [required: &gt;=2.0, installed: 2.1.0]&#xA;  - Werkzeug [required: &gt;=2.0, installed: 2.0.3]&#xA;requests==2.27.1&#xA;  - certifi [required: &gt;=2017.4.17, installed: 2021.10.8]&#xA;  - charset-normalizer [required: ~=2.0.0, installed: 2.0.12]&#xA;  - idna [required: &gt;=2.5,&lt;4, installed: 3.3]&#xA;  - urllib3 [required: &gt;=1.21.1,&lt;1.27, installed: 1.26.8]&#xA;```&#xA;&#xA;As you might have guessed, the above command is equivalent to the `pip freeze` command, but just compare the details both tools have. Pipenv really shines here.&#xA;&#xA;&#xA;If you compare the output of Pipfile and `pipenv graph` you get a bit confused as to why is there are so fewer packages in the file. So, **Pipfile doesn&#39;t store the sub-packages/dependencies of a certain base package**. Let&#39;s take, for example, Flask here, we have Flask as the main package, and `click`, `Jinja2`, `Werkzeug` are its sub dependencies, further `colorama` and `MarkupSafe` are in turn dependencies of `click` and `Jinja2`. So, Pipfile just includes the top-level packages, pipenv is smart enough to install the rest. It also doesn&#39;t include `requests` but it is indeed included in the `graph`. This is because Pipenv will only put the dependencies in the Pipfile if it has been installed via the `pipenv` command.&#xA;&#xA;![Pipenv Graph vs pip freeze](https://res.cloudinary.com/techstructive-blog/image/upload/v1647193333/blog-media/gzo95pbquaioujtqvntu.png)&#xA;&#xA;You can use `pip freeze` here as well as we are technically in a Python virtual environment. And you can clearly see the difference. Pipenv is a high-level tool compared to pip, it technically uses `pip` and `virtualenv` and leverages both of them to become a smart package management tool. &#xA;&#xA;## What is the Pipfile.lock&#xA;&#xA;- If you are coming from `Javascript` world, it is similar to `package-lock.json` file.&#xA;- If you are coming from `Ruby` world, it is similar to the `Gemfile.lock` file.&#xA;- If you are coming from `Rust` world, it is similar to the `cargo.lock` file.&#xA;&#xA;Ok, you get the idea, it is a file that more robustly specifies the version of the packages without conflicting with the other version or the Python version itself. If you look at the Pipfile.lock also has hashes that store the sub-packages as well. The file format here is JSON as opposed to TOML for the Pipfile. &#xA;&#xA;## Configuring the Pipenv environment&#xA;&#xA;Now, a question you might have is where is the virtual environment? Is it there? Of course, it will be there, it is configured to a different location though. By default, it will be stored in the `~\.virtualenvs\` folder. &#xA;&#xA;You can get the location of the current virtualenv with the following command:&#xA;&#xA;```&#xA;pipenv --venv&#xA;```&#xA;&#xA;```&#xA;$ pipenv --venv&#xA;C:\Users�cer\.virtualenvs\pipenv-blog-gHY6vF9t&#xA;```&#xA;   For Windows, it is in the Admin user(in my case it is named `acer`) followed by the hidden folder `virtualenvs`, this folder will contain all the virtualenvs for different projects using `pipenv`. &#xA;&#xA;If you wished to change this location and keep the virtual environment folder in the same directory as your project, you can set up the environment variable for it as follows:&#xA;&#xA;For Linux/macOS:&#xA;Add the following to your `~/.bashrc` or other equivalent shell configuration file.&#xA;```&#xA;export PIPENV_VENV_IN_PROJECT=&#34;enabled&#34;&#xA;```&#xA;&#xA;For Windows:&#xA;&#xA;Add it to the PATH Environment variable.&#xA;```&#xA;set PIPENV_VENV_IN_PROJECT=&#34;enabled&#34;   &#xA;```&#xA;&#xA;This will make sure the virtualenvs for the project in `pipenv` are created inside the current folder itself and not in a single `~\.virtualenvs\` folder. &#xA;&#xA;## Creating the requirements.txt file&#xA;&#xA;Let&#39;s say you also want to create a requirements.txt file for distributing your project to someone else, as not everyone will use Pipenv to manage their dependencies. It is really straightforward and quick to create a requirements.txt file from the Pipenv environment. &#xA;&#xA;The below command will make the `requirements.txt` file from the existing Pipenv project.&#xA;&#xA;```&#xA;pipenv lock -r &gt;requirements.txt&#xA;```&#xA;&#xA;![Pipenv to requirements.txt file](https://res.cloudinary.com/techstructive-blog/image/upload/v1647193388/blog-media/e6t68b7ckrsrvadvmeqa.png)   &#xA;This will create the requirements.txt file, based on the Pipfile. Pipenv is smart again to provide all of the required dependencies to the requirements.txt in order that pip will be able to install all the required dependencies. &#xA;&#xA;## Using requirements.txt in Pipenv&#xA;&#xA;We can install all the dependencies from the requirements.txt file while we are migrating from bare-bones virtualenv and pip to Pipenv. Pipenv will install all the mentioned dependencies and it will also add its checks for the appropriate checks for dependencies. &#xA;&#xA;```&#xA;pipenv install -r requirements.txt&#xA;```&#xA;This will install the dependencies mentioned in the requirements.txt file into the Pipenv virtual environment. &#xA;&#xA;## Managing Dev Packages &#xA;&#xA;Let&#39;s say we want to install a package but we are not sure to use it in production or the actual script, just a test for how it will work. Thus we have dev packages to install optional or testing packages. &#xA;&#xA;To install a dev-dependency or package, you can install via the following command:&#xA;&#xA;```&#xA;pipenv install &lt;package-name&gt; --dev&#xA;```&#xA;&#xA;![Pipenv dev package install](https://res.cloudinary.com/techstructive-blog/image/upload/v1647194653/blog-media/x5dimgfd2ikm2ercbzhv.png)&#xA;&#xA;If we see the Pipfile, the `django` package that we installed tagged with `--dev` will be in the `dev-packages`&#xA;&#xA;```&#xA;$ cat Pipfile&#xA;[[source]]&#xA;url = &#34;https://pypi.org/simple&#34;&#xA;verify_ssl = true&#xA;name = &#34;pypi&#34;&#xA;&#xA;[packages]&#xA;flask = &#34;*&#34;&#xA;&#xA;[dev-packages]&#xA;django = &#34;*&#34;&#xA;&#xA;[requires]&#xA;python_version = &#34;3.8&#34;&#xA;```&#xA;&#xA;If we wanted to uninstall all the dev-packages, we can simply enter the command:&#xA;&#xA;```&#xA;pipenv uninstall --all-dev&#xA;```&#xA;&#xA;![Pipenv uninstall devpackages](https://res.cloudinary.com/techstructive-blog/image/upload/v1647261079/blog-media/bg9n7aj6rfxsvdwflnah.gif)&#xA;&#xA;This will simply uninstall all the dev dependencies/packages from the pipenv environment and also remove them from the packages list in Pipfile. If you wished to uninstall a specific package in pipenv, you can uninstall it by the simple command:&#xA;&#xA;```&#xA;pipenv uninstall &lt;package-name&gt;&#xA;````&#xA;&#xA;&#xA;## Installing/Uninstalling all packages&#xA;&#xA;To install only the default packages and not dev-packages. &#xA;&#xA;```&#xA;pipenv install &#xA;```&#xA;&#xA;To install or configure a project, if you want to test the project with all the dev dependencies, you can install them with:&#xA;&#xA;```&#xA;pipenv install --dev&#xA;```&#xA;&#xA;This will install all the packages both `packages` and `dev-packages`. &#xA;&#xA;If you want to uninstall all the packages in pipenv, you can use the command :&#xA;&#xA;```&#xA;pipenv uninstall --all&#xA;```&#xA;&#xA;This will uninstall all the default and dev packages from pipenv. This is like starting a fresh virtual environment. &#xA;&#xA;### References:&#xA;&#xA;- [Pipenv documentation](https://pipenv.pypa.io/en/latest/)&#xA;- [Real Python - Pipenv Guide](https://realpython.com/pipenv-guide/)&#xA;&#xA;## Conclusion&#xA;&#xA;So, this was a brief introduction to `pipenv` which is Python&#39;s recommended package management tool. We saw that we have control over the dependencies and packages in a virtual environment which is taken care of automatically for us. We don&#39;t have to activate the environment to install or manage any package for a project. &#xA;</content>
      <type>posts</type>
    </item>
    <item>
      <title>Podevcast</title>
      <link>meetgor.com/podevcast</link>
      <description>Developer podcast at a single place</description>
      <pubDate>Fri, 25 Feb 2022 00:00:00 UTC</pubDate>
      <content>Tech Stack:&#xA;- Python&#xA;- Python Pacakges&#xA;    - feedparser&#xA;- Netlify&#xA;- GitHub Actions&#xA;&#xA;</content>
      <type>projects</type>
    </item>
    <item>
      <title>Crossposter</title>
      <link>meetgor.com/crossposter</link>
      <description>crosspost your articles to devto, codenewbie, medium and hashnode</description>
      <pubDate>Fri, 25 Feb 2022 00:00:00 UTC</pubDate>
      <content>Tech Stack:&#xA;- Python&#xA;- Python Pacakges&#xA;&#xA;</content>
      <type>projects</type>
    </item>
    <item>
      <title>Podevcast: A single source for developer podcasts</title>
      <link>meetgor.com/podevcast-project</link>
      <description></description>
      <pubDate>Fri, 18 Feb 2022 00:00:00 UTC</pubDate>
      <content>&#xA;## Introduction&#xA;&#xA;Hello Developers! Want to listen to programming podcasts from a single place? Podevcast is the place you should be searching for. &#xA;&#xA;I am Meet Gor and I present this project as a submission to the Netlify x Hashnode Hackathon. Podevcast is a webpage(static) for listening to podcasts centered around developers and programming. Just pick your favorite one and start listening straight away. Let&#39;s dive into the making of Podevcast. Head on to https://podevcast.netlify.app/ to check out the live app.&#xA;&#xA;## What is Podevcast&#xA;&#xA;Podevcast is a web application or a static site that renders the top programming/development podcasts. You can listen to the top podcasts around the developer community from a single source. &#xA;&#xA;&gt; Listen to your favorite developer podcasts with Podevcast&#xA;&#xA;Podevcast is a static site generated using a script. There is a static site generator that is heavily done in Python and deployed to Netlify. You can simply listen to the podcasts on the web page or go to the canonical page of the podcast episode. From the canonical page, you can choose to hop to your chosen music player, but the default music player should be fine for casual listening. The core idea is to keep things in a single place for developer podcasts.&#xA;&#xA;[Podevcast](https://podevcast.netlify.app/)&#xA;&#xA;[Source Code](https://github.com/Mr-Destructive/podevcast)&#xA;&#xA;## Preview&#xA;&#xA;Podevcast has popular developer podcasts like `Command Line Heroes`, `The Python Podcast`, `The freeCodeCamp Podcast`, and many others to choose from. You can go into categories for looking at a specific podcast. &#xA;&#xA;### Application Demonstration&#xA;&#xA;Here&#39;s a small demonstration of the Podevcast application.&#xA;&#xA;![Podevcast Preview gif](https://cdn.hashnode.com/res/hashnode/image/upload/v1645200224921/GC8gmxUzX.gif)&#xA;&#xA;Podevcast has multiple pages like:&#xA;&#xA;1. [Home page](https://podevcast.netlify.app/)&#xA;2. [Podcast page](https://podevcast.netlify.app/list)&#xA;3. [Episode page](https://podevcast.netlify.app/the_real_python_podcast/ep/1/)&#xA;4. [Podcast List page](https://podevcast.netlify.app/command_line_heroes/)&#xA;5. [Categories page](https://podevcast.netlify.app/category/)&#xA;&#xA;The Home page has the latest episode of all the podcasts. It also has an audio player to play on the go.&#xA;&#xA;![Podevcast home page](https://res.cloudinary.com/techstructive-blog/image/upload/v1645113477/blog-media/iafi8nthhj0vvvrcbhka.png)&#xA;&#xA;The Podcast List page has the list of all the Podcasts available in the project. It has the name of the podcast with the link to the podcast page that has the list of all the episodes of that podcast.&#xA;&#xA;![Podevcast Podcast list](https://res.cloudinary.com/techstructive-blog/image/upload/v1645113598/blog-media/cnprgufs3lrouvgdl8jn.png)&#xA;&#xA;The categories page has a list of categories of the podcasts like Web-development, backend, frontend, data science, DevOps, and so on. More categories will be added soon.&#xA;&#xA;![Podevcast Categories](https://res.cloudinary.com/techstructive-blog/image/upload/v1645113626/blog-media/uloq4xi1d4zfo8sfl7bm.png)&#xA;&#xA;The Episode page has the audio player, the summary of the episode, canonical episode, and podcast page. &#xA;&#xA;![Podevcast Episode page](https://res.cloudinary.com/techstructive-blog/image/upload/v1645113654/blog-media/omqks44p8b3u7jclkhgz.png)&#xA;&#xA;## Why Podevcast?&#xA;&#xA;Listening to music is one thing and listening to podcasts is different. I wanted a place from where developers can listen to developer-specific podcasts from a single source not just give out the article **&#34;Top 10 podcast you should be listening to as a developer&#34;**. Having played around with python and some libraries like feedparser and jinga previously I saw this Hackathon as an opportunity to convert the idea into a project. It fits the JAMStack area well from the Hackathon and project perspective.  &#xA;&#xA;## Tech Stack&#xA;&#xA;- Python&#xA;  - [feedparser](https://pypi.org/project/feedparser/)&#xA;  - [jinga2](https://pypi.org/project/Jinja2/)&#xA;- GitHub Actions&#xA;- HTML / CSS&#xA;&#xA;The data is extracted from various RSS Feeds using the feedparser library in Python. &#xA;&#xA;Using GitHub Actions, the feed is refreshed every 24 hours to fetch the latest episodes from the respective podcast feeds. Basically, the GitHub action triggers a Netlify deployment that in turn generates the static site by running the script.&#xA;&#xA;The command for running the script on Netlify and generating the `Podevcast` webpage is :&#xA;&#xA;```&#xA;pip install -r rquirements.txt &amp;&amp; python script.py&#xA;```&#xA;&#xA;And the directory for deployed web pages (published directory) is `site` which contains all the `HTML` files that can be rendered as the website itself. &#xA;&#xA;### Source Code&#xA;&#xA;The project is available on [GitHub](https://github.com/Mr-Destructive/podevcast). Feel free to open a PR to add a Podcast or a Category. The project only has a few python files, the main script is `script.py` which actually creates the home and the podcast list pages along with the episode pages. The `src` folder contains some extra bits of scripts like creating the categories and category podcast list pages. Also, it has certain config files like `runtime.txt`, `requirements.txt`, and so on. Finally, there is the `podlist.json` for the list of podcasts and `categorylist.json` for the categories of podcasts. &#xA;&#xA;### Core Script Snippet &#xA;&#xA;The python script looks a lot bigger than the below snippet but it is doing the same process multiple times for different pages. There is also some type checking and tiny details that are added as per the requirement of the templates. &#xA;&#xA;```python&#xA;import feedparser&#xA;from jinja2 import Environment, FileSystemLoader&#xA;from pathlib import Path&#xA;&#xA;template_env = Environment(loader=FileSystemLoader(searchpath=&#39;./layouts/&#39;))&#xA;index_template = template_env.get_template(&#39;index.html&#39;)&#xA;episode_template = template_env.get_template(&#39;episode.html&#39;)&#xA;&#xA;feed = feedparser.parse(&#34;https://freecodecamp.libsyn.com/rss&#34;)&#xA;&#xA;pod_name = feed[&#39;feed&#39;][&#39;title&#39;]&#xA;&#xA;for i in range(0, len(feed[&#39;entries&#39;]):&#xA;    &#xA;    ep_title = feed[&#39;entries&#39;][i][&#39;title&#39;]&#xA;    audio = feed[&#39;entries&#39;][i][&#39;links&#39;][1][&#39;href&#39;]&#xA;    cover_image = feed[&#39;entries&#39;][i][&#39;image&#39;][&#39;href&#39;]&#xA;    og_link = feed[&#39;entries&#39;][i][&#39;links&#39;][0][&#39;href&#39;]&#xA;&#xA;    episode_obj = {}&#xA;    episode_obj[&#39;title&#39;] = ep_title&#xA;    episode_obj[&#39;audiolink&#39;] = audio&#xA;    episode_obj[&#39;cover&#39;] = cover_image&#xA;    episode_obj[&#39;link&#39;] = og_link&#xA;&#xA;    with open(os.path.join(f&#34;site/{pod_name}/ep/{i}/index.html&#34;), &#39;w&#39;, encoding=&#39;utf-8&#39;) as ep_file:&#xA;         ep_file.write(&#xA;            episode_template.render(&#xA;            episode = episode_obj&#xA;            )&#xA;         )&#xA;```&#xA;&#xA;   Above is a simple snippet of the core functionality of the script. It basically takes the RSS Feed `URL` of the podcast and using `feedparser` the data is retrieved in the form of a dictionary in Python. &#xA;&#xA;   - Iterate over the `feed[&#39;entries&#39;]` which is a list of lengths same as the number of episodes of that podcast, we then assign a set of values like `episode title`, `audio link`, `cover image`, `canonical link for the episode`, `date` and so on. &#xA;   - Create a dictionary and store the key value as the mentioned data to access from the template. &#xA;   - Open a file in the structured file format and then parse the `episode_obj` which is a dictionary to the episode template. &#xA;   - Access the dictionary using jinga2 templating tags. &#xA;&#xA;```html&#xA;&lt;html&gt;&#xA;    &lt;head&gt;&#xA;        &lt;title&gt;Podevcast&lt;/title&gt;&#xA;    &lt;/head&gt;&#xA;    &lt;body&gt;&#xA;        &lt;h3 class=&#34;ep-title&#34;&gt;{{ episode.title }}&lt;/h3&gt;&#xA;        &lt;img src=&#34;{{ episode.cover }}&#34;&gt;&#xA;        &lt;a class=&#34;ep-link&#34; href=&#34;{{ episode.link }}&#34;&gt;Episode &lt;/a&gt; &#xA;        &lt;audio controls=&#34;enabled&#34; preload=&#34;none&#34;&gt;&#xA;            &lt;source src=&#34;{{ episode.audiolink }}&#34; type=&#34;audio/mpeg&#34;&gt;&#xA;        &lt;/audio&gt;   &#xA;    &lt;/body&gt;&#xA;&lt;/html&gt;&#xA;```&#xA;We can use `{{  }}` to access any value parsed to the template via the script. Also, we can make use of `{% %}` to run loops, conditionals, blocks, and other tags in the template. &#xA;&#xA;![Feedparser Illustration](https://res.cloudinary.com/dgpxbrwoz/image/upload/v1645110268/blogmedia/uwdzcwn07oxhppiptem9.png)&#xA;&#xA;So, we can see the feed is basically a dictionary that has a key-value pair and further, it can be a nested dictionary or a list as a value of a key. As in the case of `feed[&#39;entries&#39;]` is a list with the length of the number of episodes of a podcast. And in the script, we use various keys to access various components, obviously, this requires a bit of exploration of the dictionary initially but it becomes easy thereafter to automate using Python. &#xA;&#xA;### Episode List&#xA;&#xA;Currently, the episodes are added using the JSON file. It is not that user-friendly but still not a big task to simply add a link in a file. This is a #TODO that will require some external tooling to integrate into the webpage to ask for a form to submit a new Podcast. &#xA;&#xA;```json&#xA;{&#xA;    &#34;Command Line Heroes&#34;: &#34;https://feeds.pacific-content.com/commandlineheroes&#34;,&#xA;    &#34;Python Podcast__init__&#34;: &#34;https://www.pythonpodcast.com/feed/mp3/&#34;,&#xA;    &#34;Real Python Podcast&#34;: &#34;https://realpython.com/podcasts/rpp/feed&#34;,&#xA;    &#34;The freeCodeCamp Podcast&#34;: &#34;https://freecodecamp.libsyn.com/rss&#34;,&#xA;    &#34;CodeNewbie&#34;: &#34;http://feeds.codenewbie.org/cnpodcast.xml&#34;,&#xA;    &#34;Linux For Everyone&#34;: &#34;https://feeds.fireside.fm/linuxforeveryone/rss&#34;,&#xA;    &#34;JavaScript Jabber&#34; : &#34;https://feeds.fireside.fm/javascriptjabber/rss&#34;&#xA;}&#xA;```&#xA;&#xA;The process requires a manual test to validate a given RSS Feed as not all feeds are generated the same way and thus there are a few exceptions that need to be sorted out manually. For example, the Python Podcast doesn&#39;t have a cover image parsed into the RSS Feed, so there needs to be a check for it in the script and also in the template to restrict parsing and displaying the cover image link. &#xA;&#xA;### Episode Categories&#xA;&#xA;This is also a JSON file that holds the keys as the category and the value as a list of episode names (strictly the name from `feed[&#39;feed&#39;][&#39;title&#39;]`). There needs to be a human decision to be taken to add the podcast into a specific category. &#xA;&#xA;```json&#xA;{&#xA;   &#34;Python&#34;:[&#xA;      &#34;Talk Python To Me&#34;,&#xA;      &#34;The Python Podcast.__init__&#34;,&#xA;      &#34;The Real Python Podcast&#34;,&#xA;      &#34;Python Bytes&#34;&#xA;   ],&#xA;   &#34;Javascript&#34;:[&#xA;      &#34;Full Stack Radio&#34;,&#xA;      &#34;JavaScript Jabber&#34;&#xA;   ],&#xA;   &#34;Linux&#34;:[&#xA;      &#34;Command Line Heroes&#34;,&#xA;      &#34;LINUX Unplugged&#34;,&#xA;      &#34;The Linux Cast&#34;,&#xA;      &#34;Linux For Everyone&#34;&#xA;   ],&#xA;   &#34;Data Science&#34;:[&#xA;      &#34;DataFramed&#34;,&#xA;      &#34;Data Skeptic&#34;,&#xA;      &#34;The Banana Data Podcast&#34;&#xA;   ],&#xA;   &#34;Dev Ops&#34;:[&#xA;      &#34;DevOps Cafe Podcast&#34;,&#xA;      &#34;Arrested DevOps&#34;,&#xA;      &#34;Pulling the Strings&#34;,&#xA;      &#34;Azure DevOps Podcast&#34;,&#xA;      &#34;DevOps and Docker Talk&#34;&#xA;   ]&#xA;}&#xA;```&#xA;&#xA;   Though the JSON file is managed manually the generation of the categories is automated. Please feel to add other categories of your choice. &#xA;&#xA;## What&#39;s Coming?&#xA;&#xA;Certain features like adding podcast using a form, adding more podcasts, and categories for sure. Though what looks a bit cloudy in my opinion is adding accessibility links to music players because the RSS feed doesn&#39;t contain direct links to them. Though I still to explore and find out if it can be obtained from the feed itself. &#xA;&#xA;- Search box for searching podcasts&#xA;- Accessible Links to other platforms (Spotify, Itunes, etc)&#xA;- More depth in categories (Languages/Frameworks/Niche-specific podcasts)&#xA;&#xA;I&#39;ll add these features after checking the feasibility of the ideas and the response from the community after releasing them.&#xA;&#xA;## Final Words&#xA;&#xA;This project wouldn&#39;t have existed without this Hackathon as it gives a deadline to finish and hope to win something. Specially thanks to Hashnode and Netlify for organizing such a great opportunity in the form of a hackathon. Also, the maintainers of Python libraries like feedparser and jinja. The project would have been impossible without them. &#xA;&#xA;If you like the project please give it a star on [GitHub](https://github.com/Mr-Destructive/podevcast). Have any feedback? Please let me know in the comments or on [Twitter](https://twitter.com/MeetGor21).  Thank you for reading, Hope you have a good time using Podevcast. Happy Coding :)&#xA;</content>
      <type>posts</type>
    </item>
    <item>
      <title>Django Basics: CRUD API</title>
      <link>meetgor.com/django-basics-crud-api</link>
      <description></description>
      <pubDate>Thu, 03 Feb 2022 00:00:00 UTC</pubDate>
      <content>&#xA;## Introduction&#xA;&#xA;After understanding the admin section and setting up a database, we can finally move on to the CRUD API in Django. We will create a API in pure Django with Model Form, Class Based Views and templates. We will go in two parts in this section, first revising the workflow of the app creation and setup, the next part all about CRUD API. We&#39;ll dive into a lot of familiar topics and concepts from previous parts but there are is still a lot to learn beyond the basics. &#xA;&#xA;The following is the demonstration of the CRUD API we will be making in this section:&#xA;&#xA;![CRUD API- demonstration](https://res.cloudinary.com/dgpxbrwoz/image/upload/v1643985336/blogmedia/hoxf3u9a872uvcbyehov.gif)&#xA;&#xA;## Quickly Setting up an app&#xA;&#xA;We have seen how to create an app in the [folder structure part](https://mr-destructive.github.io/techstructive-blog/django/python/web-development/2021/11/24/Django-Basics-P3.html) of the series, after that we have created all the components namely the views, urls, templates, etc in distinct parts. In this article, we will create an app together in a single part. We&#39;ll discuss all the process in short because its important to get the workflow of Django to ease the actual coding process. Let&#39;s dive in the part one of this section of creating a CRUD API i.e. to set up an app.&#xA;&#xA;### Creating App&#xA;&#xA;To quickly set up an application, we need to execute an command so that python under the hood creates a folder for an app in the current Django project. &#xA;&#xA;```&#xA;python manage.py startapp api &#xA;```&#xA;&#xA;   This will set up an folder `api` in the base directory of current django project. Now, we&#39;ll need to configure the Django settings for the project to pick up this app while running the server, making any migrations or any other project level process.&#xA;&#xA;### Registering the App-name in settings&#xA;&#xA;Simply append the name of the app in a string in the `INSTALLED_APPS` list inside the `settings.py` file. &#xA;&#xA;```python&#xA;# project_name / settings.py&#xA;&#xA;# Application definition&#xA;&#xA;INSTALLED_APPS = [&#xA;    &#39;django.contrib.admin&#39;,&#xA;    &#39;django.contrib.auth&#39;,&#xA;    &#39;django.contrib.contenttypes&#39;,&#xA;    &#39;django.contrib.sessions&#39;,&#xA;    &#39;django.contrib.messages&#39;,&#xA;    &#39;django.contrib.staticfiles&#39;,&#xA;&#xA;    &#39;api&#39;,&#xA;]&#xA;```&#xA;&#xA;### Setting up the URLS&#xA;&#xA;We need to create a `urls.py` file for the `api` app and link it in the main project&#39;s URLs. &#xA;&#xA;```python&#xA;# app-name / urls.py&#xA;&#xA;from django.urls import path&#xA;&#xA;urlpatterns = [&#xA;&#xA;]&#xA;```&#xA;   We&#39;ll keep the url patterns empty but after setting and configuring the project and the application, we&#39;ll map the routes to the views in this app. &#xA;&#xA;Next, we need to update the `urls.py` file in the project folder to include the `api` routes/urls. I have kept it &#39;&#39; or base route, it could be anything as per your application design. &#xA;&#xA;```python   &#xA;# project_name / urls.py&#xA;&#xA;from django.contrib import admin&#xA;from django.urls import path, include&#xA;&#xA;urlpatterns = [&#xA;    path(&#39;admin/&#39;, admin.site.urls),&#xA;    path(&#39;api/&#39;, include(&#39;app_name.urls&#39;)),&#xA;]&#xA;```&#xA;After configuring the URLs we need to set up the templates and static files.&#xA;&#xA;### Setting up Templates and Static files&#xA;&#xA;To set up the templates, we need to configure the `settings.py` file to look for the templates in a specific directory. Below is the snippet to change the default configuration.&#xA;&#xA;```python&#xA;# project_name / settings.py&#xA;&#xA;import os&#xA;&#xA;TEMPLATES = [&#xA;    {&#xA;        &#39;BACKEND&#39;: &#39;django.template.backends.django.DjangoTemplates&#39;,&#xA;        &#39;DIRS&#39;: [os.path.join(BASE_DIR, &#39;templates&#39;),],&#xA;        &#39;APP_DIRS&#39;: True,&#xA;        &#39;OPTIONS&#39;: {&#xA;            &#39;context_processors&#39;: [&#xA;                &#39;django.template.context_processors.debug&#39;,&#xA;                &#39;django.template.context_processors.request&#39;,&#xA;                &#39;django.contrib.auth.context_processors.auth&#39;,&#xA;                &#39;django.contrib.messages.context_processors.messages&#39;,&#xA;            ],&#xA;        },&#xA;    },&#xA;]&#xA;```&#xA;&#xA;So, you can now create your templates (HTML documents) inside the `templates` folder after creating the folder in the base project directory. &#xA;&#xA;TO configure static files, we need to also make modifications to the `settings.py` file as follows:&#xA;&#xA;```python&#xA;# project_name / settings.py&#xA;# import os&#xA;&#xA;STATIC_URL = &#39;/static/&#39;&#xA;STATICFILES_DIRS = [os.path.join(BASE_DIR, &#34;static&#34;)]&#xA;STATIC_ROOT  = os.path.join(BASE_DIR, &#39;staticfiles&#39;)&#xA;```&#xA;   Here, we are configuring the static files ( CSS, Js, Assets) in the `static` folder. This can be anything you like but the folder name should be then changed accordingly. Similar to the Templates folder, the static folder is also located in the root directory of the project.&#xA;&#xA;This is all the necessary configuration for simple full stack application you can make, still we have to configure the backend and write the actual logic for the application. We&#39;ll move on to the second part of this section i.e. creating the CRUD API.&#xA;&#xA;## Making an CRUD API&#xA;&#xA;There are certain things to be planned before we move ahead like the selection of database, the schema of the database and basically the structure of the backend. For now, we&#39;ll go with SQL database, a REST API with PostgreSQL hosted locally on the system. &#xA;&#xA;### Configure the database &#xA;&#xA;To configure the database, we simply need to first create the database. This can be done by using a CLI or the Admin interface of the particular database we are working with in our case it&#39;s PostgreSQL. Postgres comes with pgAdmin to create and manage the databases and the server locally. The detailed explanation of the [database creation](https://mr-destructive.github.io/techstructive-blog/django/python/web-development/2022/01/16/Django-Basics-P8.html) is explained in the previous parts of the series. &#xA;&#xA;After creating the database locally, you need to tweak the `settings.py` file database configuration object as per your credentials of the database instance.&#xA;&#xA;```python&#xA;# project_name / settings.py&#xA;&#xA;DATABASES = {&#xA;    &#39;default&#39;: {&#xA;        &#39;ENGINE&#39;: &#39;django.db.backends.postgresql&#39;,&#xA;        &#39;NAME&#39;: &#39;blogapp&#39;,&#xA;        &#39;USER&#39;: &#39;postgres&#39;,&#xA;        &#39;PASSWORD&#39;: &#39;@1234567&#39;,&#xA;        &#39;HOST&#39;: &#39;localhost&#39;,&#xA;        &#39;PORT&#39;: &#39;5432&#39;,&#xA;    }&#xA;}&#xA;```&#xA;   If you have already created the databse, there is no problem in reusing the same one but for production level applications make sure to keep things separate. Also the model name has to be distinct in each app to create tables in the database.&#xA;&#xA;### Creating Model&#xA;&#xA;We can now finally move on to the logic of the application, this is the part which acts as the backbone of backend development in django. You need to design the model carefully and programmatically. Make sure to include most of the logic as you can inside the models as it is a standard and a good practise to develop in professional projects. &#xA;&#xA;For this app, we simply are going to create a blog post model. We are going to have some simple attributes and structure.&#xA;&#xA;```python&#xA;# app_name / models.py&#xA;&#xA;from django.db import models&#xA;from django.contrib.auth.models import User&#xA;&#xA;class Article(models.Model):&#xA;    title = models.CharField(max_length=127, verbose_name=&#34;headling&#34;)&#xA;    post = models.TextField(verbose_name=&#39;content&#39;)&#xA;    author = models.ForeignKey(User, on_delete=models.CASCADE)&#xA;    created = models.DateTimeField(auto_now_add=True)&#xA;    updated = models.DateTimeField(auto_now=True)&#xA;&#xA;    def __str__(self):&#xA;        return self.title&#xA;&#xA;    class Meta:&#xA;        verbose_name_plural = &#39;Articles&#39;&#xA;```   &#xA;This is again a simple model for demonstration of a lot of things like the `str` function, `Meta` class, `verbose_names` and so on. You can design models as per your requirements and proper planning. It really determines the structure of an application.&#xA;&#xA;Now, after we have created the models, we need to migrate the schema into the database. Remember it acts as a checkpoint in the history of changes to the database. &#xA;&#xA;```&#xA;python manage.py makemigrations&#xA;```&#xA;This will create a checkpoint in the `migrations` folder in the app. &#xA;&#xA;To make changes to the database, we use the migrate command.&#xA;&#xA;```&#xA;python manage.py migrate&#xA;```&#xA;&#xA;Here&#39;s a quick demonstration of everything covered so far.&#xA;&#xA;![app setup and config](https://res.cloudinary.com/dgpxbrwoz/image/upload/v1643648979/blogmedia/xnqabmxtenajntqepqo3.gif)&#xA;&#xA;### Creating Form&#xA;&#xA;Django has a functionality to convert the fields in a model to a form which can be used for input in the frontend side. This allows us to just configure the Form and map the form to a view for the specific operation and simply add a tiny snippet of HTML to make a basic API and thus handle the entire heavy lifting.&#xA;&#xA;[Model Forms](https://docs.djangoproject.com/en/4.0/topics/forms/modelforms/#modelform) are the type of forms in django that does the above mentioned functionality. We need to create a form class in a new file inside the app called `forms.py` and add the following content:&#xA;&#xA;```python&#xA;# app_name / forms.py&#xA;&#xA;from django import forms&#xA;from .models import Article&#xA;&#xA;class ArticleForm(forms.ModelForm):&#xA;    class Meta:&#xA;        model = Article&#xA;        fields = [&#xA;            &#39;title&#39;,&#xA;            &#39;post&#39;,&#xA;        ]&#xA;```&#xA;   In this snippet, we are creating a Form called `ArticleForm` it can be anything but (Model_NameForm) is a standard way to name a Model Form. It is a child class of the ModelForm, i.e. it inherits the parent&#39;s attributes/properties and methods. So we have the access to it&#39;s Meta class which defines some of the attributes like model, fields, etc. &#xA;&#xA;   Here, we are only adding `title` and `post`, because `created` and `updated` are automatically added. So what about `author`? Well, we can add it automatically by processing the request that will be sent when the form is submitted (we&#39;ll discus while creating views). &#xA;&#xA;   In a model form, we also have other attributes like `exclude` which is the opposite of `fields`, say you have a lot of attributes in a model and you want to skip certain fields then you don&#39;t use fields and use exclude to specify only the attributes to  be excluded. Also `widgets` which can be used to style and properly process the fields in the form to have more control on how the form should be validated and presented.&#xA;&#xA;### Updating Models&#xA;&#xA;Now, when we have chosen to use Model Form, we need to update the model logic (not the structure so no migrations). &#xA;&#xA;We&#39;ll have to add some methods and redefine certain default parameters in able to use the Class based views and Model forms to the fullest strength. &#xA;&#xA;```python&#xA;# app_name / models.py&#xA;&#xA;from django.db import models&#xA;from django.contrib.auth.models import User&#xA;from  django.core.serializers import serialize&#xA;import json&#xA;&#xA;class ArticleQuerySet(models.QuerySet):&#xA;    def serialize(self):&#xA;        list_value = list(self.values(&#34;id&#34;,&#34;author&#34;,&#34;title&#34;,&#34;post&#34;))&#xA;        return json.dumps(list_value)&#xA;&#xA;class ArticleManager(models.Manager):&#xA;    def get_queryset(self):&#xA;        return ArticleQuerySet(self.model,using=self._db)&#xA;&#xA;class Article(models.Model):&#xA;    title = models.CharField(max_length=127, verbose_name=&#34;heading&#34;)&#xA;    post = models.TextField(verbose_name=&#39;content&#39;)&#xA;    author = models.ForeignKey(User, on_delete=models.CASCADE)&#xA;    created = models.DateTimeField(auto_now_add=True)&#xA;    updated = models.DateTimeField(auto_now=True)&#xA;&#xA;    objects = ArticleManager() &#xA;&#xA;    def __str__(self):&#xA;        return self.title&#xA;&#xA;    def serialize(self):&#xA;        data = {&#xA;            &#34;id&#34;: self.id,&#xA;            &#34;title&#34;: self.title,&#xA;            &#34;author&#34;: self.author.id,&#xA;            &#34;post&#34;: self.post,&#xA;        }&#xA;        data = json.dumps(data)&#xA;        return data&#xA;&#xA;    class Meta:&#xA;        verbose_name_plural = &#39;Articles&#39;&#xA;```&#xA;   Let&#39;s break down what was added:&#xA;&#xA;- Created two new classes (`ArticleManager` and `ArticleQuerySet`)&#xA;  This was done to manage and serialize the model attributes. We need a standard like JSON to parse and return the data from the client to the server and vice versa. The `ArticleQuerySet` actually converts the `QuerySet` into list and dumps into a json object. **A QuerySet in Django is collection of SQL queries.** &#xA;- Function serialize&#xA;  The serialize function actually converts the `QuerySet` into a JSON object which in turn is used as a utility function for the model. **It returns the JSON object hence a serialized object from a queryset.**&#xA;- Editing the object for the model&#xA;  The object for the model is re initialized as a object of the `ArticleManager` class which in turn manages the and process the query set and returns the serialized object.&#xA;&#xA;  That&#39;s all done from the models for the app and now we finally move to the views.&#xA;&#xA;### Creating Views&#xA;&#xA;Now, we can start writing the views to actually add the CRUD functionality ourselves and slowly develop the frontend as well. &#xA;&#xA;To start creating views, we need to import some built-in classes used for making APIs like the Django generic views. Some of the core views(classes based) for making a CRUD API include:&#xA;1. [CreateView](https://docs.djangoproject.com/en/4.0/ref/class-based-views/generic-editing/#createview)&#xA;2. [UpdateView](https://docs.djangoproject.com/en/4.0/ref/class-based-views/generic-editing/#updateview)&#xA;3. [DeleteView](https://docs.djangoproject.com/en/4.0/ref/class-based-views/generic-editing/#deleteview)&#xA;4. [DetailView](https://docs.djangoproject.com/en/4.0/ref/class-based-views/generic-display/#detailview) &#xA;5. [ListView](https://docs.djangoproject.com/en/4.0/ref/class-based-views/generic-display/#listview)&#xA;&#xA;These views help in making the API in Django easily. We simply need to add the template name to add a customize the layout, make forms, define the sets of fields to input from the client and which fields to process by the server side.&#xA;&#xA;Let&#39;s create them one by one and understand the structure of class based views.&#xA;&#xA;#### Create View&#xA;&#xA;This view as the name suggests is used for creating a entry in a model(database) or we can also say that it will act as the `Create`(POST request) in the CRUD API.&#xA;&#xA;```python&#xA;# app_name / views.py&#xA;&#xA;from django.views.generic.edit import ( &#xA;    CreateView, &#xA;    UpdateView, &#xA;    DeleteView )&#xA;&#xA;from .models import Article&#xA;from .forms import ArticleForm&#xA;&#xA;class ArticleCreateView(CreateView):&#xA;    model = Article&#xA;    form_class = ArticleForm&#xA;    success_url = &#39;/api/&#39;&#xA;&#xA;    def form_valid(self, form):&#xA;        form.instance.author = self.request.user&#xA;        return super(ArticleCreateView, self).form_valid(form)&#xA;```&#xA;&#xA;Here, we have created a Class based view called `ArticleCreateView` which inherits the `CreateView` class from the `django.views.generic.edit` module. Here as similar to the `ArticleForm` class, we have certain attributes to pass like the model, form class and the success url. &#xA;- The `model` simply indicates to which table or model we are creating the view for.&#xA;- The `form_class` denotes the ModelForm class we are using for the Create view.&#xA;- The `success_url` is the url route to which to redirect after a successful POST request/form submission.&#xA;&#xA;Remember we discussed about adding `author` field automatically from the request from the form. This process is carried out in the `form_valid` function. [Form_valid](https://docs.djangoproject.com/en/4.0/ref/class-based-views/mixins-editing/#django.views.generic.edit.FormMixin.form_valid) is a helper built-in function to redirect to the success_url when the form data is being posted. Before actually doing that, we add the author field by setting it as the User by accessing the `self.request` object. The `self.request` object actually holds the meta-data about the request that is being sent to the API so we can access the User who is currently logged in. &#xA;&#xA;Though we don&#39;t have a login system, we can assume the user is logged in with some user account. Now to handle certain exceptions we can add [Mixins](https://docs.djangoproject.com/en/4.0/topics/auth/default/#django.contrib.auth.mixins.AccessMixin). We can use [LoginRequiredMixin](https://docs.djangoproject.com/en/4.0/topics/auth/default/#django.contrib.auth.mixins.LoginRequiredMixin) to only allow the form submission for logged in users and so on. &#xA;&#xA;#### Update View&#xA;&#xA;```python&#xA;# app_name / views.py&#xA;&#xA;class ArticleUpdateView(UpdateView):&#xA;    model = Article&#xA;    form_class = ArticleForm&#xA;    success_url = &#39;/api/&#39;&#xA;&#xA;    def form_valid(self, form):&#xA;        form.instance.author = self.request.user&#xA;        return super(ArticleUpdateView, self).form_valid(form)&#xA;```&#xA;   This is quite similar to the `CreateView` except we have to use `UpdateView` as the base model of the `ArticleUpdateView` the rest of the attributes remain the same and functioning of the form like pre-rendering the fields to edit are all managed by the `UpdateView` out of the box.&#xA;&#xA;#### Delete View&#xA;&#xA;```python&#xA;# app_name / views.py&#xA;&#xA;class ArticleDeleteView(DeleteView):&#xA;    model = Article&#xA;    form_class = ArticleForm&#xA;    success_url = &#39;/api/&#39;&#xA;&#xA;    def form_valid(self, form):&#xA;        form.instance.author = self.request.user&#xA;        return super(ArticleDeleteView, self).form_valid(form)&#xA;```&#xA;&#xA;Again, here we do not have to change anything as for attributes and the `valid_form` function. We&#39;ll see the details when we look at the templates.&#xA;&#xA;#### List View&#xA;&#xA;```python&#xA;#app_name / views.py&#xA;&#xA;class ArticleView(ListView):&#xA;    model = Article&#xA;    template_name = &#39;api/list.html&#39;&#xA;&#xA;    def get_context_data(self, **kwargs):&#xA;        context = super().get_context_data(**kwargs)&#xA;        context[&#39;articles&#39;] = Article.objects.filter(author=self.request.user)&#xA;        return context&#xA;```&#xA;   This view is for listing all the objects/articles for the current logged in author. If we want something like a homepage for all the articles, the thing is as simple as replacing&#xA;&#xA;```python&#xA;context[&#39;articles&#39;] = Article.objects.filter(author=self.request.user)&#xA;```&#xA;by&#xA;```python&#xA;context[&#39;articles&#39;] = Article.objects.all()&#xA;```&#xA;   You can even apply filters for fetching the latest post by `Article.objects.filter().order_by(&#34;-created&#34;)`. You get the idea. It boils down to simple python and library function.&#xA;   Also, we have a new attribute `template_name` which allows us to use the data in our custom template. In this case we will create the template in the `templtes/api/` folder called `list.html`. The function `get_context_data` is used to fetch the objects from the database and return it as a special dictionary(JSON object) called `context` which can be rendered in the templates by the key in this case, the `articles` key will give us all the articles by the current user. &#xA;&#xA;#### Detail View&#xA;&#xA;```python&#xA;# app_name / views.py&#xA;&#xA;class ArticleDetailView(DetailView):&#xA;    model = Article&#xA;    template_name = &#39;api/post.html&#39;&#xA;```&#xA;   As opposite to the ListView, we have the DetailView that renders the details of the particular article. Here we don&#39;t have to write the `get_context_data` function as the default object for accessing the model data is `object`. So, we simply need to specify the `template_name` and the `model`. Here, the template is `api/post.html` in the templates folder.&#xA;&#xA;### Mapping the URLS&#xA;&#xA;After completing the views, we can map those into a urls to access them as endpoints in the api app. Let&#39;s build upon the `urls.py` file that we created with no url paths.&#xA;&#xA;```python&#xA;# app_name / urls.py&#xA;&#xA;from django.urls import path&#xA;from .views import ( &#xA;        ArticleView, ArticleDetailView, ArticleCreateView, &#xA;        ArticleUpdateView, ArticleDeleteView&#xA;        )&#xA;&#xA;urlpatterns = [&#xA;        path(&#39;&#39;, ArticleView.as_view(), name=&#34;listpost&#34;),&#xA;        path(&#39;article/&lt;pk&gt;/&#39;, ArticleDetailView.as_view(), name=&#34;detailpost&#34;),&#xA;        path(&#39;create/&#39;, ArticleCreateView.as_view(), name=&#34;createpost&#34;),&#xA;        path(&#39;update/&lt;pk&gt;/&#39;, ArticleUpdateView.as_view(), name=&#34;updatepost&#34;),&#xA;        path(&#39;delete/&lt;pk&gt;/&#39;, ArticleDeleteView.as_view(), name=&#34;deletepost&#34;),&#xA;]&#xA;```&#xA;   So, we can see the views are imported from the .views and are mapped to a particular route. We use `.as_view` function to take a request from a callable class based view and returns the processed response. The `&lt;pk&gt;` is the id for accessing a particular object. We use the id for detail view, update and delete views. &#xA;&#xA;### Creating Templates and Static files&#xA;&#xA;We now, have to join the final piece of the puzzle i.e. to create templates. It&#39;s quite simple but requires a bit of logic to connect things together. The backend is handled flawlessly by Model Form and Generic views, we simply need to put simple HTML and Django templating language to its correct use. &#xA;&#xA;```html&#xA;# templates / index.html&#xA;&#xA;&lt;!DOCTYPE html&gt;&#xA;&lt;html lang=&#34;en&#34;&gt;&#xA;&lt;head&gt;&#xA;    &lt;meta charset=&#34;UTF-8&#34;&gt;&#xA;    &lt;title&gt;Django Blog&lt;/title&gt;&#xA;    {% load static %}&#xA;    &lt;link rel=&#34;stylesheet&#34; href=&#34;{% url &#39;css/style.css&#39; %}&#34;&gt;&#xA;&lt;/head&gt;&#xA;&lt;body&gt;&#xA;    &lt;h1&gt;Articles&lt;/h1&gt;&#xA;   {% block body %}&#xA;   {% endblock %}&#xA;&lt;/body&gt;&#xA;&lt;/html&gt;&#xA;```&#xA;   A simple HTML doc with link to a stylesheet. We also have a block to further inherit this as the base template.&#xA;&#xA;```css&#xA;# static / css / style.css&#xA;&#xA;body &#xA;{&#xA;    background-color:#1d1dff;&#xA;    color:white;&#xA;}&#xA;&#xA;h1&#xA;{&#xA;    text-align:center&#xA;    font-family: monospace;&#xA;}&#xA;a{&#xA;    text-decoration-color: #00ffff;&#xA;    color: #ff6600;&#xA;}&#xA;&#xA;p&#xA;{&#xA;    color:#ff6600;&#xA;    font-weight:500;&#xA;}&#xA;&#xA;ul&#xA;{&#xA;    list-style-type:square;&#xA;}&#xA;```&#xA;&#xA;The below template is a detail view page, that renders the details of the article. We are using the `object` key from the `context` dictionary provided by default as mentioned [here](). We are also embedding the `Update` and `Delete` buttons to manage the Article. &#xA;&#xA;This is the time to explain about the dynamic urls in Django. We have used the `{% url &#39;updatepost&#39; object.id %}` to create a dynamic url that will redirect to the `updatepost` url and parse with it the id of the object. This is important as the url itself takes the `&lt;pk&gt;` value to update the post. So we just pass the id like a parameter to the URL. This is the way we create dynamic urls in Django templates which is quite similar to static file urls. &#xA;&#xA;```html&#xA;# templates / app_name / post.html&#xA;&#xA;{% extends &#39;index.html&#39; %}&#xA;&#xA;{% block body %}&#xA;    &lt;h2&gt;{{ object.title&#34; }}&lt;/h2&gt;&#xA;    &lt;p&gt;{{ object.post&#34; &lt;/p&gt;&#xA;&#xA;    &lt;button type=&#34;submit&#34; onclick=&#34;window.location.href=&#39;{% url &#39;updatepost&#39; object.id %}&#39;&#34;&gt;&#xA;    Update&#xA;    &lt;/button&gt;&#xA;&#xA;    &lt;button type=&#34;submit&#34; onclick=&#34;window.location.href=&#39;{% url &#39;deletepost&#39; object.id %}&#39;&#34;&gt;&#xA;    Delete&#xA;    &lt;/button&gt;&#xA;&#xA;{% endblock %}&#xA;```&#xA;![CRUD API - Detail View](https://res.cloudinary.com/dgpxbrwoz/image/upload/v1643911468/blogmedia/n6z33yu4nq9tjsr6nba2.png)&#xA;&#xA;We have used the dynamic URLs in Update and Delete View buttons. &#xA;&#xA;The below template is for creating a home page like structure but for the current logged in user. We are displaying all the articles of the logged in the form of a list with a for loop as discussed in the  templating tutorial part. We have access to the key `articles` from the dictionary `context` and hence we iterate over the loop from that object and display the title with the url for the post detail view.&#xA;&#xA;Here as well we are using the dynamic url by parsing the `article.id` as the `&lt;pk&gt;` primary key to the url. &#xA;```html&#xA;# templates / app_name / list.html&#xA;&#xA;{% extends &#39;index.html&#39; %}&#xA;&#xA;{% block body %}&#xA;    &lt;ul&gt;&#xA;        {% for article in articles %}&#xA;        &lt;li&gt;&lt;a href=&#34;{% url &#39;detailpost&#39; article.id %}&#34;&gt;{{ article.title }}&lt;/a&gt;&lt;/li&gt;&#xA;        {% endfor %}&#xA;    &lt;/ul&gt;&#xA;{% endblock %}&#xA;```&#xA;![CRUD API - Home Page/List View](https://res.cloudinary.com/dgpxbrwoz/image/upload/v1643911630/blogmedia/lakpdkldqwopimhixxya.png)&#xA;&#xA;&#xA;```html&#xA;# templates / app_name / article_confirm_delete.html&#xA;&#xA;{% extends &#39;index.html&#39; %}&#xA;&#xA;{% block body %}&#xA;    &lt;form method = &#34;post&#34;&gt;&#xA;        {% csrf_token %}&#xA;        &lt;p&gt; Are you sure to delete Post:&lt;b&gt; {{ object.title }}&lt;/b&gt; ? &lt;/p&gt;&#xA;        &lt;input type=&#34;submit&#34; value=&#34;Delete&#34;/&gt;&#xA;{% endblock %}&#xA;```&#xA;![CRUD API - Delete View](https://res.cloudinary.com/dgpxbrwoz/image/upload/v1643911775/blogmedia/qvilf8p3qpj9qfdkpkn4.png)&#xA;&#xA;```html&#xA;# templates/ app_name / article_form.html&#xA;&#xA;&lt;form method=&#34;POST&#34; enctype=&#34;multipart/form-data&#34;&gt;&#xA;    {% csrf_token %}&#xA;    {{ form.as_p&#34; }}&#xA;    &lt;input type=&#34;submit&#34; /&gt;&#xA;&lt;/form&gt;&#xA;```&#xA;&#xA;   This is the template that forms the basis for all the forms like Create and Update. We use the template variable `{{ form }}` to render the form in the template. Additionally we use `.as_p` to make the form fields as a paragraph tag in HTML. The `{% csrf_token %}` is the Cross site forgery token allowing secure posting of a form. Don&#39;t bother about it much it is important for identifying the user posting the data from the site. The final piece of element is the submit button used to submit the form.  &#xA;&#xA;![CRUD API - CREATE View](https://res.cloudinary.com/dgpxbrwoz/image/upload/v1643911374/blogmedia/xbwxtg3ry2x4oegtzxmi.png)&#xA;&#xA;![CRUD API - UPDATE View](https://res.cloudinary.com/dgpxbrwoz/image/upload/v1643911726/blogmedia/zeapgshsk9x9agsw4gsu.png)&#xA;&#xA;For any references, you can take a look at the [GitHub](https://github.com/Mr-Destructive/django-blog) repository for the CRUD API in pure Django.&#xA;&#xA;## Conclusion&#xA;&#xA;So, from this section, we were able to create a CRUD API in pure Django. This should be the end of the core series of Django Basics, but there are more parts coming up still which are not basics but still worth learning as a beginner. We&#39;ll further explore DRF, Forms, CORS, etc. We&#39;ll see some other libraries specific for Django. Hopefully from this tutorial series, you were able to learn something and if you have any queries or issues please let me know. &#xA;&#xA;Thank you for reading, please provide feedback on how you felt about the series. Though the series is not over, it&#39;s sufficient for a beginner to get pace in Django. Hope you had a great time. Happy Coding :)&#xA;</content>
      <type>posts</type>
    </item>
    <item>
      <title>Django Basics: Admin Section</title>
      <link>meetgor.com/django-basics-admin</link>
      <description></description>
      <pubDate>Wed, 26 Jan 2022 00:00:00 UTC</pubDate>
      <content>&#xA;## Introduction&#xA;&#xA;In the previous section, we configured the database in our Django project. We will move ahead and interact with the Admin Section in Django. Django has a built-in Admin Section which we can use to manage our apps and models. We will create a admin account(superuser) and try to render our custom Model in the Admin Interface. We shall further discuss the customization in the Admin section as per our requirements and necessity. &#xA;&#xA;## What is the Admin Section?&#xA;&#xA;Admin Section is a powerful built-in utility provided by Django. It gives the administrative rights over the web project, the interface is neat and provides out of the box functionality to interact with the models in our project without us manually creating any mapping the views and urls. It is restricted to only superusers or trusted users to use as it is for administrative purpose. &#xA;&#xA;The Admin section is present by default for any django application. The interface provides the Django User and Group Model by default. Additionally we can have our own custom models to interact with. For every registered model you have the CRUD (create / read / update / delete ) functionality which makes it very easy and convenient to test the working of model before working around with APIs or moving ahead in the project.  &#xA;&#xA;## Setting up an admin account (superuser)&#xA;&#xA;In order to access the Admin section, we need to create a superuser. A superuser as the name suggests is a user who has the supreme authority for performing operations in the project in this case a web application. To create a super user we need to run a command from the command line that takes our name, email and password as input to create the super user. &#xA;&#xA;```bash&#xA;python manage.py createsuperuser&#xA;```&#xA;&#xA;This will prompt you for a couple of things like :&#xA;- `username` the default is `admin`.&#xA;- `email` it&#39;s not necessary to put one.&#xA;- `password` should be at least eight characters long&#xA;&#xA;The password input will be silent which means you cannot see what you type for security reasons, and the password field will be confirmed once, so you&#39;ll have to enter the password once more. But that&#39;s all you have to do to create a super user in Django for your web project.&#xA;&#xA;![createsuperuser demo](http://res.cloudinary.com/dgpxbrwoz/image/upload/v1643198415/blogmedia/etubc7efwls47n3cj2bw.gif)&#xA;&#xA;## Navigating the admin section &#xA;&#xA;After creating a superuser, we can now navigate the admin section from the browser. The admin section is by default located in the `/admin` url-route i.e. you need to navigate to `http://127.0.0.1:8000/admin` here `8000` can be any port as your preferred port number for the django application. &#xA;&#xA;After vising the Admin route, you will be prompted to a Login Screen. You simply need to add in the username and password which you entered while creating the superuser a while ago and you should be in the Admin Section. The default admin section as of Django `3.2.9` looks like following: &#xA;&#xA;![Django Admin Section](http://res.cloudinary.com/dgpxbrwoz/image/upload/v1643199349/blogmedia/h0k9jkqxozrtxvwsapkj.png)&#xA;&#xA;## Components of the Admin Section&#xA;&#xA;The Admin interface looks quite simple but is quite powerful and customizable. We have the Default Models in Django which are labelled in the `Authentication and Authorization` section namely the `Users` and `Groups`. You can see we have `+ Add` and the `Change` links to actually create the data associated with those Models. In the Admin Section you can basically play around with your models, it was not designed to act as the frontend for your application that&#39;s what the Django [documentation](https://docs.djangoproject.com/en/4.0/ref/contrib/admin/#module-django.contrib.admin) says and is absolutely correct. &#xA;&#xA;So, we don&#39;t have much things to explore when the UI is concerned as it is simple and straight forward to understand. We&#39;ll dive into how to register our models into the Admin section and from there on we can explore the UI to perform CRUD operations.&#xA;&#xA;### Built-in Models&#xA;&#xA;Django has two built-in and registered models in the Admin Section as said earlier.&#xA;&#xA;1. Users&#xA;2. Groups&#xA;&#xA;Users is basically the Django&#39;s User Model which provides the basic Authorization functionalities which further can be added to the we application. The Super User that was created from the `createsuperuser` command was associated with the Django User model. &#xA;&#xA;We have basic fields in the User model like:&#xA;&#xA;1. Username&#xA;2. Email-ID&#xA;3. Password&#xA;&#xA;If we go to the route `http://127.0.0.1:8000/admin/auth/user/add/`, we can see a form like UI that allows us to add a User.&#xA;&#xA;![User Creation Form - Admin](http://res.cloudinary.com/dgpxbrwoz/image/upload/v1643208170/blogmedia/m3fdul2qcmgvgegm5r6y.png)&#xA;&#xA;But there is no option for the `Email-ID` that&#39;s because for the User model has been modifies from the base [User Model](https://docs.djangoproject.com/en/4.0/ref/contrib/auth/#user-model) and we can see the `superuser` has all the attributes the `User` class has like the email, first name, last name and so on. &#xA;&#xA;![Super User Model - Admin](http://res.cloudinary.com/dgpxbrwoz/image/upload/v1643208828/blogmedia/wrdfkiqaqmw4wxtpopgn.png)&#xA;&#xA;We can even extend this functionality or modify the existing attributes of the User Model in our custom Model. For example, we can add Age, Phone number, etc in to our Custom User Model. How? We&#39;ll look into that later but that is to give an idea about the User Model.&#xA;&#xA;There is a lot more than just the details like Username, email and password. We need a way to manage which user is allowed to access what components. So, this is termed as `Permissions` in the User model, for the super user we might have the access to the admin page but a regular User might not. This is a permission which is by default implemented by Django in the User model. Like wise we can extend this functionality to add more permissions depending on the Model we are working with. &#xA;&#xA;### Groups &#xA;&#xA;This is the model which can hold a group of certain Model. The typical example hers is a group of User and its permissions. We can have a group for the developers of a project(this project) and a separate Group for rest of the Users. This creates a well-defined boundary for different types of User in a larger application.  &#xA;&#xA;Currently, we don&#39;t have any groups created by default. Since it is a concept to be learnt for a quite large project with thousands of Users.&#xA;&#xA;## Registering Models in Admin Section&#xA;&#xA;Now, what are the default Admin section looks like, we can move on to register our own models in the Admin section. To do that, inside the app folder(a django app) you will see a `admin.py` file. Make sure to be in the app in which you have created a model. We need to register a Model to the admin section. &#xA;&#xA;```python&#xA;# app_name/admin.py&#xA;&#xA;from django.contrib import admin&#xA;from .models import Article&#xA;&#xA;admin.site.register(Article)&#xA;```&#xA;The `admin.site.register` basically adds a Model to the Admin Interface. &#xA;The article Model is defined as follows:&#xA;&#xA;```python&#xA;# app_name/models.py&#xA;&#xA;from django.db import models&#xA;&#xA;class Article(models.Model):&#xA;    title = models.CharField(max_length=127)&#xA;    post = models.TextField()&#xA;    created = models.DateTimeField(auto_now_add=True)&#xA;    updated = models.DateTimeField(auto_now=True)&#xA;```&#xA;&#xA;This will add the Model `Article` in the Admin Section. We can now perform CRUD operations in the Admin section. &#xA;   &#xA;## Performing actions with Admin Section&#xA;&#xA;So, perform CRUD operations, we can navigate to the Model Article and simply click the `Add Article` Button to add a object of the model Article. We will be presented a form to fill. Now here we, can see the fields which are actually to be inputted by the user. We don&#39;t see the fields like `created` and `updated` as they are automatically set as per the current time. &#xA;&#xA;![Add Article - Admin](http://res.cloudinary.com/dgpxbrwoz/image/upload/v1643215768/blogmedia/bq0gvbxhhxzwiwutgqpi.png)&#xA;After filling this form you will see `Article object (1)` which looks like a non-sense thing to look at. This is where the `__str__` [function](https://docs.djangoproject.com/en/4.0/ref/models/instances/) comes handy and saves the day. &#xA;&#xA;![Article Object](http://res.cloudinary.com/dgpxbrwoz/image/upload/v1643215997/blogmedia/sy7ygnskxfl0psgaj4z4.png)&#xA;&#xA;Now, we can see we also have the ability to Delete and Update the Post. This is the best thing about the Django admin interface. It&#39;s quite intuitive for complex model to be tested before moving ahead and making necessary corrections if required.&#xA;&#xA;### Modifying the Model (without migrations)&#xA;&#xA;Now, at this stage if we forgot to add the `__str__` function, we need to add it into our models. But what about the migrations? We do not need to migrate this changes as there is no change in how to model is structures. We are changing how to Admin Interface should present our model. So, we&#39;ll make changes to our model but only aesthetically. &#xA;&#xA;```python&#xA;#app_name/models.py&#xA;&#xA;from django.db import models&#xA;&#xA;class Article(models.Model):&#xA;    title = models.CharField(max_length=127)&#xA;    post = models.TextField()&#xA;    created = models.DateTimeField(auto_now_add=True)&#xA;    updated = models.DateTimeField(auto_now=True)&#xA;&#xA;    def __str__(self):&#xA;        return self.title&#xA;```&#xA;&#xA;And now if we refresh the Admin page, we can see the title is the object name :)&#xA;&#xA;![Model str function](http://res.cloudinary.com/dgpxbrwoz/image/upload/v1643216721/blogmedia/vwyoccgmhnl4aosqc6qf.png)&#xA;&#xA;This looks a trivial change but makes a big difference for large applications and dataset. &#xA;&#xA;### Verbose name&#xA;&#xA;We can add a verbose name for an attribute inside an Model. A verbose name is a human readable name for a field. So, let&#39;s say we have a attribute/field called `fname`, the person who might have created the model might know it stands for `first name` but someone else might not. So in this case, we can add the `verbose_name` to be used as the name in the Admin Section. &#xA;&#xA;We also have `verbose_name_plural` which will be handy for a model name. We do not wnat Django to just add `s` before any Model name, it might look good for `Articles`, `Questions`, `Posts` but for `Quizs`, `Categorys`, `Heros` look too funny than `Quizzes`, `Categories` and `Heroes` respectively. &#xA;&#xA;```python&#xA;# app_name/models.py&#xA;&#xA;from django.db import models&#xA;&#xA;class Article(models.Model):&#xA;    title = models.CharField(max_length=127, verbose_name=&#34;headline&#34;)&#xA;    post = models.TextField(verbose_name=&#39;content&#39;)&#xA;    created = models.DateTimeField(auto_now_add=True)&#xA;    updated = models.DateTimeField(auto_now=True)&#xA;&#xA;    def __str__(self):&#xA;        return self.title&#xA;&#xA;```&#xA;&#xA;![Verbose Name Attribute](https://res.cloudinary.com/dgpxbrwoz/image/upload/v1643219495/blogmedia/v5zphhohi27tvwsa3gsp.png)&#xA;&#xA;Again, we do not need to migrate any changes to the database as it is not a logical change in the schema of the database.&#xA;&#xA;```python &#xA;# app_name/models.py&#xA;&#xA;from django.db import models&#xA;&#xA;class Article(models.Model):&#xA;    title = models.CharField(max_length=127, verbose_name=&#34;title&#34;)&#xA;    post = models.TextField(verbose_name=&#39;content&#39;)&#xA;    created = models.DateTimeField(auto_now_add=True)&#xA;    updated = models.DateTimeField(auto_now=True)&#xA;&#xA;    def __str__(self):&#xA;        return self.title&#xA;&#xA;    class Meta:&#xA;        verbose_name_plural = &#39;Articless&#39;&#xA;```&#xA;&#xA;![Verbose Name Plural](https://res.cloudinary.com/dgpxbrwoz/image/upload/v1643219521/blogmedia/sf77v52ic9dheyvv0pvi.png)&#xA;&#xA;Though `Articless` sounds weird, it is just made for realizing that Django by default adds `s` to the Model name for representing as a Class in the Admin. &#xA;&#xA;### Admin Register Class&#xA;&#xA;We can even list not only the title but many things in a particular format, we need to define a class which will be derived by the `admin.ModelAdmin` class. &#xA;&#xA;```python&#xA;# app_name/admin.py&#xA;&#xA;from django.contrib import admin&#xA;from .models import Article&#xA;&#xA;@admin.register(Article)&#xA;class Article(admin.ModelAdmin):&#xA;    list_display = [&#xA;            &#39;title&#39;,&#xA;            &#39;created&#39;,&#xA;            &#39;updated&#39;,&#xA;            ]&#xA;```&#xA;&#xA;![Admin-List](https://res.cloudinary.com/dgpxbrwoz/image/upload/v1643217326/blogmedia/y32jmboypbmzyypt68l1.png)&#xA;&#xA;We are using the `admin.ModelAdmin` class as the base class to overwrite the `list_display` list which will display the mentioned items in the Admin Section as a list. We are also using the `admin.register` as the class Decorator to actually register the model in the Admin section. &#xA;&#xA;Now, we can see a lot of customization in the Admin section. This is just a glimpse of what customization is. This can be tailored as per your model and needs. &#xA;&#xA;## Conclusion&#xA;&#xA;So, in this section we were able to interact with the Admin section in Django. We were able to register our custom Model in the Admin interface and then customize the format of how it is displayed in the interface. Hopefully, from this part we are able to interact with the data and get our application to test how to plan ahead. In the next section we shall cover how to map up all of these together to create something meaningful and finally understand the Django development process. &#xA;&#xA;Thank you for reading, if you have any questions or improvements to suggest, please let me know in the comments. I&#39;ll be grateful if you you provide a feedback. Happy Coding :)&#xA;</content>
      <type>posts</type>
    </item>
    <item>
      <title>Django Basics: Database Configurations</title>
      <link>meetgor.com/django-database-conf</link>
      <description></description>
      <pubDate>Fri, 21 Jan 2022 00:00:00 UTC</pubDate>
      <content>&#xA;## Introduction&#xA;&#xA;In this part of the series, we will create an external database and configure the settings for that database. We also look into the process of migrations which is to convert a model which we created in the previous part into the actual structure/schema for the database. I&#39;ll be using `PostgreSQL` for most of the demonstrations but it should be similar for other database management tools. This part will make your Django project link to a local database.  &#xA;&#xA;## Selecting a Database&#xA;&#xA;If you have read my previous article about models, you would have got a glimpse of the tools to manage a database, but not quite to choose a database for your project. This section covers that specifically. We will see what options you have while selecting a database.&#xA;&#xA;- SQL databases&#xA;  - sqlite&#xA;  - PostgreSQL&#xA;  - MySQL&#xA;  - MariaDB&#xA;  - Oracle&#xA;&#xA;&#xA;Selecting a database hugely depends on the type of application you are going to make, but most of the time it&#39;s SQL as a choice just because it has been dominated for a variety of application types over 4 decades. Still, NoSQL is growing in popularity and has some advantages over SQL in many modern applications. You need to analyze your project a bit deeper and understand the flow of data in a better way to make a decision about SQL and No-SQL, but most of the time it&#39;s gonna be SQL. &#xA;&#xA;**Also Django doesn&#39;t officially support NoSQL, so you&#39;ll have to turn up some third-party libraries to integrate and manage a database.**&#xA;&#xA;After deciding the type of database, you have one more decision to make here. It&#39;s picking up a DBMS tool. There are a lot of databases like PostgreSQL, MySQL, MariaDB, Oracle, etc. you need to pick whichever you feel comfortable and the one which suits your project architecture and requirements more closely. Though there might be very few differences in all the SQL Database tools there are a few things that distinguishes one from the other. &#xA;&#xA;## Creating a Database&#xA;&#xA;To create a database, you need to go to the Admin app of the DBMS tool you are using, for Postgres it&#39;s pgAdmin, for MySQL it&#39;s MySQL Administrator or PHPMyAdmin. You need to do the research for setting up a database locally for your project. But Django already is paired with `SQLite` which is a relational database but with a few quirks. It is really great to get started with a project without creating or managing an entire database system. The SQLite database is all contained in a file called `db.sqlite3`. &#xA;&#xA;If you want to work on a particular database like PostgreSQL, MySQL, etc. you need to create the database using the management tool and keep the configuration data like `name`, `host`, `password`, etc. after creating the database. &#xA;&#xA;I&#39;ll give a demo of creating a simple database in PostgreSQL but mostly it is a bit different in other DBMS tools as each of them have their own GUI applications. Install [Postgres](https://www.postgresql.org/download/) and [pgAdmin](https://www.pgadmin.org/download/).&#xA;&#xA;This is a demonstration of creating a database in pgAdmin -3 &#xA;&#xA;![postgres - db creation](https://res.cloudinary.com/dgpxbrwoz/image/upload/v1642325269/blogmedia/postgcreate_wnmyre.gif)&#xA;&#xA;This is how you create a database in pgAdmin-3, it should be quite straightforward and simple to follow in other DBMS tools as well. You will also require a password to open the Admin interface for these tools, so keep that password handy we&#39;ll require that later.&#xA;&#xA;The following is the process to create a database/schema in MySQL&#xA;![mysql - db creation](https://res.cloudinary.com/dgpxbrwoz/image/upload/v1642327473/blogmedia/mysqlcreate_bnkqxg.gif)&#xA;&#xA;This will create an empty database in your local machine. We&#39;ll want our Django project to link that particular database and use it inside its applications. In the next part, we&#39;ll configure the `settings.py` file to access the database from the local machine.&#xA;&#xA;## Configurations for Database&#xA;&#xA;We need to configure the `settings.py` file for integrating the database in our project. Django has a dedicated section for the database in that file. By default, the database configuration is created for the SQLite database which as I said earlier it is the default database that Django uses if not specified and configured. &#xA;&#xA;So, when you first see the configuration for the database in the `settings.py` file, you will see configuration like the following:&#xA;&#xA;```python&#xA;DATABASES = {&#xA;    &#39;default&#39;: {&#xA;        &#39;ENGINE&#39;: &#39;django.db.backends.sqlite3&#39;,&#xA;        &#39;NAME&#39;: BASE_DIR / &#39;db.sqlite3&#39;,&#xA;    }&#xA;}&#xA;```&#xA;For PostgreSQL or any other database, we will require more things than the `sqlite` configuration. Namely, we will need the following:&#xA;&#xA;- `name` of the database&#xA;- `user` of the database&#xA;- `password` for that user&#xA;- `host` and `port` for the database. &#xA;&#xA;The port is optional as most of the database tools pick up the default port for their purpose. For PostgreSQL, the default port is `5432` and for MySQL is `3306`. Leave it blank like `&#39;PORT&#39;: &#39;&#39;,` if you are not sure what is the port for that database. We also need to specify the `ENGINE` as it is the database backend to be used for the project. There are options for specific databases as mentioned in the [documentation](https://docs.djangoproject.com/en/4.0/ref/settings/#engine).&#xA;&#xA;**PostgreSQL**:&#xA;&#xA;In PostgreSQL, the default user is `postgres`, it might depend on your configuration and setup though. The pgAdmin will prompt you for a password when first installing the Postgres on your machine. The password to be used is for the default user of the database. The `name` is the name that you gave while creating the database in the Postgres admin section. Finally, the host is generally `localhost` as we are using the local database which is our system, and `port` as said earlier is `5432` by default for PostgreSQL.&#xA;&#xA;```python&#xA;DATABASES = {&#xA;    &#39;default&#39;: {&#xA;        &#39;ENGINE&#39;: &#39;django.db.backends.postgresql&#39;,&#xA;        &#39;NAME&#39;: &#39;blogapp&#39;,&#xA;        &#39;USER&#39;: &#39;postgres&#39;,&#xA;        &#39;PASSWORD&#39;: &#39;12345678&#39;,&#xA;        &#39;HOST&#39;: &#39;localhost&#39;,&#xA;        &#39;PORT&#39;: &#39;5432&#39;,&#xA;    }&#xA;}&#xA;```&#xA;&#xA;**MySQL**:&#xA;&#xA;For MySQL, the default `user` is `root` and the `port` is `3306`. The password is the default password you use to access the MySQL Administrator application. &#xA;&#xA;```python&#xA;DATABASES = {&#xA;    &#39;default&#39;: {&#xA;        &#39;ENGINE&#39;: &#39;django.db.backends.mysql&#39;,&#xA;        &#39;NAME&#39;: &#39;blogapp&#39;,&#xA;        &#39;USER&#39;: &#39;root&#39;,&#xA;        &#39;PASSWORD&#39;: &#39;&#39;,&#xA;        &#39;HOST&#39;: &#39;localhost&#39;,&#xA;        &#39;PORT&#39;: &#39;3306&#39;,&#xA;    }&#xA;}&#xA;```&#xA;&#xA;For further details on how to configure a Database in a Django project you can check out these articles:&#xA;- [PostgreSQL setup in Django](https://dev.to/mungaigikure/how-to-set-up-postgres-in-your-django-project-575i)&#xA;- [MySQL setup in Django](https://medium.com/@omaraamir19966/connect-django-with-mysql-database-f946d0f6f9e3)&#xA;- [Maria DB setup in Django](https://medium.com/code-zen/django-mariadb-85cc9daeeef8)&#xA;- [Mongo DB setup in Django](https://www.mongodb.com/compatibility/mongodb-and-django)&#xA;&#xA;MongoDB is a NoSQL database so, it will be quite different to set up and configure the database at least in the longer run. I&#39;ve no experience with NoSQL so please forgive me in this part. There are very rare instances you will need a NoSQL database with Django. &#xA;&#xA;There are other configurations as well which might be specific for the purpose and can be explored in the [django documentation](https://docs.djangoproject.com/en/4.0/ref/databases/).&#xA;&#xA;### Verify the database connection&#xA;&#xA;To check if the database was actually linked in the Django project, I&#39;ll introduce you to a great tool in Django: `python manage.py shell` (make sure to be in the virtual environment).&#xA;This command will open a python interpreter in the shell. It is an interactive console so that we can test some aspects in our project. For instance to check if the database is connected or not:&#xA;&#xA;Execute the code after running the command `python manage.py shell` from a virtual environment.&#xA;&#xA;```python&#xA;import django    &#xA;print(django.db.connection.ensure_connection())&#xA;```&#xA;   &#xA;   If this returns `None` you are good to go. And if the result is tons of error messages, you have something wrong in the configuration or the database itself.&#xA;&#xA;![db connection test](https://res.cloudinary.com/dgpxbrwoz/image/upload/v1642342286/blogmedia/djb-8-db-connect_l4xqqr.png)&#xA;&#xA;### Installing database adapter&#xA;&#xA;Before we can do anything with the database, we need one thing which is a **database adapter**. Now, this is dependent on the database you are using. The list is as follows:&#xA;- [psycopg2](https://pypi.org/project/psycopg2/) for PostgreSQL&#xA;- [mysqlclient](https://pypi.org/project/mysqlclient/) for MySQL and MariaDB&#xA;- [cx-Oracle](https://pypi.org/project/cx-Oracle/) for Oracle&#xA;&#xA;SQLite does not require an adapter as the database is a file stored in the base directory as `db.sqlite3`&#xA;&#xA;The above list is nothing but Python packages that allow the Django ORM (which is under the hood python) to operate the database. To install them you can simply install with `pip` as `pip install psycopg2` , `pip install mysqlclient`, and so on. Make sure you are in a python virtual environment. &#xA;&#xA;After installing the particular package, we can now move on to the migration process.&#xA;&#xA;## Migrating the models &#xA;&#xA;Now, we have a clean and fresh instance of a database created. What next? We&#39;ll now use the logic in the [previous part](https://mr-destructive.github.io/techstructive-blog/django/python/web-development/2022/01/04/Django-Basics-P7.html), where we created and designed the logic for the database i.e. `Models`. Now, we can combine our physical database i.e. the database we just created on a DBMS tool locally, and the logical model to populate and give it a structure. &#xA;&#xA;We&#39;ll perform **migration** on our database. &#xA;&#xA;This is where the magic happens and probably the step which should be carefully be executed if working with a real-time (production-level) database. Because the commands you&#39;ll run are gonna directly affect the database. &#xA;&#xA;Making a migration is a two-step process. But what is migration?&#xA;&#xA;The Django documentation states it as the version control for the database schema and takes their word for that. It is basically a folder(hidden) that stores the state of your database structure just like commits in git. &#xA;&#xA;Let&#39;s see it practically&#xA;&#xA;### Makemigrations&#xA;For actually creating tables, relations attributes in a database from a model. We use the command `makemigrations`. This command creates a file inside the `migrations` folder inside the application folder whose model has been recently created or updated. It doesn&#39;t affect the database but it creates a file which in turn after a `migrate` command will be parsed to the actual database using the ORM.&#xA;So, for any attribute or logical change inside the model we use the `makemigrations` command as below:&#xA;```&#xA;python manage.py makemigrations&#xA;```&#xA;   &#xA;   We do not use the above command if any functional change i.e. operations involving querying the database and other operations that don&#39;t affect how the database is structured or stored. Though we have to use the `makemigrations` command when the fields in the model are changed even slightly.  &#xA;&#xA;### Migrate&#xA;&#xA;To see the result or create the actual tables, attributes, and relations among the tables in the database, we need to run the command `migrate` which will see the latest file in the migration folder and execute the queries to change the schema of the database. So, this is a very powerful command that can perform SQL queries under the hood with python. The below demonstration shows the output of these two commands in a Postgres database.&#xA;&#xA;```&#xA;python manage.py migrate&#xA;```&#xA;&#xA;### Demonstration&#xA;&#xA;![db migration](https://res.cloudinary.com/dgpxbrwoz/image/upload/v1642334950/blogmedia/migration_zi6d2c.gif)&#xA;&#xA;Let&#39;s follow the GIF/video in sequence:&#xA;&#xA;1. Create the database in the DBMS tool&#xA;2. Configure `settings.py` for the database connection&#xA;3. Install `psycopg2` or DB-specific adapter.&#xA;4. Create the model.&#xA;5. Run `python manage.py makemigrations`&#xA;6. Run `python manage.py migrate` (if the above command is a success)&#xA;&#xA;Here&#39;s the model from the demo:&#xA;&#xA;```python&#xA;class Article(models.Model):&#xA;    title = models.CharField(max_length=255)&#xA;    post = models.TextField()&#xA;    created = models.DateTimeField(auto_now_add=True)&#xA;    updated = models.DateTimeField(auto_now=True)&#xA;```&#xA;&#xA;If we have multiple apps and we only want Django to migrate a model from a specific app, we can simply add the name of the app to the command. By default, Django will migrate all the models from the `INSTALLED_APPS` list so we need to specify which app to migrate explicitly.&#xA;&#xA;```&#xA;python manage.py makemigrations app_name&#xA;```   &#xA;This also applies to the `migrate` command.&#xA;&#xA;To understand the migration process more deeply, let us see another demonstration of changing the model and then applying migrations. We&#39;ll keep an eye on the `migrations` folder inside of the app in the project. &#xA;&#xA;![migration folder demo](https://res.cloudinary.com/dgpxbrwoz/image/upload/v1642338399/blogmedia/migratefolder_e7fm7n.gif)&#xA;&#xA;We can see that initially when we applied the migrations in the previous demo, there was a single migration file called `0001_initial.py` but after we altered/changed the title&#39;s `max_length` from 255 to 127 and executed the `makemigrations` command another file called `0002_alter_article_title.py` was created that only contained the changed field. This is very similar to git diff in which we are about to commit to the actual database. &#xA;&#xA;So, that was all about migrations. There is definitely a lot to be covered about migrations and databases, but I&#39;ll leave you here for now. There are a lot of things to understand and learn before we can talk more about the databases. We now have a base for other things to get our heads around. We now have a database linked to our project, still, we don&#39;t know how to use fetch or query them. That is a topic for another part.&#xA;&#xA;We didn&#39;t use SQLite database which is by default provided by Django because in production it can just listen to one request/query at a time. That is not ideal for most web applications. Still, there are use cases of this database as it is suitable for embedded database systems for storage applications in desktop/android applications. &#xA;&#xA;## Conclusion&#xA;&#xA;So, from this part of the series, we were able to configure a database more specifically an external database (not the default SQLite DB) in a Django project. The concept of migrations was understood and demonstrated with live examples. Also, the process of creating and designing models was used from the previous part to create the structure in an actual database. In the next part, we shall dive into the Admin Section that Django provides to view and tinker with the local database. If you have any queries(not database queries) then please let me know, thank you for reading, and until then Happy Coding :)&#xA;</content>
      <type>posts</type>
    </item>
    <item>
      <title>Django Basics: Creating Models</title>
      <link>meetgor.com/django-basics-models</link>
      <description></description>
      <pubDate>Tue, 04 Jan 2022 00:00:00 UTC</pubDate>
      <content>&#xA;## Introduction&#xA;&#xA;We have seen the basics of Django templating in the previous parts of the series. Now, we can move on to the more backend stuff in Django which deals with the Databases, queries, admin section, and so on. In this particular part, we&#39;ll cover the fundamental part of any application in Django i.e the `Model`. We&#39;ll understand what the model is, how to structure one, how to create relationships and add constraints on the fields, etc. &#xA;&#xA;## What ate Models?&#xA;&#xA;A model is a Django-way(Pythonic) to structure a database for a given application. It is technically a class that can act as a table in a database generally and inside of the class, the properties of it act as the attributes of that database. It&#39;s that simple. Just a blueprint to create a table in a database, don&#39;t worry about what and where is our database. We will explore the database and its configuration in the next part. &#xA;&#xA;By creating a model, you don&#39;t have to write all the basic SQL queries like &#xA;&#xA;```sql&#xA;CREATE TABLE NAME(&#xA;attrb1_name type,&#xA;attrb2_name type,&#xA;.&#xA;.&#xA;.&#xA;);&#xA;```&#xA;&#xA;If your application is quite big or is complex in terms of the relations among the entities, writing SQL queries manually is a daunting task and also quite repetitive at times. So Django handles all the SQL crap out of the way for the programmer. So Models are just a Pythonic way to create a table for the project/application&#39;s database.&#xA;&#xA;## How to create a Model?&#xA;&#xA;Creating a model for an application is as easy as creating a class in python. But hey! It&#39;s more than that as there are other questions to address while designing the class. You need to design the database before defining the fields in the model.&#xA;&#xA;OK, we&#39;ll it&#39;s not straightforward as it seems to but still for creating simple and dummy projects to start with. You can use certain tools like [lucidchart](https://www.lucidchart.com/pages/database-diagram/database-design-tool), [dbdiagrams.io](https://dbdiagram.io/home), and other tools you are comfortable with. It&#39;s important to visualize the database schema or the structure of the application before tinkering with the actual database inside the project. Let&#39;s not go too crazy and design a simple model to understand the process.&#xA;&#xA;Here&#39;s a basic model for a Blog:&#xA;&#xA;```python&#xA;#from django.db import models&#xA;from django.contrib.auth.models import User&#xA;&#xA;class Article(models.Model):&#xA;    title = models.CharField(max_length=255)&#xA;    post = models.TextField()&#xA;    author = models.ForeignKey(User, on_delete=models.CASCADE, related_name=&#39;Article&#39;)&#xA;    created = models.DateTimeField(auto_now_add=True)&#xA;    updated = models.DateTimeField(auto_now=True)&#xA;```   &#xA;&#xA;Ignore the `from django.db import models` as it is already in the file created by Django. If not, please uncomment the line and that should be good to go.&#xA;This is a basic model you might wanna play with but don&#39;t dump it anywhere. &#xA;&#xA;We define or create our models in the application inside the project. Inside the application there is already a file called `models.py` just **append** the above code into it. The application can be any application which makes the most sense to you or better create a app if not already created and name it as `article` or `post` or anything you like.&#xA;&#xA;If you are familiar with Python OOP(object-oriented programming), we have basically inherited the `models.Model` class from the `django.db` module into our model.&#xA;&#xA;If you want more such examples, let&#39;s see more such models :&#xA;&#xA;An E-Mail application core model. Attributes like `sender`, `subject` of the mail, `body` of the mail, `recipients_list` i.e. the `To:` section in a mail system and the `attachment_file` for a file attachment to a mail if any.&#xA;&#xA;```python&#xA;#from django.db import models&#xA;from user import EmailUser&#xA;&#xA;class EMail(models.Model):&#xA;    sender = models.EmailField(max_length = 255) &#xA;    subject = models.CharField(max_length = 78)&#xA;    body = models.CharField(max_length = 40000)&#xA;    recipients_list = models.ManyToManyField(EmailUser, related_name = &#39;mail_list&#39;)&#xA;    attachment_file = models.FileField(blank=True)&#xA;```&#xA;&#xA;A sample model for a note-taking app, consisting of a Note and a Book. A book might be a collection of multiple notes i.e. a single book can have multiple notes so we are using a `ManyToManyField`, what is that? We&#39;ll see that shortly.&#xA;&#xA;```python&#xA;from django.db import models&#xA;from user.models import User&#xA;&#xA;class Notes(models.Model):&#xA;    author = models.ForeignKey(User, on_delete=models.CASCADE)&#xA;    title = models.CharField(max_length = 1024)&#xA;    content = models.Textfield()&#xA;    created = models.DateTimeField(auto_now_add = True)&#xA;    modified = models.DateTimeField(auto_now = True)&#xA;    book = models.ManyToManyField(Book, related_name = &#39;book&#39;)&#xA;&#xA;class Book():&#xA;    name = models.CharField(max_length = 1024)&#xA;```   &#xA;&#xA;   These are just dummies and are not recommended to use anywhere especially in a serious project. &#xA;So, we have seen a model, but what are these fields and the constraints like `on_delete`, `max_length`, and others in the upcoming section on fields.&#xA;&#xA;## Fields in Django&#xA;&#xA;Fields are technically the attributes of the class which here is the model, but they are further treated as a attribute in a table of a database. So the model becomes a list of attributes which will be then parsed into an actual database. &#xA;&#xA;By creating attributes inside a class we are defining the structure for a table. We have several types of fields defined already by django for the ease of validating and making a constrained setup for the database schema.&#xA;&#xA;Let&#39;s look at some of the types of fields in Django Models.&#xA;&#xA;### Types of Fields&#xA;&#xA;Django has a lot of fields defined in the models class. If you want to go through all the fields, you read through the django docs [field references](https://docs.djangoproject.com/en/4.0/ref/models/fields/#model-field-types). We can access the fields from the `models` module like `name = models.CharField(max_length=10)`, this is a example of defining a attributes `name` which is a CharField. We can set the max_length which acts a constraint to the attribute as we do not want the name field to be greater than 10 and hence parsing the parameter `max_length` to 10. &#xA;&#xA;We have other field types like:&#xA;&#xA;- `IntegerField` -&gt; for an integer value.&#xA;- `TextField` -&gt; for long input of text (like text area in html).&#xA;- `EmailField` -&gt; for an single valid email field.&#xA;- `DateField` -&gt; for inputting in a date format. &#xA;- `URLField` -&gt; for input a URL field.&#xA;- `BooleanField` -&gt; for a boolean value input.&#xA;&#xA;And there are other fields as well which can be used as per requirements.&#xA;&#xA;We also have some other fields which are not directly fields so to speak but are kind of relationship defining fields like:&#xA;&#xA;- `ForeignKey` -&gt; Define a many-to-one relationship to another model/class. &#xA;- `ManyToManyField` -&gt; define a many-to-many relationship to another model/class.&#xA;- `OneToOneField` -&gt; define a one to one relationship between different tables/model/class.&#xA;&#xA;So, that&#39;s about the field types for just a feel of how to structure or design a database table using a model with some types of attributes. We also need to talk about constraints which needs to added to the fields inside the models. &#xA;&#xA;### Field Options/Arguments&#xA;&#xA;We can add constraints and pass arguments to the fields in the models. We can add arguments like `null`, `blank`, `defualt`, `choices`, etc. &#xA;&#xA;- `null=True/False` -&gt; Set a check for the entry in the table as not null in the database.&#xA;- `blank=True/False` -&gt; Set a check for the input validation to empty or not.&#xA;- `unique=True/False` -&gt; Set a constraint to make the entry unique throughout the table.&#xA;- `defualt=anyvalue` -&gt; Set a default value for the field.&#xA;- `choices=list` -&gt; Set a list of defined choices to select in the field (a list of two valued tuple).&#xA;&#xA;We also have another constraint specific to the fields like `max_length` for `CharField`, `on_delete` for ForeignKey which can be used as a controller for the model when the related model is deleted, `verbose_name` to set a different name for referencing the entry in the table/model from the admin section compared to the default name of the model, `verbose_name_plural` similar to the `verbose_name` but for referencing the entire table/model. Also `auto_now_add` and `auto_now` for `DateTimeField` so as to set the current date-time by default.&#xA;&#xA;More options and arguments that can be passed to the fields in models are given in the django docs [field options](https://docs.djangoproject.com/en/4.0/topics/db/models/#field-options)&#xA;&#xA;These are some of the options or arguments that we can or need to pass to the fields to set up a constrained schema for our database. &#xA;&#xA;### Meta class&#xA;&#xA;Meta class is a nested class inside the model class which is most of the times used for ordering the entries(objects) in the table, managing permissions for accessing the model, add constraints to the models related to the attributes/fields inside it, etc.&#xA;&#xA;You can read about the functionalities of the Meta class in the [documentation](https://docs.djangoproject.com/en/4.0/ref/models/options/).&#xA;&#xA;## Model methods&#xA;&#xA;As a class can have functions, so does a model as it is a Python class after all. We can create kind of a helper methods/functions inside the model. The model class provides a helpful `__str__()` function which is used to rename an object from the database. We also have other predefined helper functions like `get_absolute_url` that generates the URL and returns it for further redirection or rendering.&#xA;&#xA;Also, you can define the custom functions that can be used as to help the attributes inside the model class.&#xA;&#xA;## Django ORM&#xA;&#xA;Django has an Object Relational Mapper is the core concept in Django or the component in Django that allows us to interact with the database without the programmer writing SQL/DB queries. It is like a Pythonic way to write and execute sql queries, it basically abstracts away the layer to manually write SQL queries. &#xA;&#xA;We&#39;ll explore the details of how the ORM works under the hood but it&#39;s really interesting and fascinating for a Beginner to make web applications without learning SQL(not recommended though personally). For now, its just magical to see Django handling the DB operations for you. You can get the references for learning about the Queryset in ORM from the [docs](https://docs.djangoproject.com/en/4.0/ref/models/querysets/)&#xA;&#xA;## Example Model&#xA;Let us set up a model from what we have learned so far. &#xA;&#xA;We&#39;ll create a model for a Blog Post again but with more robust fields and structure. &#xA;&#xA;```python&#xA;#from django.db import models&#xA;from django.contrib.auth.models import User&#xA;&#xA;class Article(models.Model):&#xA;&#xA;    options = (&#xA;    (&#39;draft&#39;, &#39;Draft&#39;),&#xA;    (&#39;published&#39;, &#39;Published&#39;),&#xA;    )&#xA;&#xA;    title = models.CharField(max_length=255, unique=True)&#xA;    slug = models.SlugField(max_length=255, unique_for_date=&#39;publish&#39;)&#xA;    post = models.TextField()&#xA;    author = models.ForeignKey(User, on_delete=models.CASCADE, related_name=&#39;Posts&#39;)&#xA;    created = models.DateTimeField(auto_now_add=True)&#xA;    updated = models.DateTimeField(auto_now=True)&#xA;    status = models.CharField(max_length=16, choices=option, default=&#39;draft&#39;)&#xA;    &#xA;    def __str__()&#xA;        return self.title&#xA;&#xA;    class Meta:&#xA;        ordering = (&#39;-publish&#39;,)&#xA;      &#xA;```&#xA;&#xA;   We can see in the above model that we have defined the Meta class which is optional and is generally written to modify how to entries inside the table appear or order with other functionalities as well. We have also added the choices option in the status field which has two choices `Draft` and `Publish` one which is seen by the django interface and the other to the end-users. We have also added certain fields like slug that will create the URL for the blog post, also certain options like `unique` has been set to restrict duplicate entries being posted to the database. The `related_name` in the `ForeignKey` refers to the name given to the relation from the Article model to the User model in this case. &#xA;&#xA;   So, we can see that Django allows us to structure the schema of a database. Though nothing is seen as an end result, when we configure and migrate the model to our database we will see the results of the hard work spent in creating and designing the model. &#xA;&#xA;## Database Specific fields&#xA;&#xA;By this time, you will have gotten a feel of what a database might be. Most of the projects are designed around SQL databases but No-SQL databases and others are also used in cases which suite them the most. We have tools to manage this database in SQL we call it the Database Management System (DBMS). It&#39;s just a tool to manage data, but there is not just a single Database management tool out there, there are gazillions and bazillions of them. Most  popular include `MySQL`, `PostgreSQL`, `SQLite`, `Oracle`, `Microsoft Access`, `Maria DB`, and tons of others. &#xA;&#xA;Well, these different DBMS tools are almost similar with a few hiccups here and there. So, different Database tools might have different fields they provide. For Example, in Database `PostgreSQL` provides the ListField which `SQLite` doesn&#39;t that can be the decision to be taken before creating any project. There might be some fields that some DBMS provide and other doesn&#39;t.&#xA;&#xA;## Conclusion&#xA;&#xA;We understood the basics of creating a model. We didn&#39;t touch on the database yet but the next part is all about configuration and migration so we&#39;ll get hands-on with the databases. We covered how to structure our database, how to write fields in the model, add constraints and logic to them and explore the terminologies in Django like ORM, Database Types, etc. &#xA;&#xA;Thank you for reading the article, if you have any feedback kindly let me know, and until then Happy Coding :)&#xA;</content>
      <type>posts</type>
    </item>
    <item>
      <title>Django Basics: Static Files</title>
      <link>meetgor.com/django-basics-static-files</link>
      <description></description>
      <pubDate>Mon, 27 Dec 2021 00:00:00 UTC</pubDate>
      <content>&#xA;## Introduction&#xA;&#xA;After creating templates, it should be rather tempting to add some styles and logic to them. Well yes, we&#39;ll see how to add static files in a web application using django. Static files are not only CSS, but also media/images and Javascript files as well. In this part of the series, we&#39;ll cover the basics of working with static files in django including the configuration, rendering and storing of the static files. &#xA;&#xA;## What are Static Files?&#xA;&#xA;Static files as the name suggests are the files that don&#39;t change, your style sheets(css/scss) are not gonna change for every request from the client side, though the template might be dynamic. Also your logo, images in the design will not change unless you re-design it XD So these are the static files that needs to be rendered along with the templates.&#xA;&#xA;We have basically 3 types of static files, CSS, Javascript files and media files/static templates,etc. They are all rendered in the same way but as per their conventions and usage. &#xA;&#xA;You can learn about the theoretical information on [static files](https://docs.djangoproject.com/en/4.0/howto/static-files/) from the django documentation.&#xA;&#xA;## How to configure Static Files&#xA;&#xA;Firstly you can create a folder for all the static files in the root folder. Usually the convention is `static` as the name of the folder. So, if you have created the template folder in the root directory, similar to that static folder can be created in that path. &#xA;&#xA;Next after creating the static folder in the project root folder, we need to configure the `settings.py` file to actually tell Django web server to look for all our static files in that folder. To do that, go to the `settings.py` file, now by this time you would have known where the `settings.py` file is (inside the project-named folder). Add the following at the end of the `settings.py` file.&#xA;&#xA;```python&#xA;# import os&#xA;# STATIC_URL = &#39;/static/&#39;&#xA;&#xA;STATICFILES_DIRS = (&#xA;    os.path.join(BASE_DIR, &#34;static/&#34;),&#xA;)&#xA;```   &#xA;&#xA;Ignore the `import os` if you already have imported and the `STATIC_URL` if already there in the file. The `STATICFILES_DIRS` is the configuration that we tell the django environment to look for all our static files in the base/root directory of the project where the `static/` folder is. The `os.path.join()` actually gets the path of the directory in our operating system to the folder specified in the case of our project the `BASE_DIR` is the path of the project and we add in the static folder to actually the project path. The final piece and the crucial one is the `&#34;static/&#34;` path, this can be other location where you have created your static folder within the project.&#xA;&#xA;That&#39;s it! Yes, it&#39;s that simple. We can now create static files and render them in our templates. &#xA;&#xA;## Creating and Storing Static files&#xA;&#xA;Now this part is customizable and it depends on your preference, how you want to organize the static folder. The convention that I follow is creating separate folders namely for `css`, `js` and `assets`(or `img`) mostly. And inside of this folders you can store the respective static files. This also creates the project more scalable in terms of it&#39;s maintenance. &#xA;&#xA;```&#xA;static\&#xA;  |__css\&#xA;  |__js\&#xA;  |__assets\&#xA;```&#xA;&#xA;Let&#39;s create a static file and an image to demonstrate the concept of static files in django. &#xA;&#xA;- css/style.css&#xA;&#xA;```css&#xA;body &#xA;{&#xA;    background-color:#1d1dff;&#xA;    color:white;&#xA;}&#xA;&#xA;h1&#xA;{&#xA;    text-align:center&#xA;    font-family: monospace;&#xA;}&#xA;&#xA;p&#xA;{&#xA;    color:#ff6600;&#xA;    font-weight:500;&#xA;}&#xA;&#xA;ul&#xA;{&#xA;    list-style-type:square;&#xA;}&#xA;```&#xA;&#xA;- assets/tbicon.png &#xA;&#xA;Demo Image (that&#39;s my blog icon)   &#xA;&#xA;![Demo image](https://github.com/Mr-Destructive/techstructive-blog/blob/gh-pages/assets/img/tbicon.png?raw=true)&#xA;&#xA;## Rendering Static Files from Templates&#xA;&#xA;So, after configuring and creating the static files, we now can inject them into our templates. If you try to do the traditional way i.e. linking stylesheets/images/script files with HTML, it just won&#39;t work as you expect to and there&#39;s no point in using traditional way while creating a web application with a framework. So, there is a framework specific way to do things which make it easier and efficient for the project. &#xA;&#xA;To render any static file, we need to load the static tag which allows us to embed links for the static files into the templates. This means if the static files are not loaded directly instead in production(deploying our application) the static files are stored in a folder `STATIC_ROOT` which the server then loads, we&#39;ll see how that internally works when we get to deployment techniques for Django project. &#xA;&#xA;To load the static files from our configuration, we can simpy include the tag on top of the template.&#xA;&#xA;```&#xA;{% load static %}&#xA;```&#xA;&#xA;The above templating tag will load the `static` tag which allows us to embed the links to the static files as explained earlier. &#xA;&#xA;Now, we can actually access any file with the static folder in our templates with a particular syntax as below:&#xA;&#xA;```html&#xA;&lt;link rel=&#34;stylesheet&#34; href=&#34;{% static &#39;css/style.css&#39; %}&#34;&gt;  &#xA;```   &#xA;Its just a example how to load the file, we are calling the static tag which we have loaded in previously and from there we are referencing the css file. The compact syntax would be : `{% static  &#39;path-to-file&#39;  %}`      &#xA;&#xA;**NOTE: The path to the static file is relative from the Static folder, i.e. enter the path of the file considering the static folder as the base directory.** &#xA;&#xA;### Demonstration of the static file&#xA;&#xA;Let&#39;s render the static file which we created earlier i.e. the css file and the image into a template. &#xA;&#xA;Assuming you have a app called `post` in your django project, you can render static files as below:&#xA;&#xA;# templates/home.html &#xA;```html&#xA;&lt;!DOCTYPE html&gt;&#xA;&lt;html lang=&#34;en&#34;&gt;&#xA;&lt;head&gt;&#xA;    &lt;meta charset=&#34;UTF-8&#34;&gt;&#xA;    &lt;title&gt;Django Blog&lt;/title&gt;&#xA;    {% load static %}&#xA;    &lt;link rel=&#34;stylesheet&#34; href=&#34;{% static &#39;css/style.css&#39; %}&#34;&gt;  &#xA;&lt;/head&gt;&#xA;&lt;body&gt;&#xA;    &lt;h1&gt;Hello, World!&lt;/h1&gt;&#xA;    {% block body %}&#xA;    &lt;p&gt;This is not going to get inherited &lt;/p&gt;&#xA;    {% endblock %}&#xA;    &lt;p&gt;This will be inherited&lt;/p&gt;&#xA;&lt;/body&gt;&#xA;&lt;/html&gt;&#xA;```   &#xA;We are loading the static tag and then loading the css file using the tag syntax as explained above.       &#xA;&#xA;# static/css/style.css      &#xA;```css&#xA;body &#xA;{&#xA;    background-color:#1d1dff;&#xA;    color:white;&#xA;}&#xA;&#xA;h1&#xA;{&#xA;    text-align:center&#xA;    font-family: monospace;&#xA;}&#xA;&#xA;p&#xA;{&#xA;    color:#ff6600;&#xA;    font-weight:500;&#xA;}&#xA;&#xA;ul&#xA;{&#xA;    list-style-type:square;&#xA;}&#xA;```   &#xA;This is the static file,`style.css` stored inside the css folder of the static folder. This contains basic (very lame) CSS styling as we can understand.     &#xA;&#xA;# post/views.py &#xA;&#xA;```python&#xA;from django.shortcuts import render&#xA;&#xA;def home(request):&#xA;    return render(request, &#39;home.html&#39;)&#xA;```&#xA;The `views.py` file has the function that renders the template `home.html` from the templates folder inside the application specific folder.   &#xA;&#xA;# post/urls.py   &#xA;```python&#xA;from django.urls import path&#xA;from post import views&#xA;&#xA;urlpatterns = [&#xA;        path(&#39;&#39;, views.home, name=&#34;home&#34;),&#xA;        ]&#xA;```   &#xA;This is the application level configuration for the url routes to the views linking the views(functions) from the `views.py` file. The url in this file(code-snippet) is linking the root url(&#39;&#39;) to the home view in the `views.py` file.&#xA;&#xA;# Blog/urls.py&#xA;```python&#xA;from django.contrib import admin&#xA;from django.urls import path, include&#xA;from django.views.generic import TemplateView&#xA;&#xA;urlpatterns = [&#xA;    path(&#39;admin/&#39;, admin.site.urls),&#xA;    path(&#39;&#39;, include(&#39;post.urls&#39;)),&#xA;]&#xA;```&#xA;The urls file in the project folder is the core configuration for project level url routes to individual applications within the project.&#xA;&#xA;Append the following if your templates and static files are not configured properly.&#xA;&#xA;# Blog/settings.py&#xA;```python&#xA;import os   &#xA;&#xA;TEMPLATES = [&#xA;    {&#xA;        &#39;BACKEND&#39;: &#39;django.template.backends.django.DjangoTemplates&#39;,&#xA;        &#39;DIRS&#39;: [os.path.join(BASE_DIR, &#39;templates&#39;),],&#xA;        &#39;APP_DIRS&#39;: True,&#xA;        &#39;OPTIONS&#39;: {&#xA;            &#39;context_processors&#39;: [&#xA;                &#39;django.template.context_processors.debug&#39;,&#xA;                &#39;django.template.context_processors.request&#39;,&#xA;                &#39;django.contrib.auth.context_processors.auth&#39;,&#xA;                &#39;django.contrib.messages.context_processors.messages&#39;,&#xA;            ],&#xA;        },&#xA;    },&#xA;]&#xA;STATIC_URL = &#39;/static/&#39;&#xA;STATICFILES_DIRS = (&#xA;    os.path.join(BASE_DIR, &#34;static/&#34;),&#xA;)&#xA;```&#xA;SO, the result of the above code is as simple template as shown in the picture below:&#xA;&#xA;![Static file demo](https://res.cloudinary.com/dgpxbrwoz/image/upload/v1640621276/blogmedia/static-1_vu41gf.png)&#xA;&#xA;This will also work if you do it with traditional HTML syntax, but I&#39;d explained why it&#39;s not recommended to do it while using frameworks.&#xA;&#xA;Let&#39;s see how static files are rendered in inherited templates. We&#39;ll tinker with the `for.html` template created in the [previous part](https://mr-destructive.github.io/techstructive-blog/django/python/web-development/2021/12/14/Django-Basics-P5.html).  &#xA;&#xA;# template/for.html&#xA;```django&#xA;{% extends &#39;home.html&#39; %}&#xA;{% load static %}&#xA;&#xA;{% block body %}&#xA;    &lt;img src=&#34;{% static &#39;assets/tbicon.png&#39; %}&#34; height=&#34;50px&#34; width=&#34;50px&#34; /&gt;&#xA;    &lt;ul&gt;&#xA;        {% for sport in sport_list %}&#xA;        &lt;li&gt;{{ sport }}&lt;/li&gt;&#xA;        {% endfor %}&#xA;    &lt;/ul&gt;&#xA;{% endblock %}&#xA;```&#xA;We will have re-load the static tag for each template only if we need to include a new static file in the template. So we use the `{% load static %}` again as we are loading the static file (image) in this template.&#xA;&#xA;# post/views.py&#xA;```python&#xA;from django.shortcuts import render&#xA;&#xA;def for_demo(request):&#xA;    sports = (&#39;football&#39;, &#39;cricket&#39;, &#39;volleyball&#39;, &#39;hockey&#39;, &#39;basketball&#39;)&#xA;    return render(request, &#39;for.html&#39;, {&#39;sport_list&#39;: sports})&#xA;&#xA;def home(request):&#xA;    return render(request, &#39;home.html&#39;)&#xA;```&#xA;&#xA;# post/urls.py&#xA;```python&#xA;from django.urls import path&#xA;from post import views&#xA;&#xA;urlpatterns = [&#xA;        path(&#39;&#39;, views.home, name=&#34;home&#34;),&#xA;        path(&#39;for/&#39;, views.for_demo, name=&#34;fordemo&#34;),&#xA;        ]&#xA;```&#xA;&#xA;So, that&#39;s the url and view map created, we can now be able to see the result in the `127.0.0.1:8000/for/` url to see the below result:&#xA;&#xA;![Static demo for inheritance of tempaltes](https://res.cloudinary.com/dgpxbrwoz/image/upload/v1640622976/blogmedia/static-tempinh_peyjrg.png)&#xA;&#xA;The list style has been changed and thus we can see that the CSS from the parent template is also being inherited. &#xA;&#xA;Here is the django project structure which I have created with this series so far:&#xA;&#xA;![Folder tree structure](https://res.cloudinary.com/dgpxbrwoz/image/upload/v1640624705/blogmedia/trr-static_bgt9du.png)&#xA;&#xA;So that has been it for the Static files in Django. Though there are lot of depth for rendering and loading the static files, we&#39;ll explore as we get our grasp in the django and web development terminologies. &#xA;&#xA;## Conclusion&#xA;&#xA;So, from this article, we were able to configure and render static files like CSS/Images and optionally Javascript into the Django application. We covered from ground how to configure, load and structure the folder for storing all the static files at the project level. &#xA;&#xA;Hope you found it helpful and if you have any queries please let me know. We&#39;ll start with the databases probably from the next part in the Django Basics Series. Until then have a great week and as always Happy Coding :)&#xA;</content>
      <type>posts</type>
    </item>
    <item>
      <title>Django Basics: Templates</title>
      <link>meetgor.com/django-basics-templates</link>
      <description></description>
      <pubDate>Tue, 14 Dec 2021 00:00:00 UTC</pubDate>
      <content>&#xA;## Introduction&#xA;&#xA;After learning the basics of views and URLs, we can now move on to the next concept i.e. Templates. In Django, Templates are quite an important component for the application as it acts as the `frontend` for the web application. With the help of templates and some features provided by Django, it becomes very intuitive and simple to make dynamic web content.&#xA;In this part, we understand what are templates and what is the way to render them. &#xA;&#xA;## What are Templates&#xA;&#xA;Templates are simply a `html` document or kind of a wireframe for content to be displayed for the web app. Templates allow us to render some more relevant pieces of data rather than simple text HTTP responses as we did earlier. We can even re-use certain components of a template in other using the Django Templating Language (more on this later). &#xA;&#xA;So, using HTML templates, we can write a complete Webpage. If you are unfamiliar with HTML, you can check out the basics of HTML with this [playlist](https://www.youtube.com/playlist?list=PL081AC329706B2953). &#xA;&#xA;Even If you are not familiar with HTML, this tutorial might be quite basic and not overwhelm you with all the tags.&#xA;&#xA;## Creating Templates&#xA;&#xA;To create a Template, we can write a simple HTML document like the below:&#xA;&#xA;Create a folder `templates` in the base folder, inside the templates folder, create a file `index.html`&#xA;&#xA;**templates\index.html**&#xA;&#xA;```html&#xA;&lt;!DOCTYPE html&gt;&#xA;&lt;html lang=&#34;en&#34;&gt;&#xA;&lt;head&gt;&#xA;    &lt;meta charset=&#34;UTF-8&#34;&gt;&#xA;    &lt;title&gt;Django Blog&lt;/title&gt;&#xA;&lt;/head&gt;&#xA;&lt;body&gt;&#xA;    &lt;h1&gt;Hello, World!&lt;/h1&gt;&#xA;&lt;/body&gt;&#xA;&lt;/html&gt;&#xA;```&#xA;&#xA;This is a simple HTML template, with the `&lt;h1&gt;` tags. As Django is a framework, there is a standard for storing all the templates for the project and application. There are a couple of standard of options:&#xA;- One of which is creating a `templates` folder in the root folder as discussed earlier, also we need to modify the `project_name/settings.py` file. &#xA;&#xA;Inside the `settings.py` file, we need to locate the `TEMPLATES` section and modify as below:&#xA;&#xA;```python&#xA;import os&#xA;&#xA;TEMPLATES = [&#xA;    {&#xA;        &#39;BACKEND&#39;: &#39;django.template.backends.django.DjangoTemplates&#39;,&#xA;        &#39;DIRS&#39;: [os.path.join(BASE_DIR, &#39;templates&#39;),],&#xA;        &#39;APP_DIRS&#39;: True,&#xA;        &#39;OPTIONS&#39;: {&#xA;            &#39;context_processors&#39;: [&#xA;                &#39;django.template.context_processors.debug&#39;,&#xA;                &#39;django.template.context_processors.request&#39;,&#xA;                &#39;django.contrib.auth.context_processors.auth&#39;,&#xA;                &#39;django.contrib.messages.context_processors.messages&#39;,&#xA;            ],&#xA;        },&#xA;    },&#xA;]&#xA;```   &#xA;&#xA;In this snippet, we have changed the `DIRS` option to search the templates in the folder `templates` in the root directory. &#xA;&#xA;- The other standard is creating a templates folder in each application.&#xA;&#xA;We can create the templates folder in each application instead of a single folder. &#xA;&#xA;## Rendering Templates&#xA;&#xA;After creating a template and making the required settings to make sure Django is able to pick up those templates, we need to work with views and URLs to actually render those templates. &#xA;&#xA;There are a couple of ways to render templates in Django and some of them are discussed below:&#xA;&#xA;### Using TemplateView&#xA;&#xA;[TemplateView](https://docs.djangoproject.com/en/3.2/ref/class-based-views/base/#django.views.generic.base.TemplateView) is a class which is comes with `django.views.generic` library. This class allows us to render a template by providing in the name of the template, arguments or variables to be parsed, and so on. &#xA;&#xA;The simplest way to render a template is by the following way:&#xA;&#xA;```python&#xA;from django.contrib import admin&#xA;from django.urls import path, include&#xA;&#xA;from django.views.generic import TemplateView&#xA;&#xA;urlpatterns = [&#xA;    path(&#39;admin/&#39;, admin.site.urls),&#xA;    path(&#39;&#39;, TemplateView.as_view(template_name=&#34;index.html&#34;), name=&#34;index&#34;),&#xA;]&#xA;```&#xA;&#xA;We need to import the `TemplateView` from the `django.core.generic` so as to use the class for rendering the template. &#xA;&#xA;The `TemplateView` class takes in a couple of arguments, we&#39;ll use the `template_name` as an argument that takes in the name of the template. Here, we use the `index.html` as the template which we created earlier. We don&#39;t need to specify the entire path to the template as we make modifications in the `settings.py` file to pick the template from the mentioned directory. We use `as_view` function to load the class as a function/view.  &#xA;&#xA;Activate the virtual environment for the proper functioning of the project.&#xA;&#xA;After activating the virtual environment we can run the server as follows:&#xA;```terminal&#xA;python manage.py runserver&#xA;```&#xA;   We can now see the following output and thus, we are now rendering a simple HTML template in Django.&#xA;&#xA;![](https://res.cloudinary.com/dgpxbrwoz/image/upload/v1639384994/blogmedia/templ1_vbwp5d.png)&#xA;&#xA;### Using render&#xA;&#xA;We can also use the [render function](https://docs.djangoproject.com/en/4.0/topics/http/shortcuts/#render) from `django.shortcuts` to simply render a template. But we will create a Python function or a View to actually render the template. So, we&#39;ll create a View-URL map as we created in the [previous part](https://mr-destructive.github.io/techstructive-blog/django/python/web-development/2021/11/30/Django-Basics-P4.html).&#xA;&#xA;Firstly, let&#39;s create a view function in the `post/views.py` file, more generally (`app_name/views.py` file). Firstly, we need to import the render function from `django.shortcuts` and then return the function call of render.&#xA;&#xA;```python&#xA;from django.shortcuts import render&#xA;&#xA;def home(request):&#xA;    return render(request,&#39;index.html&#39;)&#xA;```   &#xA;&#xA;And in the URLs, we&#39;ll create a different pattern like for e.g. &#39;home/&#39;&#xA;&#xA;```python&#xA;from django.urls import path&#xA;from post import views&#xA;&#xA;urlpatterns=[&#xA;        path(&#39;home/&#39;,views.home,name=&#34;home&#34;),&#xA;        ]&#xA;```&#xA;&#xA;So, after creating the View-URL map and making sure the URL of the app is loaded in the project URLs, we can see the result as a simple HTML template.   &#xA;&#xA;![](https://res.cloudinary.com/dgpxbrwoz/image/upload/v1639386932/blogmedia/templ2_rgoppj.png)&#xA;   &#xA;## Django Templating Language &#xA;&#xA;The [Django Templating Language](https://docs.djangoproject.com/en/3.2/ref/templates/language/) is Django&#39;s way of making templates more dynamic and easy to write dynamic web applications. We&#39;ll take a brief look at what we can do with this type of Templating Language in Django.&#xA;&#xA;### Variables&#xA;&#xA;This is the most common use case for the Django Templating Language/Engine as we can use the [variables](https://docs.djangoproject.com/en/3.2/ref/templates/language/#variables) from the Backend and inject it in the template. We can parse the variable into the template by the syntax : `{{ variable_name &#34; }}}}`&#xA;&#xA;To show its use cases, we can declare a variable in a view and then parse it in the Template. Though it is not dynamic right now we can later on fetch values from the database and store them in the form of variables in our views. &#xA;&#xA;**templates/home.html**&#xA;```html&#xA;&lt;!DOCTYPE html&gt;&#xA;&lt;html lang=&#34;en&#34;&gt;&#xA;&lt;head&gt;&#xA;    &lt;meta charset=&#34;UTF-8&#34;&gt;&#xA;    &lt;title&gt;Django Blog&lt;/title&gt;&#xA;&lt;/head&gt;&#xA;&lt;body&gt;&#xA;    &lt;h1&gt;Hello, {{ name }}&lt;/h1&gt;&#xA;&lt;/body&gt;&#xA;&lt;/html&gt;&#xA;```&#xA;&#xA;&#xA;**post/views.py**&#xA;```python&#xA;from django.shortcuts import render&#xA;&#xA;def variable_demo(request):&#xA;    name = &#34;Kevin&#34;&#xA;    return render(request, &#39;home.html&#39;, {&#39;name&#39;:name})&#xA;    #The name can be anything, like a database query object, form detail, etc&#xA;&#xA;```&#xA;&#xA;As we can see the variable in views is passed as a dictionary in python. The reference key along with a value of the variable as the name of the variable. We will use the key in the templates to parse the value of the variable.&#xA;&#xA;**post/urls.py**&#xA;```python&#xA;from django.urls import path&#xA;from post import views&#xA;&#xA;urlpatterns=[&#xA;        path(&#39;home/&#39;,views.home,name=&#34;home&#34;),&#xA;        path(&#39;vardemo/&#39;,views.variable_demo, name=&#34;var&#34;),&#xA;        ]&#xA;```&#xA;&#xA;![variable demo](https://res.cloudinary.com/dgpxbrwoz/image/upload/v1639389288/blogmedia/templ3_wvhagw.png)&#xA;&#xA;As we can see, we were able to load the variable into the template using the Django Templating Engine. &#xA;&#xA;### Conditional statement&#xA;&#xA;We can even use the conditional statement in the Template using a very simple syntax. We can use `{% if condition&#34;  }} %}` to use certain special kinds of blocks in the Template. We need to end those blocks as well using the syntax `{% endif  %}`, here `if` can be other blocks which we&#39;ll explore ahead.&#xA;&#xA;To create a basic if condition in the template, we can understand with the following example.&#xA;&#xA;**app_name/views.py**&#xA;```python&#xA;from django.shortcuts import render&#xA;from random import randint&#xA;&#xA;def if_demo(request):&#xA;   number = randint(1,10)&#xA;   return render(request, &#39;if_else.html&#39;, {&#39;num&#39;:number})&#xA;```&#xA;&#xA;Here, we have used the key name as `num` indicating we can give different names to the key which needs to be used in the template to render the values.&#xA;&#xA;**app_name/urls.py**&#xA;```python&#xA;from django.urls import path&#xA;from post import views&#xA;&#xA;urlpatterns = [&#xA;        path(&#39;if/&#39;, views.if_demo, name=&#34;ifdemo&#34;),&#xA;        ]&#xA;```&#xA;&#xA;**templates/if_else.html**&#xA;```html&#xA;&lt;!DOCTYPE html&gt;&#xA;&lt;html lang=&#34;en&#34;&gt;&#xA;&lt;head&gt;&#xA;    &lt;meta charset=&#34;UTF-8&#34;&gt;&#xA;    &lt;title&gt;Django Blog&lt;/title&gt;&#xA;&lt;/head&gt;&#xA;&lt;body&gt;&#xA;    {{ num }}&#xA;    {% if num &gt; 5 %}&#xA;        &lt;h2&gt;It&#39;s Greater then 5&lt;/h2&gt;&#xA;    {% elif num == 5 %}&#xA;        &lt;h2&gt;It&#39;s five!&lt;/h2&gt;&#xA;    {% else %}&#xA;        &lt;h2&gt;It&#39;s less than 5&lt;/h2&gt;&#xA;    {% endif %}&#xA;&lt;/body&gt;&#xA;&lt;/html&gt;&#xA;```&#xA;![if-else demo](https://res.cloudinary.com/dgpxbrwoz/image/upload/v1639411425/blogmedia/templ3_exj0fv.png)&#xA;&#xA;So, as we can see that, we can use the if-else conditions in the template and that is already powerful. This can be a bit messy as to handle mathematical operations or conditions into a single condition. This can really be used for really large datasets that can be shimmed down to really less coding and also improve readability.&#xA;&#xA;&#xA;### For loop&#xA;&#xA;Now, the most crucial component of the Django templating language is the loops. We can actually iterate over objects/lists in the template. This becomes a huge concept for actually making a dynamic web application. We n\might want to iterate over all the entries in a database, or any other form of data which can make the app a lot dynamic and feel real-time. &#xA;&#xA;The syntax of for loop is almost similar to the if-else condition. We just replace the condition with the iterator and the list/object from the view context. `{% for i in list %}`, also end the for loop like `{% endfor %}`.&#xA;&#xA;**app_name/views.py**&#xA;```python&#xA;from django.shortcuts import render&#xA;&#xA;def for_demo(request):&#xA;    sports = (&#39;football&#39;, &#39;cricket&#39;, &#39;volleyball&#39;, &#39;hockey&#39;, &#39;basketball&#39;)&#xA;    return render(request, &#39;for.html&#39;, {&#39;sport_list&#39;: sports})&#xA;&#xA;```&#xA;&#xA;We have created a simple Python list called `sports` and we parse them to the template using a dictionary object, `sport_list` as the key for storing the value of the `sports` list.&#xA;&#xA;**app_name/urls.py**&#xA;```python&#xA;from django.urls import path&#xA;from post import views&#xA;&#xA;urlpatterns = [&#xA;        path(&#39;for/&#39;, views.for_demo, name=&#34;fordemo&#34;),&#xA;        ]&#xA;```&#xA;&#xA;**templates/for.html**&#xA;```html&#xA;&lt;!DOCTYPE html&gt;&#xA;&lt;html lang=&#34;en&#34;&gt;&#xA;&lt;head&gt;&#xA;    &lt;meta charset=&#34;UTF-8&#34;&gt;&#xA;    &lt;title&gt;Django Blog&lt;/title&gt;&#xA;&lt;/head&gt;&#xA;&lt;body&gt;&#xA;    &lt;ul&gt;&#xA;        {% for sport in sport_list %}&#xA;        &lt;li&gt;{{ sport }}&lt;/li&gt;&#xA;        {% endfor %}&#xA;    &lt;/ul&gt;&#xA;&lt;/body&gt;&#xA;&lt;/html&gt;&#xA;```&#xA;&#xA;![for loop demo](https://res.cloudinary.com/dgpxbrwoz/image/upload/v1639475328/blogmedia/templ3_q8z8fr.png)&#xA;&#xA;We have used simple for loop in Pythonic syntax, we use an iterator in this case, `sport` acts as an iterator. We use this to store values one by one from the list `sport_list` which was earlier passed in the views as a key in the dictionary. &#xA;&#xA;Hence, this is quite scalable and used to fetch the objects/entries in the database and hence making it a lot easier to make a dynamic web application faster.&#xA;&#xA;## Template Inheritance&#xA;&#xA;So, far we have seen that we need to create the base template again and again like all the basic HTML elements, title, and all the basic structure. But what if, we can reuse a specific template in another and extend the functionality of that template into a new one. This avoids the redundancy of writing the entire basic template or the layout of a web app over and over again.&#xA;&#xA;To do that, Django has the Template inheritance. We can use a template as its basic layout or a specific component in the web application. Again, similar to the for, if-else blocks the syntax for inheriting a template is quite similar. &#xA;&#xA;Take, for example, the home.html which consisted of only a `&lt;h1&gt;` tag in it. We can use this kind of template in other templates to really make it the home page. For that, we first need to enclose the template in a `block`, which is what allows us to use it in other templates.&#xA;To create a `block`, we simply need to write the following syntax before the component which we do not want in other templates:&#xA;&#xA;**templates/home.html**&#xA;```html&#xA;&lt;!DOCTYPE html&gt;&#xA;&lt;html lang=&#34;en&#34;&gt;&#xA;&lt;head&gt;&#xA;    &lt;meta charset=&#34;UTF-8&#34;&gt;&#xA;    &lt;title&gt;Django Blog&lt;/title&gt;&#xA;&lt;/head&gt;&#xA;&lt;body&gt;&#xA;    &lt;h1&gt;Hello, World!&lt;/h1&gt;&#xA;    {% block body %}&#xA;    &lt;p&gt;This is not going to get inherited &lt;/p&gt;&#xA;    {% endblock %}&#xA;    &lt;p&gt;This will be inherited&lt;/p&gt;&#xA;&lt;/body&gt;&#xA;&lt;/html&gt;&#xA;```&#xA;In this we have used the `blocks` with a name like `body` as `{% block body %}` this can be anything you like. We end the block with the similar syntax as the for/if blocks as `{% endblock %}`. Anything in between the blocks i.e `block block_name` and `endblock` is not inherited i.e it is unique to this template.&#xA;&#xA;We will see how we can use this template in other templates. We will actually extend this template and use the blocks to render the content in the template.&#xA;   &#xA;&#xA;**templates/if_else.html**&#xA;```html&#xA;{% extends &#39;home.html&#39; %}&#xA;{% block body %}&#xA;    {{ num }}&#xA;    {% if num &gt; 5 %}&#xA;    &lt;h2&gt;It&#39;s Greater then 5&lt;/h2&gt;&#xA;    {% elif num == 5 %}&#xA;    &lt;h2&gt;It&#39;s five!&lt;/h2&gt;&#xA;    {% else %}&#xA;    &lt;h2&gt;It&#39;s less than 5&lt;/h2&gt;&#xA;    {% endif %}&#xA;{% endblock %}&#xA;```&#xA;   So, we first say to Django to extend the `home` template i.e. the Django will load the blocks from this template only, remember it will just load and not use the blocks until we explicitly tell it to. &#xA;&#xA;To use the blocks or kind of plug in the template content in the `if_else.html` or any other template, we need to again call the `blocks`. Here, we need to write the content inside the `blocks` to properly parse the blocks as this is an HTML template. The order of opening and closing elements do matter. &#xA;So, when we say `endblock` the last part of the base template is loaded i.e. the closing `body` and `html` tags. This is like plugging the template as it is before and after the block body. &#xA;&#xA;**app_name/views.py**&#xA;```python&#xA;from django.shortcuts import render&#xA;&#xA;def home(request):&#xA;    return render(request, &#39;home.html&#39;)&#xA;&#xA;from random import randint&#xA;&#xA;def if_demo(request):&#xA;   number = randint(1,10)&#xA;   return render(request, &#39;if_else.html&#39;, {&#39;num&#39;:number})&#xA;```   &#xA;&#xA;**app_name/urls.py**&#xA;```python&#xA;from django.urls import path&#xA;from post import views&#xA;&#xA;urlpatterns = [&#xA;        path(&#39;&#39;, views.home, name=&#34;home&#34;),&#xA;        path(&#39;if/&#39;, views.if_demo, name=&#34;ifdemo&#34;),&#xA;        ]&#xA;```   &#xA;![](https://res.cloudinary.com/dgpxbrwoz/image/upload/v1639479714/blogmedia/tempinher2_enisls.png)&#xA;![template inheritance demo](https://res.cloudinary.com/dgpxbrwoz/image/upload/v1639477721/blogmedia/tempinher_lk0op0.png)      &#xA;&#xA;![](https://res.cloudinary.com/dgpxbrwoz/image/upload/v1639479954/blogmedia/template-inh_lc8szo.gif)&#xA;&#xA;The above gif illustrates the example in a neat way. The block is loaded from the given template as the extended template and hence it plugs the block into the frame of the template. &#xA;&#xA;## Conclusion&#xA;&#xA;So, from this part of the series, we were able to understand the concept of Templates in Django, we were able to use variables, loops, conditional statements, and template inheriting in a Django application. In the next part, we&#39;ll try to touch up with the static files and see how to properly structure and configure them.&#xA;&#xA;Thank you for reading, if you didn&#39;t understand any of the examples, please let me know, I&#39;ll be happy to share the code. Happy Coding :)&#xA;</content>
      <type>posts</type>
    </item>
    <item>
      <title>Django Basics: Views and URLS</title>
      <link>meetgor.com/django-basics-views-urls</link>
      <description></description>
      <pubDate>Tue, 30 Nov 2021 00:00:00 UTC</pubDate>
      <content>&#xA;## Introduction&#xA;&#xA;After getting familiar with the folder structure of the Django framework, we&#39;ll create our first view in an app. The basics of creating and mapping a view with a URL will be cleared by the end of this part.&#xA;&#xA;## Creating Views&#xA;&#xA;&gt; Views are the functions written in python as a logic control unit of the webserver&#xA;&#xA;To create a view or typically-like function, we need to write a function in the `views.py` file inside of the application folder. The function name can be anything but should be a sensible name as far as its usability is concerned. Let&#39;s take a basic example of sending an HTTP response of &#34;Hello World&#34;.&#xA;&#xA;#### project_name/app_name/views.py&#xA;```python&#xA;from django.http import HttpResponse&#xA;&#xA;def index(request):&#xA;  return HttpResponse(&#34;Hello World&#34;)&#xA;```  &#xA;&#xA;Yes, we are simply returning an HTTP Response right now, but rendering Templates/HTML Documents is quite similar and easy to grasp in Django. So, this is a view or a piece of logic but there is a piece missing in this. Where should this function be used? Of course a URL i.e a path to a web server.&#xA;&#xA;We&#39;ll see how to map the views to an URL in Django in the next section&#xA;&#xA;## Mapping the Views to a URL&#xA;&#xA;We need to first create a `urls.py` file in the application folder to create a map of the URL to be mapped with the view. After creating the file in the same app folder as the `views.py`, import the function in the view into the file.&#xA;&#xA;#### project_name/app_name/urls.py&#xA;```python&#xA;from .views import index&#xA;from django.urls import path &#xA;&#xA;urlpatterns = [&#xA;    path(&#39;&#39;, index, name=&#34;index&#34;),&#xA;]&#xA;```&#xA;The path can be anything you like but for simplicity, we&#39;ll keep it blank(&#39;&#39;) for now.   &#xA;&#xA;Now, you have the path for your view to work but it&#39;s not linked to the main project. We need to link the app urls to the project urls. &#xA;&#xA;To link the urls of your app to the main project folder, you need to just add a single line of code in the `urls.py` file of the project folder.&#xA;&#xA;In projectname folder -&gt; urls.py&#xA;&#xA;#### project_name/urls.py&#xA;```python&#xA;from django.contrib import admin&#xA;from django.urls import path, include&#xA;&#xA;urlpatterns = [&#xA;    path(&#39;admin/&#39;, admin.site.urls),&#xA;    path(&#39;&#39;, include(&#39;post.urls&#39;)),&#xA;]&#xA;```&#xA;&#xA;You need to add the line `path(&#39;&#39;, include(&#39;post.urls&#39;)),` and also import the `include` function from `django.urls`. This additional statement includes the urls or all the `urlpatterns` in the `post` app from the `urls.py` file into the project&#39;s url-routes. &#xA;&#xA;Here, the URL path can be anything like `&#39;home/&#39;`, `&#39;about/&#39;`, `&#39;posts/&#39;`, etc. but since we are just understanding the basics, we&#39;ll keep it `&#39;&#39;` i.e. the root URL. &#xA;&#xA;You can also see that there is another route in our project `&#39;admin/&#39;` which is a path to the admin section. We&#39;ll explore this path and the entire Admin Section in some other part of this series.&#xA;   &#xA;Now if you start the server and visit the default URL i.e `http://127.0.0.1:8000`, you will see a simple HTTP message `Hello World`.&#xA;&#xA;![Hello World view](https://res.cloudinary.com/dgpxbrwoz/image/upload/v1638194390/blogmedia/uv1_xf4byq.png)&#xA;&#xA;## Breaking the `path` function in urlpatterns&#xA;&#xA;The path function in the urlpatterns takes in at least 2 parameters, i.e. the URL pattern and the view of any other function that can be related to the webserver. &#xA;&#xA;```&#xA;path( &#39; &#39;,   view,    name )&#xA;       ^       ^        ^ &#xA;       |       |        |&#xA;       |       |     url_name&#xA;       |   function_name&#xA;   url_path    &#xA;```   &#xA;&#xA;### URL path&#xA;&#xA;The URL Path is the pattern or literally the path which you use in the Browser&#39;s search bar. This can be static i.e. some hard-coded text like `home/`, `user/`, `post/home/`, etc. and we can also have dynamic URLs like `post/&lt;pk:id&gt;/`, `user/&lt;str:name&gt;/`, etc. here the characters `&lt;pk:id&gt;` and `&lt;str:name&gt;` will be replaced by the actual id(integer/primary key) or the name(String) itself. &#xA;&#xA;This is used in an actual web application, where there might be a user profile that needs the unique user-id to render it specifically for that user. The User-Profile is just an example, it can anything like posts, emails, products, any form of a content-driven application. &#xA;&#xA;### View&#xA;&#xA;The view or the function is the name of the function that will be attached to that URL path. That means once the user visits that URL, the function is literally called. **View is just a fancy word for a function(or any logic basically).** There is a lot to be covered when it comes to `View` as there are a lot of ways to create it, there are two types of views, how to use them for various use-cases that can be learned along the way because it is a topic where the crust of Django exists.  &#xA;&#xA;We&#39;ll learn to create different implementations and structure our views, for time-being just consider them as the unit where every operation on the web can be performed. We can create other standalone functions in python to work with the views to make it a bit structured and readable.&#xA;&#xA;### URL Name&#xA;&#xA;This is an optional parameter to the path function as we do not mandatorily need to give the URL map a name. This can be really useful in multi-page application websites where you need to link one page to another and that becomes a lot easier with the URL name. We do not need this right now, we&#39;ll touch it when we&#39;ll see the Django Templating Language. &#xA;&#xA;## Example Views&#xA;&#xA;Let&#39;s create some examples to understand the working of Views and URLs. We&#39;ll create a dynamic URL and integrate the Python module in the views to get familiarized with the concept.&#xA;&#xA;### Dynamic URLs &#xA;&#xA;We can use the dynamic URLs or placeholder variables to render out the content dynamically. Let&#39;s create another set of View and URL map.&#xA;&#xA;#### project_name/app_name/views.py&#xA;```python&#xA;def greet(request, name):&#xA;    return HttpResponse(&#34;Welcome, &#34; + name)&#xA;```&#xA;&#xA;This view or function takes an additional argument called `name` and in response, it just says `Welcome, name` where the name can be any string. Now after creating the view, we need to map the view to a URL pattern, We&#39;ll add a path for this greet function. &#xA;&#xA;#### project_name/app_name/urls.py&#xA;```python&#xA;path(&#39;greet/&lt;str:name&gt;/&#39;, greet, name=&#34;greet&#34;),&#xA;```&#xA;&#xA;You can see how we have created the url-pattern here. The greet part is static but the `&lt;str:name&gt;` is a variable or just a URL parameter to be passed to the view as the value of the variable `name`. We have also given the URL map a name called greet, just for demonstration of its creation. &#xA;&#xA;You&#39;ll get an error, 100% if you are blindly following me! Didn&#39;t you forget something?&#xA;&#xA;Import the greet function from the views like so:&#xA;&#xA;```python&#xA;from .views import index, greet  &#xA;```&#xA;&#xA;So, after we visit the URL `https://127.0.0.1:8000/greet/harry`, you should see a response `Welcome, harry` as simple as that. &#xA;&#xA;![Greet URL Demo](https://res.cloudinary.com/dgpxbrwoz/image/upload/v1638252762/blogmedia/uv-greet_e2wg5o.gif)&#xA;&#xA;Now, how is this working? We see the view first. The function takes two parameters one is most common the request which stores the meta-data about the request, the other parameter is the name that we will be use to respond to the server dynamically. The name variable is used in the string with the HttpResponse function to return a simple string.&#xA;&#xA;Then, in the URLs, we need to find a way to pass the variable name to the view, for that we use the `&lt;string:name&gt;` which is like a URL parameter to the view. The path function automatically parses the name to the appropriate view and hence we call the greet function with the name variable from the URL.&#xA;&#xA;### Using Pythonic things&#xA;&#xA;We&#39;ll use some Python libraries or functions in the Django App. In this way, we&#39;ll see it&#39;s nearly no-brainer to use Python functions or libraries in the Django framework as indeed all files which we are working with are Python files.&#xA;&#xA;#### project_name/app_name/views.py&#xA;```python&#xA;from random import randint&#xA;&#xA;def dice(request):&#xA;    number = randint(1,6)&#xA;    return HttpResponse(f&#34;It&#39;s {number}&#34;)&#xA;```&#xA;&#xA;This view is using the random module, you can pretty much use other web-compatible modules or libraries. We have used the `random.randint` function to generate the pseudo-random number between 1 and 6. We have used the f-string (`f&#34;{variable}&#34;`)styled Response string as int is not compatible with the response concatenation. So this is the logic of our map, now we&#39;ll need to link it to a URL-path. &#xA;&#xA;#### project_name/app_name/urls.py&#xA;```python&#xA;path(&#39;throw/&#39;, dice, name=&#34;dice&#34;),&#xA;```&#xA;&#xA;Also, import the view name from the views as `from .views import dice` also add other views if present. Now if we go to the URL `https://127.0.0.1:8000/throw/`, we shall see a random number in the response. This is how we used Python to make the logic of our view.&#xA;&#xA;![Dice URL Demo](https://res.cloudinary.com/dgpxbrwoz/image/upload/v1638252951/blogmedia/uv-dice_bsodzq.gif)&#xA;&#xA;So, that was the basics of creating and mapping views and urls. It is the most fundamental of the workflow in Django project development. You need to get familiar with the process of mapping Views and urls before diving into Templates, Models, and other complex stuff. &#xA;&#xA;## Conclusion&#xA;&#xA;From this part of the series, we touched upon the basics of views and URLs. The concept of mapping URLs and views might have been much cleared and it will be even gripping after we explore the Template handling and Static files in the next part. If you have any queries or mistakes I might have made please let me know. Thanks for reading and Happy Coding :)&#xA;</content>
      <type>posts</type>
    </item>
    <item>
      <title>Django Basics: Folder Structure</title>
      <link>meetgor.com/django-basics-folder-struct</link>
      <description></description>
      <pubDate>Wed, 24 Nov 2021 00:00:00 UTC</pubDate>
      <content>&#xA;### Introduction&#xA;&#xA;After setting up the development for the Django framework, we will explore the project structure. In this part, we understand the structure along with the various components in the Project as well as individual apps. We will understand the objective of each file and folder in a brief and hopefully by the end of this part, you&#39;ll be aware of how the Django project is structured and get a good overview of the flow of development in the Django project.&#xA;&#xA;## Project Structure&#xA;&#xA;We will create a Django project from scratch and understand it from the ground up. As in the previous part, I&#39;ve shown you how to create a project. In this section, we&#39;ll create a project `Blog`. TO do that, we&#39;ll create a folder called `Blog`, install and set up the virtual environment as discussed and explained in the previous part.&#xA;&#xA;After the virtual environment is created and activated, we&#39;ll create the project.&#xA;&#xA;```shell&#xA;django-admin startproject Blog .&#xA;```&#xA;After this command, if we see the directory structure, it should look something like this:&#xA;&#xA;![Basic Django folder structure](https://res.cloudinary.com/dgpxbrwoz/image/upload/v1637661221/blogmedia/tree_ak3mgm.png)&#xA;&#xA;As we can see there are 6 files and a folder. The base folder is for the configuration at a project level. I have actually not shown the `venv` ( using `-I venv` option on tree command) as it is out of the scope of this series. The `venv` folder contains modules and scripts which are installed in the virtual environment. &#xA;&#xA;So, lets break the folder structure down into understandable files.&#xA;![](https://res.cloudinary.com/dgpxbrwoz/image/upload/v1637745146/blogmedia/16_qenomh.png)&#xA;### manage.py&#xA;&#xA;Our project consists of a `manage.py` file which is to execute several commands at a project level. We do not have to edit any of the contents of this file (never). It is the file that allows us to run the server, apply migrations, create an Admin account, create apps, and do a lot of crucial things with the help of python. &#xA;&#xA;So, it&#39;s just the command-line utility that helps us interact with the Django project and applications for configurations. &#xA;&#xA;### Project Folder&#xA;&#xA;Now, this is the folder where the project-configuration files are located. **The name of the folder is the same as that of the project**. This makes the folder unique and hence creates a standard way to store files in a structured way. &#xA;&#xA;The folder is a python package which is indicated by the `__init__.py` file. The purpose of the `__init__.py` file is to tell the Python environment that the current folder is a Python package. &#xA;&#xA;The folder consist of several files(5 files):&#xA;&#xA;### settings.py&#xA;&#xA;This is a really important file from the project&#39;s point of view. This contains certain configurations that can be applied to the rest of the project (or all the apps). &#xA;&#xA;In the `settings.py` file, we can do some of the following operations :&#xA;&#xA;- List of `applications` that might be pre-installed or user-defined.&#xA;- Configure the Middleware. &#xA;- Configure and connect the Database.&#xA;- Configure Templates/Static/Media files.&#xA;- Custom Configuration for Time-Zones, Emails, Authentication, CORS, etc.&#xA;&#xA;Besides the above-mentioned options, there is a lot of project-specific configurations or application-specific settings as well. &#xA;&#xA;Here, you&#39;ll have a question,&#xA;&#xA;### WHAT IS AN APPLICATION?&#xA;&#xA;An application is a component of a project. There are also Python packages that are made to be used as a Django app that allows reusing the components. But when we are developing the project, we can break a complex process/project into individual apps. &#xA;&#xA;For Example, a project of `Blogging Platform` might have an application for `posts`, `users`, `api`, `homepage`, etc. So the project `Blogging Platform` might have separated the components like its API, Homepage, Post, Users, and so on to keep the development independent and well organized.&#xA;&#xA;So, we can understand apps as separate components of a large project. We can also understand apps as reusable components, you can use the `posts` app in another project or in a particular app of the same project making it easier and faster to create the project.&#xA;&#xA;### urls.py &#xA;&#xA;This is a file for managing the `URL` routes of the project. We&#39;ll discuss URLs and Views in their own part in the series. This file basically has a list of URLs that should be paired with a `view` or any other function. In the project folder, the URL patterns mostly link a baseurl to the URL file of the particular application. Don&#39;t worry if you can&#39;t get some of the terms, you&#39;ll clearly understand when we see them in the future parts of this series.&#xA;&#xA;### wsgi.py&#xA;&#xA;WSGI or Web Server Gateway Interface is a file that is used to configure the project for production or deployment. This takes care of the server when we deploy into production. It is a Synchronous Web Server i.e. it listens to only one request and responds to that at a time.&#xA;&#xA;Some of the common WSGI servers are [Gunicorn](https://gunicorn.org/), [Apache](https://docs.djangoproject.com/en/3.2/howto/deployment/wsgi/modwsgi/), [uWSGI](https://docs.djangoproject.com/en/3.2/howto/deployment/wsgi/uwsgi/), [cherrypy](https://docs.cherrypy.dev/), [Aspen](https://github.com/buchuki/aspen/blob/master/aspen/wsgi.py), etc.&#xA;&#xA;### asgi.py&#xA;&#xA;ASGI or Asynchronous Server Gateway Interface is also similar to the WSGI file but it serves as an asynchronous web server. This file handles the requests which might be asynchronous i.e. the web server can respond to multiple requests and respond to them at a time. We can even send tasks to the background using this type of server configuration. &#xA;&#xA;Some of the common ASGI servers are [Uvicorn](https://www.uvicorn.org/), [Daphne](https://docs.djangoproject.com/en/3.2/howto/deployment/asgi/daphne/), [Hypercorn](https://docs.djangoproject.com/en/3.2/howto/deployment/asgi/hypercorn/), etc.&#xA;&#xA;## Creating a Django Project Application &#xA;&#xA;So, let&#39;s create an application to see the structure of the basic app in Django. To create an app, we can use the `startapp` option with the `python manage.py` command followed by the name of the app like:&#xA;&#xA;```shell&#xA;python manage.py startapp name&#xA;```&#xA;&#xA;Here, `name` can be any app name you&#39;d like to give. &#xA;&#xA;## Application Structure&#xA;&#xA;After creating an app, let the name be anything it should have a similar structure as :&#xA;&#xA;![](https://res.cloudinary.com/dgpxbrwoz/image/upload/v1637731715/blogmedia/apptree_zr12s0.png)&#xA;&#xA;As we can see there are a couple of things to be discussed here. The main components that we are going to work on within developing the application in the project are: `models.py`, `views.py`, `test.py`. There are other files that we will create manually like the `urls.py`, `serializers.py`, etc.&#xA;&#xA;You also need to add the name of the app in quotes in the `INSTALLED_APPS` list in the `settings.py` file. Something like this:&#xA;&#xA;![](https://res.cloudinary.com/dgpxbrwoz/image/upload/v1637748258/blogmedia/installed_apps_ozir1p.png)&#xA;&#xA;The application files can be summarized as :&#xA;&#xA;![App structure summary](https://res.cloudinary.com/dgpxbrwoz/image/upload/v1637745151/blogmedia/17_xyefpq.png)&#xA;&#xA;Let us look at each of the files and folders in the application:&#xA;&#xA;### models.py&#xA;&#xA;As the same suggests, we need to define the model of a database here. The actual structure and the relationship are created with the help of python and Django in this file. This is the place where the crust of the web application might be defined. &#xA;&#xA;There are various aspects in creating a model like `Fields`, `Relationship`, `Meta-data`, `methods`, etc. These are defined with the help of python along with the Django Models. In most cases, a model is like a single `table` in an actual database. &#xA;&#xA;The file is quite important and interesting as it abstracts away the manual work of typing `SQL` queries to create the database. &#xA;&#xA;### migrations&#xA;&#xA;This migrations folder is a way for Django to keep track of the changes in the database. At every `migration` or actual query that runs to create the table or the database structure. There might be multiple steps or iteration of the database, this folder stores those pieces of information.&#xA;&#xA;To make an analogy, it is like a `.git` folder but for keeping track of the migrations or changes to the database. &#xA;&#xA;### admin.py&#xA;&#xA;This is the file for performing the operations at the admin level. We generally use this file to register the models into the `Admin section` without touching any frontend part. It provides a built-in `CRUD`(Create Read Update Delete) functionality to the model. This is really good for testing up the model manually before putting effort into the frontend part. &#xA;&#xA;Other than this, we can customize the admin section with this file. We will see the details in the part of the `Admin section` in this series.&#xA;&#xA;### views.py&#xA;&#xA;This is a file, that acts as a controller/server logic for the Django framework. We can define functions and classes as a response to the incoming requests from the server via the `urls.py` file. There are a couple of approaches when it comes to writing the format of the functions like `class-based views`, `function-based views`, and others depending on the type of operation is been done.&#xA;&#xA;As said earlier, it is the `V`(View) in the `MVT` architecture in Django Framework. This is the place where we write the logic from the server-side to let&#39;s say render HTML pages(templates), query to the database with CRUD operations, return an HTTP response, etc.  &#xA;&#xA;### urls.py&#xA;&#xA;This is the file in which a list of URL patterns is mapped to the particular view function. This `urls.py` is specific to the app and it might be prefixed with the URL route mentioned in the project folder&#39;s `urls.py` file.  &#xA;&#xA;So, not going much deeper, simply to put it&#39;s a map of a particular URL path with a function associated to it which gets triggered(called) when the user visits the URL. &#xA;&#xA;### tests.py&#xA;&#xA;This is a file where we can perform automated tests on the application. This might be in integration with models, other applications, project settings, etc. This is a component that Django makes it to have easy and quick unit testing along with the Python modules for advanced testing. It is quite easier to integrate python modules and libraries into almost anything in the Django Project.&#xA;&#xA;### apps.py&#xA;&#xA;This is the file for app-level configuration. We can change the default fields, app name, email settings, other module-specific settings that can be used in the models, views, or in another place that can be defined here. &#xA;&#xA;## Other Folders/files&#xA;&#xA;Apart from the app folder and the project folder, we may have other folders like the `templates`, `static`, `media`, etc. There are also python package-specific folders for which you may need to create folders.&#xA;&#xA;### Templates&#xA;&#xA;There are a couple of standard ways you can set up your Templates folder. Either in the root project or inside individual apps. The choice is yours, however, you feel comfortable. I personally use only one template folder in the root directory, but you can keep it wherever you want, but these two are the standard ones for ease of reading and maintaining the projects.&#xA;&#xA;&#xA;### Static &#xA;&#xA;The Static folder is the folder in which you store your `css`, `javascript`, and `images`(images or media files that are used in the templates). This is a good way to improve the performance as in the production the webserver collects all the static files and stores them in a single place for responding to the requests. &#xA;The template folder if present in the root folder, has a sub-folder as the application names and inside the `app-name`, we put in all the `.html` or other template files. &#xA;&#xA;As similar to the `template` folder, the location can be modified or set as a configuration from the settings.py file. Usually, the static files(`.css`, `js`, etc) are stored in the root folder with app names as subfolders. &#xA;&#xA;### Media&#xA;&#xA;The media folder is where you can store the media-specific to the user or the application processed data. For example, we can store the profile pictures of users, email attachments if it&#39;s an email application, thumbnails of the posts for a blogging platform, etc. &#xA;&#xA;The configuration of the Media folder is quite similar to the Static folder but it has certain additional configurations. We&#39;ll look at them in their sections in this series.&#xA;&#xA;Phew! That was all the folder structure you need to get started with Django. There might be other folders and files specific for project, application, python modules but it won&#39;t be much hard to understand those as well.&#xA;&#xA;## Conclusion&#xA;&#xA;From this part, we were able to understand the folder structure of the Django framework. We explored the various files and folders with their use cases and their purpose. So, by reading the above description of the files and folders you might have got a rough idea about the flow of the development cycle in Django.&#xA;&#xA;In the next part, we&#39;ll start with actually getting hands dirty in the code and making our first view. Thank you for reading and Happy Coding :)&#xA;</content>
      <type>posts</type>
    </item>
    <item>
      <title>Django Basics: Setup and Installation</title>
      <link>meetgor.com/django-basics-setup</link>
      <description></description>
      <pubDate>Sat, 20 Nov 2021 00:00:00 UTC</pubDate>
      <content>&#xA;## Introduction&#xA;&#xA;The crucial aspect of starting to learn any framework is the ease to set it up and Django by far is the easiest of the options out there. There is just a few lines of code to install django if you already have python installed in your system. In this article, we see how to setup a django project along with a virtual environment. &#xA;&#xA;If you already have python and pip installed, you can move on to the [virtual environment setup](#setting-up-virtual-environment-in-python).&#xA;&#xA;## Installing Python and PIP&#xA;&#xA;Django is a python based framework so that makes sense to have Python installed along with its package manager to use Django.  &#xA;&#xA;To install Python, you can visit the official [Python](https://www.python.org/downloads/) website to download any relevant version for your system (recommended 3.7 and above). &#xA;&#xA;Mostly the Python installation comes with the option to install `pip`(python&#39;s package manager) but if you missed that, that&#39;s fine, you can install the [get-pip.py](https://bootstrap.pypa.io/get-pip.py) file into your system and run the below code:&#xA;&#xA;```&#xA;python get-pip.py   &#xA;```&#xA;&#xA;Make sure the include the relative path to the file if you are not in the same folder as the file.&#xA;&#xA;So, that should be python setup in your local machine. To check that python was installed correctly, type in `python --version` and `pip --version` to check if they return any version number. IF they do, Congratulations !! You installed Python successfully and if not, don&#39;t worry there might be some simple issues that can be googled out and resolved easily. &#xA;   &#xA;---&#xA;&#xA;Let&#39;s move on to the actual setting of the Django project set up.   &#xA;&#xA;## Setting up Virtual Environment in python&#xA;&#xA;Virtual Environment is a software which isolates the installation of dependencies and libraries for a specific project, making it a clean and safe environment for deployment as well as maintenance. &#xA;&#xA;In Python, we have a virtual environment package known as `virtualenv` that does this thing. It is for installing the Python related packages into a isolated folder. So, we can install the `virtualenv` package in python by following the following steps:&#xA;&#xA;### Installing Virtualenv&#xA; &#xA;Firstly, install the virtual environment package, it&#39;s not mandatory but it keeps things simple and easy for your project in correspondence to the entire OS. So in python, we have a module to create the virtual environment pretty easily,&#xA;&#xA;```&#xA;pip install virtualenv&#xA;```&#xA;&#xA;You can use `pip3` or `pip -m`, or however you install normal python modules. This just installs the python virtual environment, we need to create a virtual environment in the current folder.&#xA;&#xA;### Creating a virtual environment&#xA;&#xA;We need to create the environment so as to give the Python interpreter an indication to consider the current folder as an isolated Python environment. We need to create a virtual environment in the current folder, so for that navigate to the folder where you want to create the project and enter the following command: &#xA;&#xA;```&#xA;virtualenv venv&#xA;``` &#xA;&#xA;Here, `venv` can be anything like `env` just for your understanding and simplicity it&#39;s a standard name kept for the same. After this, you will see a folder of the same name i.e. `venv` or any other name you have used. This is the folder where python will keep every installation private to the local folder itself. &#xA;&#xA;### Activating Virtual environment &#xA;&#xA;Now, we need to activate the virtual environment, this means that any thing installed in the prompt with the virtualenv activated will be isolated from the entire system and will be installed on in the virtual environment. To activate the environment, we can use the command :&#xA;&#xA;#### for Linux/macOS :&#xA;&#xA;```&#xA;source venv/bin/activate&#xA;```&#xA;&#xA;#### for Windows:&#xA;&#xA;```&#xA;venv\Scripts�ctivate&#xA;```&#xA;&#xA;After this, your command prompt will have a `(venv)` attached in the beginning. This indicates you are in a virtual environment, things you do here, may it be module installation or any configuration related to python will stay in the local folder itself.&#xA;&#xA;&#xA;## Installing Django&#xA;&#xA;After the virtual environment is set up and activated, you can install Django and get started with it. Django is a python module or package, which can be easily installed using its package manager `pip`. &#xA;&#xA;Install Django using pip:&#xA;&#xA;```&#xA;pip install django&#xA;```&#xA;&#xA;## Create a Django Project&#xA;&#xA;After the installation is completed, you can start a Django project in the current folder from the django package we installed. There are several commands available in the django module which you can execute in the command line that we&#39;ll discuss later.&#xA;For now, we will use the command `startproject` this is one of the [management commands](https://github.com/django/django/tree/main/django/core/management/commands) in Django. The [django-admin](https://docs.djangoproject.com/en/3.2/ref/django-admin/) is a command line utility for doing the administrative tasks related to Django.&#xA;&#xA;```&#xA;django-admin startproject myproject&#xA;```&#xA;&#xA;Here `myproject` can be your project name. After this, you will see one new folder and one file pop up.&#xA;&#xA;Namely, the `&lt;project-name&gt;` folder and `manage.py` file. We don&#39;t have to touch the `manage.py` file but we use it in most of the commands to use the Django functionalities, it is quite similar to the `django-admin` command. &#xA;&#xA;You can now run your basic server using the command : &#xA;&#xA;```&#xA;python manage.py runserver&#xA;```&#xA;&#xA;OR&#xA;&#xA;You can use `djagno-admin` command, but you need to set certain environment variables and modify the settings.py file as per the project-name. You can use the `django-admin` as the steps given in the django [documentation](https://docs.djangoproject.com/en/3.2/ref/django-admin/#cmdoption-settings).&#xA;&#xA;The output of the command `python manage.py runserver` should be visible in the browser at `https://127.0.0.1:8000` as below :&#xA;&#xA;![Django-Base-Project](https://gitlab.com/MR_DESTRUCTIVE/tblog-img/-/raw/main/screenshotr_2021-11-20T15-40-50.png)&#xA;&#xA;That&#39;s it the base django project is installed in your system. To stop the server simply press `Ctrl+C`. &#xA;&#xA;Follow the below GIF for a clear understanding of those instructions:&#xA;&#xA;![Django-basics-part2-setup](https://gitlab.com/MR_DESTRUCTIVE/tblog-img/-/raw/main/djp2.gif)&#xA;&#xA;---&#xA;&#xA;## Quick-Setup-Script&#xA;&#xA;You can avoid manually typing the commands once you get the idea of the process in setting up a django project by executing a simple shell script (for Linux/macOS) or a batch script (for Windows). The script looks something like:&#xA;&#xA;For Linux/macOS:&#xA;&#xA;```shell&#xA;#!/usr/bin/env bash&#xA;&#xA;mkdir $1&#xA;cd $1&#xA;pip install virtualenv&#xA;virtualenv venv&#xA;source venv/bin/activate&#xA;&#xA;pip install django&#xA;django-admin startproject $1 .&#xA;clear&#xA;```&#xA;&#xA;Save as commands.sh file&#xA;&#xA;For Windows: &#xA;&#xA;```batch&#xA;mkdir %1 &#xA;cd %1&#xA;pip install virtualenv&#xA;virtualenv env&#xA;call env\Scripts�ctivate&#xA;&#xA;pip install django&#xA;django-admin startproject %1 .&#xA;cls&#xA;&#xA;```   &#xA;save as commands.bat file&#xA;&#xA;For further instructions you can checkout the [GitHub repository](https://github.com/Mr-Destructive/django-quick-setup-script) or a detailed [article](https://mr-destructive.github.io/techstructive-blog/django/web-development/python/2021/08/15/Django-Quick-Setup.html) about it.&#xA;&#xA;## Conclusion&#xA;&#xA;From this section, we were able to setup the Django project in our local system. In the next part, we will cover the `folder structure` of the Django project. We won&#39;t directly go into the code part because that is very easy once you understand the flow of the framework and its internal working. So, thanks for reading and Happy Coding :)&#xA;</content>
      <type>posts</type>
    </item>
    <item>
      <title>Django Basics: What is it?</title>
      <link>meetgor.com/django-basics-intro</link>
      <description></description>
      <pubDate>Tue, 16 Nov 2021 00:00:00 UTC</pubDate>
      <content>&#xA;&#xA;## Introduction&#xA;&#xA;Welcome to Django Basics series, in this series we&#39;ll explore the basics of the Django web framework. In this part, we&#39;ll understand what this web framework provides and what actually the back-end development consists of. We&#39;ll discuss where Django is used and why it is a great choice for beginners as well as experienced developers. &#xA;&#xA;## What is Django?&#xA;&#xA;[Django](https://developer.mozilla.org/en-US/docs/Learn/Server-side/Django/Introduction) is a back-end web framework. It is based on python which means you have to write most of the project&#39;s code in Python. But Django comes with a lot of boilerplate code and thus it becomes quite quick in the development. &#xA;&#xA;Django is an open-source framework, it is maintained by the Django Software Foundation Organization. You can view the source code at [GitHub](https://github.com/django/django).&#xA;&#xA;### BACKEND ?&#xA;&#xA;The term `backend` refers to the section or an essential component in Web development, it consists of a `database`, `API`, and the `web server` itself which allows the components to connect together. There might be other components like `load-balancers`, `middleware`, etc. But the core of web applications revolves around **Databases** and **API**. &#xA;&#xA;#### Database&#xA;&#xA;A database is a technology or tool that lets you store the data which might be used for serving the actual application, that might be a frontend app, standalone API, etc. The data you want to store might be generally the User Accounts, Content of the App, basically any some form of data(there are exceptions here, you can&#39;t directly store media files in DB). The Database allows to make content management and the application dynamic and can be personalized. We have certain types of databases like SQL(relational), NO-SQL, Cloud, Network, etc. The tools of these database management are PostgreSQL, MySQL, MongoDB, HarperDB,etc. These tools allow you to manage your database in a convenient way.  &#xA;&#xA;#### API&#xA;&#xA;An API or Application Programming Interface is a way for any frontend app, outside the system to access the database. API allows you to query to the database with GET, POST, DELETE, PUT, etc kinds of operation/requests to the database via the webserver. In API, we have endpoints or (URL routes) at which a particular designated operation can be performed. In APIs, we currently have four primary architectures namely RESTful (quite famous and well established), SOAP, gRPC, and GRAPHQL (new and increasing in popularity). &#xA;&#xA;### Framework?&#xA;&#xA;A framework is a tool to do a certain task efficiently and avoid some repetitive patterns by abstracting many layers in developing it. Django is a high-level framework which means it abstracts certain processes in making the application. It is ideal for beginners to get up and running with a professional full-stack web application(though it requires some learning).&#xA;&#xA;Django makes the project ideal for experienced as well as beginner web developers. The community and the ecosystem of Python are quite amazing as well as there are a ton of resources to get you through your projects.  &#xA;&#xA;![](https://gitlab.com/MR_DESTRUCTIVE/tblog-img/-/raw/main/dj-1.png)&#xA;&#xA;The above is a high-level view of how Django project development works, the application might be not only one but several other standalone applications working together to make one project in Django. There is a lot of abstraction in Django like the Middleware, Session Management, Security, etc. This should be a good overview of the development map in Django.&#xA;&#xA;Django follows an MVT architecture. Architecture is a standard in developing an application/project for the ease of the workflow and making it an even experience. &#xA;&#xA;![](https://cdn.hashnode.com/res/hashnode/image/upload/v1635079576954/WcjcokoiX.png)&#xA;&#xA;The above diagram depicts the architecture in Django, the components in the Django server include the Model, View, and Template.&#xA;&#xA;### Model&#xA;&#xA;`Model` refers to the design of the database or a blueprint of the data that is bound with the application in the project. &#xA;&#xA;### View&#xA;&#xA;The `View` is the part to control the way the data should be presented or the how response should be given back to a request from the server(client)&#xA;&#xA;### Template&#xA;&#xA;The `Template` is the markup or the form of document that is to be rendered on the client-side and these are controlled by the views and parsed with the data from the models.&#xA;&#xA;## Why would you need it?&#xA;&#xA;As a developer you would find a need to host your projects on the internet, for that learning and deploying a web server from the ground up might be quite complex and time-consuming, Django solves this problem quite well. Not only it is easy but even scalable at a production level, making it quite a robust choice for anyone. And as a bonus thing, it is based on Python, which makes it even easier to write code for people staying at an abstracted perspective in programming. Python has by far the richest sets of libraries and utilities for any domain, this integration with Django is a deadly combination. &#xA;&#xA;#### Batteries included?&#xA;&#xA;Django solves many problems by abstracting away many things like managing the database, rendering dynamic templates(HTML), properly structuring and serving static and media files, well-organized project structure, and many other things. You just have to get the actual thing done i.e. the server logic(or how to design the API/Database models). On top of that, Django has a built-in fully fledged Admin section and a User model. An Admin section is where you can manage the project in a better way without touching the code. It also has certain applications/libraries to make the development of APIs, integrating various databases, forms for posting data, support for Bootstrap a lot easier. It&#39;s like a `plug and play` kind of thing for the development of web applications. &#xA;&#xA;Hence, it is rightly called the `Batteries Included` web framework.&#xA;&#xA;### Key features of Django&#xA;&#xA;- Ease in integrating a database&#xA;- Flawless Django Template Engine&#xA;- Easy to scale up/down&#xA;- Python libraries support out of the box&#xA;- Amazing Documentation / Helpful community&#xA;- Developing Production-ready projects quickly&#xA;- Baked in support for testing, APIs, cookies, sessions, etc&#xA;- Optimized for security, SEO, and DRY(don&#39;t repeat yourself) principles&#xA;&#xA;## Applications built with Django&#xA;&#xA;Django is used in quite a famous application that you might be using daily. &#xA;&#xA;Django along with Python powers the top applications on the internet like:&#xA;&#xA;1. YouTube&#xA;2. Instagram&#xA;3. Spotify&#xA;4. Disqus&#xA;5. Dropbox&#xA;6. Pinterest&#xA;7. National Geographic&#xA;8. Mozilla&#xA;9. BitBucket&#xA;10. Discovery Network&#xA;&#xA;You have to say, it is powerful and has firm grounds in the tech industry. It&#39;s highly unlikely that Django will be overtaken by another framework at least some years from now.  &#xA;&#xA;&gt; Django is a tool to build web applications fast and in a scalable and Pythonic way&#xA;&#xA;## What will this series cover?&#xA;&#xA;Learning Django from the ground up. We will learn the setup, folder structure, architecture of Django, What are apps, views, URLs, models, serializers, static and template files, and there is a ton of stuff to be covered. &#xA;&#xA;### Resources to learn Django&#xA;&#xA;- [Django Official Docs](https://www.djangoproject.com/start/)&#xA;- [Very Academy - Django Playlist](https://www.youtube.com/c/veryacademy/playlists?view=50&amp;sort=dd&amp;shelf_id=2)&#xA;- [Codemy.com - Django](https://www.youtube.com/watch?v=HHx3tTQWUx0&amp;list=PLCC34OHNcOtqW9BJmgQPPzUpJ8hl49AGy)&#xA;- [Corey Schafer](https://www.youtube.com/watch?v=UmljXZIypDc&amp;list=PL-osiE80TeTtoQCKZ03TU5fNfx2UY6U4p)&#xA;- [Telusko](https://www.youtube.com/watch?v=SIyxjRJ8VNY&amp;list=PLsyeobzWxl7r2ukVgTqIQcl-1T0C2mzau)&#xA;&#xA;## Conclusion&#xA;&#xA;From this article, we were able to understand the Django framework, what is it, and why it should be used on a high level. Further, we explored the web application(backend) components which are targeted by Django for ease of developing applications. We also saw the baseline architecture that Django uses to make projects. &#xA;&#xA;In the next section, we&#39;ll start the actual coding in Django, firstly how to set up the environment and understanding the folder structure, and so on. So I hoped you enjoyed the article. Thank you for reading. Happy Coding :)&#xA;</content>
      <type>posts</type>
    </item>
    <item>
      <title>Flask and Django - the backend web frameworks</title>
      <link>meetgor.com/flask-django-frameworks</link>
      <description></description>
      <pubDate>Sun, 24 Oct 2021 00:00:00 UTC</pubDate>
      <content>&#xA;## Introduction&#xA;&#xA;We all have seen the buzz around web frameworks like Django, Flask, Node.js, etc but have you taken time to learn all of them? No, and you shouldn&#39;t! Because many web frameworks share the same principle and workflow with a bit of difference. It&#39;s just like learning one programming language and applying the same concepts in a different syntax and mechanism. In the world of web frameworks, this is the case as well, but most of them will disagree with it as every web framework is unique in its design and that&#39;s true, don&#39;t get me wrong.&#xA;&#xA;Before we get into frameworks let us understand the key components of the web application&#xA;- **Database** - It holds the data for our application.&#xA;- **Server** - Used to fetch/store/manage requests from the client. &#xA;- **API** - Used as an interface between the client and the Database. &#xA;- **Client** - The browser or any client that requests for resources.&#xA;&#xA;![djflask-webapp.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1635081505223/rLnSyA_7Y.png)&#xA;&#xA;Every web framework will serve the same purpose with different design, architecture, language but it will have a similar pattern in developing the application. Let&#39;s clear the concepts in this article.&#xA;&#xA;## What is a back-end Web framework?&#xA;&#xA;A web framework is a tool/application meant for designing, creating, testing web applications a lot quicker with a lot of ease. Without web frameworks, you will have been writing some code that will tire you very quickly. &#xA;&#xA;It even seems impossible to manually write markups for each piece of data in the application, which is taken care of by dynamic templating in Python-based frameworks like Django, Flask. The database queries are managed by the web frameworks as well, otherwise, you will have been writing SQL queries manually! How painful and frustrating that would look, of course, you can create scripts for querying to the database but you are then creating a component of a framework. `Don&#39;t waste time` that&#39;s a takeaway from the philosophy of all the web frameworks.&#xA;&#xA;Another thing that back-end web frameworks do is create homogeneity in development across different environments and applications. It also creates a developer-friendly environment. We must not forget how easy and quick applications can be built using the back-end web frameworks. &#xA;&#xA;&#xA;&#xA;### A back-end Web framework provides some of the features like:&#xA;&#xA;- Handle web requests&#xA;- Manage DB by just using some simple scripts&#xA;- Render Dynamic Templates&#xA;- Provide a lot of native-language libraries integration&#xA;- Organize a project much easily and effectively&#xA;- Options to scale the application at any level&#xA;- Provide some standard and secure way to run the server(production)&#xA;- Design APIs much easily&#xA;&#xA;&#xA;Let us look at two of the most popular frameworks in the Python community.&#xA;&#xA;### 1. Flask&#xA;### 2. Django&#xA;&#xA;![backend framework ranking](https://cdn.hashnode.com/res/hashnode/image/upload/v1635070666410/JbMc7NKP0.png)&#xA;&#xA;We are seeing that Django and Flask are among the top 3 back-end web frameworks in 2021. So there is no double thought on why you should learn these technologies.&#xA;&#xA;### What is Flask&#xA;&#xA;Flask is the bare-bones framework that provides a lot of customizability with a lot less boilerplate code. It is a framework that provides a lot of third-party libraries to add functionalities to our application. &#xA;&#xA;&gt; Flask is a micro web framework&#xA;&#xA;Flask as per the official documentation is a `micro` framework indicating it has a very minimal setup. It is a back-end web framework that can be structured as per needs with a very little configuration overhead. That being said, it can get a bit limited in structuring and functionalities as it needs to taken care of manually.&#xA;&#xA;**Flask is the easiest back-end web framework to get started and learn the fundamentals of server-side**. Flask is quite flexible in terms of scalability and maintenance of decent-sized applications as well. Though the community is not that big and absence of standardization in Flask, it is a go-to back-end web framework for beginners as well as experts due to its simplicity and flawless integration with Python libraries. &#xA;&#xA;The main concepts in Flask might be:&#xA;&#xA;- Virtual Environment &#xA;- WSGI as a web server&#xA;- App routing&#xA;- Jinga2 as a templating language&#xA;- Creating Database connections&#xA;&#xA;So, **Flask is kind of a DIY back-end web framework with rich sets of libraries and customizability out of the box**. This can easily be a beginner&#39;s choice and a right one too.&#xA;&#xA;### What is Django&#xA;&#xA;Django is also a back-end web framework based on Python programming language but it is more standardized and high-level. Django encourages a defined pattern for development but with customization and freedom in mind.&#xA;&#xA;Django also modularizes the components into so-called `apps` to provide a scalable experience. It has a lot of boilerplate code to get up and running quite easily, it also has a `Admin section` pre-built with all the functionalities. Similar to `Flask`, it also provides flawless integration with all the Python libraries. It provides a much easier Database integration and pre-built `User` authentication along with its model ready to plug in and use. &#xA;&#xA;&gt; Django is a Batteries included Framework&#xA;&#xA;That means it has baked in functionalities like User-Authentication, Admin Section, Database Integration, RSS/Atom syndication feeds, etc. &#xA;&#xA;![djflask-dj.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1635079576954/WcjcokoiX.png)&#xA;&#xA;The main concepts in Django include:&#xA;&#xA;- Virtual Environment&#xA;- WSGI/ASGI as web servers&#xA;- Project structure&#xA;- `Model View Controller` Architecture in developing apps&#xA;- Django Templating Language for rendering Dynamic Templates &#xA;- `Object-Relational Mapping` in creating the applications&#xA;&#xA;Unlike Flask, Django is already baked in with a lot of functionalities and integration with a ton of features. It should be good for beginners but many things are already taken care of that can be a huddle in **actual learning process**, that being said it is a much scalable and production-ready web framework (not only back-end).&#xA;&#xA;### What are the similarities between them?&#xA;&#xA;Well, if you learn one the other will be quite easy enough to pick up. The overall development is almost similar but unique in its own way. &#xA;&#xA;- Pythonic syntax and libraries&#xA;- Project Structure is quite similar to `blueprints` in Flask and `apps` in Django&#xA;- Templating Language is almost similar&#xA;- Static Files are handled similarly with a different syntax &#xA;- URL Routing is the same as it binds the view(functions) with a pattern&#xA;- Ease in Deployment with minimal configuration&#xA;&#xA;## What should you learn?&#xA;&#xA;That question is dependent on the type of application you are trying to make but for a beginner trying to get hands dirty on the server-side, I would recommend `Flask` as it is quite minimal and helps in constructing the base for the concepts like APIs, Databases, Requests, Admin section, etc. &#xA;&#xA;This might not be that difficult for people trying to learn back-end from scratch but for people with a bit of programming and server-side experience, `Django` should be a go-to framework for all their needs. &#xA;&#xA;At the end of the day, it hardly matters what you do with which framework, what people see is the end result.&#xA;&#xA;## Conclusion&#xA;&#xA;Thus, from this article, you might have got a bit understanding of why are the frameworks used in making applications and also the similarities and differences in the Python-based back-end web frameworks like Django and Flask. If you have any thoughts please let me know in the comments or on my social handles, any kind of feedback is much appreciated. &#xA;&#xA;Thank you for reading till here, until then as always Happy Coding :)&#xA;</content>
      <type>posts</type>
    </item>
    <item>
      <title>Django + Auth0 Quick Setup</title>
      <link>meetgor.com/djagno-auth0-script</link>
      <description></description>
      <pubDate>Tue, 28 Sep 2021 00:00:00 UTC</pubDate>
      <content>&#xA;## Introduction&#xA;&#xA;&#xA;This is a guide and a walkthrough of how to quickly set up a base Django project with Auth0 as integration for authentication and authorization. I will walk you through the Django setup and how to use and integrate the functionalities of the Auth0.  I will also discuss how why you should be using Auth0 and why I love it.&#xA;&#xA;The script takes `2:44` minutes time to do everything from scratch. From installing virtualenv in python to integrating the Auth0 application. &#xA;&#xA;Here&#39;s how the script works:&#xA;&#xA;![authodj.gif](https://cdn.hashnode.com/res/hashnode/image/upload/v1632830813802/MOvedPYdt.gif)&#xA;&#xA;### Contents&#xA;&#xA;- [What is Auth0](#what-is-auth0)&#xA;- [Why I love Auth0](#why-i-love-auth0)&#xA;- [Set up a Django Project](#set-up-a-django-project)&#xA;- [Integrate Auth0 to a Django project](#integrate-auth0-to-a-django-project)&#xA;- [Creating a BASH Script for integrating Auth0](#creating-a-bash-script-for-integrating-auth0)&#xA;     - [Appending to a file](#appending-to-a-file)&#xA;     - [Adding text before a particular line using `sed` ](#adding-text-before-a-particular-line-using-sed)&#xA;     - [Appending to a line using `sed`](#appending-to-a-line-using-sed)&#xA;- [Complete BASH Script](#complete-bash-script)&#xA;- [Conclusion](#conclusion)&#xA;&#xA;## What is Auth0&#xA;&#xA;Auth0 (`Auth zero`) is a platform that provides easy authentication and authorization for a number of platforms in various programming languages and frameworks. The easy-to-follow documentation, availability for almost all web frameworks across platforms make it a big bonus for developers. They actually make the Developer experience flawless and beginner-friendly. &#xA;&#xA;According to Auth0,&#xA;&gt; They make your login box awesome&#xA;&#xA;And how true is that they make things pretty convenient and wicked fast to integrate a smooth functional backend for authentication and authorization. Of course, there are more things they offer than just making authentication systems but it is by far what the world knows them for.&#xA;&#xA;## Why I love Auth0&#xA;&#xA;Auth0 is a generous company that provides a free tier for a limited capacity of authentication and that might be more than enough for a developer getting its feet wet in the web development (backend). &#xA;&#xA;They even provide a nice user interface out of the box for login/signup and even a dashboard ready-made, which is quite a lot of heavy lifting already done for you. Also, there is a dashboard for analyzing the number of sign-in/logins into the particular app. This provides the admin/developer of the app to get a closer look at the user registered in a day/week/months, number of active users, and so on. &#xA;&#xA;So, who would not love it? I am willing to write and use their service for some of my projects. I already have used one for the Hashnode x Auth0 Hackathon, I made [devquotes](https://github.com/Mr-Destructive/devquotes) using the authentication of Auth0 in my Django application. &#xA;&#xA;## Set up a Django Project&#xA;&#xA;If you are reading this you already know how to set up a Django project, I assume. But nevertheless, I can just include a quick introduction on how to do it. I have a script to do this. &#xA;&#xA;```bash&#xA;#!/usr/bin/env bash&#xA;&#xA;mkdir $1&#xA;cd $1&#xA;pip install virtualenv&#xA;virtualenv env&#xA;source env�in�ctivate&#xA;&#xA;pip install django&#xA;django-admin startproject $1 .&#xA;clear&#xA;```&#xA;You can check out  [Django Quick Setup Script](https://techstructiveblog.hashnode.dev/django-quick-setup-script)  for the details of this script and also a more in-depth guide of Django project setup.&#xA;&#xA;But if you want to understand the basics of the Django project setup here is a little guide about it:&#xA;&#xA;Firstly, create a virtual environment, it&#39;s not mandatory but it keeps things simple and easy for your project in correspondence to the entire OS. So in python, we have a module to create the virtual environment pretty easily,&#xA;&#xA;```shell&#xA;pip install virtualenv&#xA;```&#xA;You can use `pip3` or `pip -m`, or however you install normal python modules. This just installs the python virtual environment, we need to create one in the current folder, so for that navigate to the folder where you want to create the project and enter the following command:&#xA;&#xA;```shell&#xA;virtualenv venv&#xA;``` &#xA;&#xA;Here, `venv` can be anything like `env` just for your understanding and simplicity it&#39;s a standard name kept for the same. After this, you will see a folder of the same name i.e. `venv` or any other name you have used. This is the folder where python will keep every installation private to the local folder itself. Now, we need to activate the virtual environment, for that we can use the command :&#xA;&#xA;```bash&#xA;# for Linux/macOS :&#xA;source venv/bin/activate&#xA;```&#xA;&#xA;```batch&#xA;# for Windows:&#xA;venv\Scripts�ctivate&#xA;```&#xA;After this, your command prompt will have a `(venv)` attached to its start. This indicates you are in a virtual environment, things you do here, may it be module installation or any configuration related to python will stay in the local folder itself.&#xA;&#xA;After the virtual environment is set up and activated, you can install Django and get started with it. Firstly, install Django using pip:&#xA;&#xA;```shell&#xA;pip install django&#xA;```&#xA;After the installation is completed, you can start a Django project in the current folder using the command: &#xA;&#xA;```shell&#xA;django-admin startproject name&#xA;```&#xA;Here name can be your project name. After this, you will see one new folder and one file pop up.&#xA;Namely, the `project named` folder and `manage.py` file. So you don&#39;t have to touch the `manage.py` file but we use it in most of the commands to use the Django functionalities. &#xA;&#xA;You can now run your basic server using the command : &#xA;```shell&#xA;python manage.py runserver&#xA;```&#xA;There is a base installed/setup of the Django project. Moving on in integrating the Auth0 login functionality in our webpage.&#xA;&#xA;&#xA;## Integrate the Auth0 app in your project&#xA;&#xA;So, for integrating the Auth0 app for your web application, you need to have an Auth0 account, you can signup here. After this you can create an Auth0 application for any type of application, we have a couple of options:&#xA;&#xA;- Native Application&#xA;- Single Page Application&#xA;- Regular Web Application&#xA;- Machine to Machine Application&#xA;&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1632748408741/sUeS8AgrX.png)&#xA;&#xA;You can choose as per your needs, but mostly it would be a Regular Web application if you have a backend like Django, Nodejs, PHP, or other types of frameworks and languages. So, moving ahead we have created an application for the Django framework as a backend. Now, we have a `Settings` tab in the application dashboard, where we have different credentials for the Auth0 app to talk to our application.&#xA;&#xA;The credentials needed to be stored safely are:&#xA;- domain&#xA;- Client ID (Key)&#xA;- Client Secret&#xA;&#xA;This has to be secured for our local application which will go into production when ready. You can use several options like dotenv, environment variables, and so on when the application is being deployed but for now, let&#39;s hardcode them in our Django project. &#xA;&#xA;Now, you can follow the simple straightforward procedure to copy-paste your credentials from the  [Auth0 official documentation](https://auth0.com/docs/quickstart/webapp/django/01-login#logout). It&#39;s quite straightforward to follow the steps even for a beginner. &#xA;&#xA;After the Auth0 app has been configured following the procedure in the documentation, you need to integrate several files like dashboard and index templates into your custom templates.&#xA;&#xA;Following additional changes are also to be made if you have a user-defined app for your Django project.&#xA;&#xA; In the `auth0login` app, `view.py` file:&#xA;1. The `index` function renders the base file for your project if the user is logged in.&#xA;2. The `dashboard` function renders the baked version of your profile/dashboard of users on your app.&#xA;&#xA;You would also need to add the root URIs of your app that you will be using for testing or in production. For example, we can add `http://127.0.0.1:8000` to allow and use Auth0 in our development environment locally.&#xA;&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1632828981455/2gc4h7tTh.png)&#xA;&#xA;You also need to specify the callback URLs for your application which is `/complete/auth0` by default.&#xA;&#xA;## Creating a BASH Script for integrating Auth0&#xA;&#xA;So, we can now dive into creating the BASH Script to set up the Django x Auth0 application in minutes. The script is quite large, like 200 lines but don&#39;t worry! Its automation reduces the pain of integrating a User Authorization flawlessly. I am also thinking of adding the `cURL` command and parsing in the Client ids, keys, and secret keys, etc. &#xA;&#xA;### Appending to a file&#xA;&#xA;We can use the `cat` command to append text to a file, using the syntax as below:&#xA;&#xA;```shell&#xA;cat &lt;&lt; EOF &gt;&gt; filename&#xA;text&#xA;more text&#xA;EOF&#xA;```&#xA;Remember here EOF is just a label to stop the command and save it to the file. &#xA;&#xA;&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1632826339707/_g_RXP3NE.png)&#xA;&#xA;So, we can see that we were able to append to a file, multiple lines using the cat command.  &#xA;&#xA;We have used this concept in adding configuration and credentials to the `settings.py` or the `urls.py` files.&#xA;&#xA;### Adding text before a particular line using `sed` &#xA;&#xA;`sed` is a great command, and there is nothing you can&#39;t do with it, OK there might be exceptions. We can get write to a file directly (don&#39;t display the output) and specify the line number before which we want to append the text. We can then add the text we want and followed by the filename.&#xA;&#xA;```shell&#xA;sed -i &#39;33 i sometext here&#39; filename&#xA;```&#xA;Here, `33` is the line number in the file which we want to insert before. We have used `&#39;&#34;&#39;` to add a `&#39;` inside a `&#39;`, this might feel a bit wired but that is how it is in BASH. &#xA;&#xA;Let&#39;s say you want to add `print(&#39;Hello, World!&#39;)` to a particular line, we have to enclose `&#39;` with these `&#34;&#39;`( double and single quotes),&#xA;&#xA;```shell&#xA;sed -i &#39;2i print(&#39;&#34;&#39;Hello, World&#39;&#34;&#39;)&#39; hello.py&#xA;```&#xA;This will add the line `print(&#39;Hello World&#39;)` to the file `hello.py`&#xA;&#xA;&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1632824742835/Uj8AF07UG.png)&#xA;&#xA;### Appending to a line using sed&#xA;&#xA;We can even append text to a particular line using sed, we can use some escape characters and regex to add the text from the end of the line.&#xA;&#xA;```shell&#xA;sed -i &#39;2i s/$/ textgoes here /&#39; filename&#xA;``` &#xA;Here 2 is any number of line you want to add text to, next `i` a prompt for inserting text and then we have regex like `s/$/ /`, this will put the text enclosed in `/ /` to the end of the line as indicated by `$`.  We have the filename at its usual place as before.&#xA;&#xA;So, lets say, I want to add a comment to the second line in the previous example, I can use the following command to do it:&#xA;&#xA;```shell&#xA;sed -i &#39;2 s/$/ # another comment/&#39; hello.py&#xA;&#xA;```&#xA;&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1632825067925/0eU2mkCDI.png)&#xA;&#xA;We have used these commands to add the `include` function in the `urls.py` in the project folder.&#xA;&#xA;So those were all the operations we used for doing some automated editing for the Auth0 app integration to our Django project.&#xA; &#xA;Below is the entire script and is also uploaded on [GitHub](https://github.com/Mr-Destructive/django-auth0-quick-setup). &#xA;&#xA;## Complete BASH Script&#xA;&#xA;You can run the file by parsing the name of your project.&#xA;&#xA;```shell&#xA;bash script.sh mywebsite&#xA;```&#xA;&#xA;Wait for some 2-3 minutes, and the script will produce the Django application with the Auth0 app integrated. You will have to enter the credentials manually wherever applicable.&#xA;&#xA;&#xA;```bash&#xA;#!/usr/bin/env bash&#xA;&#xA;mkdir $1&#xA;cd $1&#xA;pip install virtualenv&#xA;virtualenv venv&#xA;source venv/Scripts/activate&#xA;&#xA;pip install django&#xA;django-admin startproject $1 .&#xA;&#xA;cat &lt;&lt; EOF &gt;&gt; requirements.txt&#xA;social-auth-app-django~=3.1 &#xA;python-jose~=3.0 &#xA;python-dotenv~=0.9&#xA;EOF&#xA;&#xA;pip install -r requirements.txt&#xA;&#xA;pip freeze &gt; requirements.txt&#xA;&#xA;python manage.py startapp auth0login&#xA;&#xA;touch auth0login/urls.py&#xA;mkdir auth0login/templates&#xA;touch auth0login/templates/index.html&#xA;touch auth0login/templates/dashboard.html&#xA;&#xA;sed -i &#39;40 i \    &#39;&#34;&#39;&#34;&#39;social_django&#39;&#34;&#39;&#34;&#39;,&#39; $1/settings.py&#xA;sed -i &#39;41 i \    &#39;&#34;&#39;&#34;&#39;auth0login&#39;&#34;&#39;&#34;&#39;,&#39; $1/settings.py&#xA;sed -i &#39;21 i \    path(&#39;&#34;&#39;&#39;&#34;&#39;, include(&#39;&#34;&#39;auth0login.urls&#39;&#34;&#39;)),&#39; $1/urls.py&#xA;sed -i &#39;17 s/$/, include/&#39; $1/urls.py &#xA;&#xA;cat &lt;&lt; EOF &gt;&gt; $1/settings.py&#xA;SOCIAL_AUTH_TRAILING_SLASH = False  # Remove trailing slash from routes&#xA;SOCIAL_AUTH_AUTH0_DOMAIN = &#39;YOUR_DOMAIN&#39;&#xA;SOCIAL_AUTH_AUTH0_KEY = &#39;YOUR_CLIENT_ID&#39;&#xA;SOCIAL_AUTH_AUTH0_SECRET = &#39;YOUR_CLIENT_SECRET&#39;&#xA;EOF&#xA;&#xA;cat &lt;&lt; EOF &gt;&gt; $1/settings.py &#xA;SOCIAL_AUTH_AUTH0_SCOPE = [&#xA;    &#39;openid&#39;,&#xA;    &#39;profile&#39;,&#xA;    &#39;email&#39;&#xA;]&#xA;EOF&#xA;&#xA;python manage.py migrate&#xA;&#xA;cat &lt;&lt; EOF &gt;&gt;auth0login/auth0backend.py&#xA;&#xA;from urllib import request&#xA;from jose import jwt&#xA;from social_core.backends.oauth import BaseOAuth2&#xA;&#xA;&#xA;class Auth0(BaseOAuth2):&#xA;    &#34;&#34;&#34;Auth0 OAuth authentication backend&#34;&#34;&#34;&#xA;    name = &#39;auth0&#39;&#xA;    SCOPE_SEPARATOR = &#39; &#39;&#xA;    ACCESS_TOKEN_METHOD = &#39;POST&#39;&#xA;    REDIRECT_STATE = False&#xA;    EXTRA_DATA = [&#xA;        (&#39;picture&#39;, &#39;picture&#39;),&#xA;        (&#39;email&#39;, &#39;email&#39;)&#xA;    ]&#xA;&#xA;    def authorization_url(self):&#xA;        return &#39;https://&#39; + self.setting(&#39;DOMAIN&#39;) + &#39;/authorize&#39;&#xA;&#xA;    def access_token_url(self):&#xA;        return &#39;https://&#39; + self.setting(&#39;DOMAIN&#39;) + &#39;/oauth/token&#39;&#xA;&#xA;    def get_user_id(self, details, response):&#xA;        &#34;&#34;&#34;Return current user id.&#34;&#34;&#34;&#xA;        return details[&#39;user_id&#39;]&#xA;&#xA;    def get_user_details(self, response):&#xA;        # Obtain JWT and the keys to validate the signature&#xA;        id_token = response.get(&#39;id_token&#39;)&#xA;        jwks = request.urlopen(&#39;https://&#39; + self.setting(&#39;DOMAIN&#39;) + &#39;/.well-known/jwks.json&#39;)&#xA;        issuer = &#39;https://&#39; + self.setting(&#39;DOMAIN&#39;) + &#39;/&#39;&#xA;        audience = self.setting(&#39;KEY&#39;)  # CLIENT_ID&#xA;        payload = jwt.decode(id_token, jwks.read(), algorithms=[&#39;RS256&#39;], audience=audience, issuer=issuer)&#xA;&#xA;        return {&#39;username&#39;: payload[&#39;nickname&#39;],&#xA;                &#39;first_name&#39;: payload[&#39;name&#39;],&#xA;                &#39;picture&#39;: payload[&#39;picture&#39;],&#xA;                &#39;user_id&#39;: payload[&#39;sub&#39;],&#xA;                &#39;email&#39;: payload[&#39;email&#39;]}&#xA;&#xA;EOF&#xA;&#xA;cat &lt;&lt; EOF &gt;&gt; $1/settings.py&#xA;&#xA;AUTHENTICATION_BACKENDS = {&#xA;    #&#39;YOUR_DJANGO_APP_NAME.auth0backend.Auth0&#39;,&#xA;    &#39;django.contrib.auth.backends.ModelBackend&#39;&#xA;}&#xA;&#xA;EOF&#xA;&#xA;cat &lt;&lt; EOF &gt;&gt; $1/settings.py&#xA;&#xA;LOGIN_URL = &#39;/login/auth0&#39;&#xA;LOGIN_REDIRECT_URL = &#39;/dashboard&#39;&#xA;EOF&#xA;&#xA;cat &gt; auth0login/views.py&lt;&lt;EOF&#xA;&#xA;from django.shortcuts import render, redirect&#xA;from django.contrib.auth.decorators import login_required&#xA;from django.contrib.auth import logout as log_out&#xA;from django.conf import settings&#xA;from django.http import HttpResponseRedirect&#xA;from urllib.parse import urlencode&#xA;import json&#xA;&#xA;def index(request):&#xA;    user = request.user&#xA;    if user.is_authenticated:&#xA;        return redirect(dashboard)&#xA;    else:&#xA;        return render(request, &#39;index.html&#39;)&#xA;&#xA;&#xA;@login_required&#xA;def dashboard(request):&#xA;    user = request.user&#xA;    auth0user = user.social_auth.get(provider=&#39;auth0&#39;)&#xA;    userdata = {&#xA;        &#39;user_id&#39;: auth0user.uid,&#xA;        &#39;name&#39;: user.first_name,&#xA;        &#39;picture&#39;: auth0user.extra_data[&#39;picture&#39;],&#xA;        &#39;email&#39;: auth0user.extra_data[&#39;email&#39;],&#xA;    }&#xA;&#xA;    return render(request, &#39;dashboard.html&#39;, {&#xA;        &#39;auth0User&#39;: auth0user,&#xA;        &#39;userdata&#39;: json.dumps(userdata, indent=4)&#xA;    })&#xA;&#xA;def logout(request):&#xA;    log_out(request)&#xA;    return_to = urlencode({&#39;returnTo&#39;: request.build_absolute_uri(&#39;/&#39;)})&#xA;    logout_url = &#39;https://%s/v2/logout?client_id=%s&amp;%s&#39; % \&#xA;                 (settings.SOCIAL_AUTH_AUTH0_DOMAIN, settings.SOCIAL_AUTH_AUTH0_KEY, return_to)&#xA;    return HttpResponseRedirect(logout_url)&#xA;&#xA;EOF&#xA;&#xA;cat &lt;&lt; EOF &gt;&gt; auth0login/templates/index.html&#xA;&#xA;&lt;div class=&#34;login-box auth0-box before&#34;&gt;&#xA;    &lt;img src=&#34;https://i.cloudup.com/StzWWrY34s.png&#34; /&gt;&#xA;    &lt;h3&gt;Auth0 Example&lt;/h3&gt;&#xA;    &lt;p&gt;Zero friction identity infrastructure, built for developers&lt;/p&gt;&#xA;    &lt;a class=&#34;btn btn-primary btn-lg btn-login btn-block&#34; href=&#34;/login/auth0&#34;&gt;Log In&lt;/a&gt;&#xA;&lt;/div&gt;&#xA;EOF&#xA;&#xA;cat &lt;&lt; EOF &gt;&gt; auth0login/templates/dashboard.html&#xA;&#xA;&lt;div class=&#34;logged-in-box auth0-box logged-in&#34;&gt;&#xA;    &lt;h1 id=&#34;logo&#34;&gt;&lt;img src=&#34;//cdn.auth0.com/samples/auth0_logo_final_blue_RGB.png&#34; /&gt;&lt;/h1&gt;&#xA;    &lt;img class=&#34;avatar&#34; src=&#34;{{ auth0User.extra_data.picture }}&#34;/&gt;&#xA;    &lt;h2&gt;Welcome {{ user.username }}&lt;/h2&gt;&#xA;    &lt;pre&gt;{{ userdata }}&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;EOF&#xA;&#xA;cat &lt;&lt; EOF &gt;&gt; auth0login/urls.py&#xA;from django.urls import path, include&#xA;from . import views&#xA;&#xA;urlpatterns = [&#xA;    path(&#39;&#39;, views.index),&#xA;    path(&#39;dashboard&#39;, views.dashboard),&#xA;    path(&#39;logout&#39;, views.logout),&#xA;    path(&#39;&#39;, include(&#39;django.contrib.auth.urls&#39;)),&#xA;    path(&#39;&#39;, include(&#39;social_django.urls&#39;)),&#xA;]&#xA;&#xA;EOF&#xA;&#xA;python manage.py makemigrations&#xA;python manage.py migrate&#xA;&#xA;```&#xA;## Conclusion&#xA;&#xA;Ok, so this was it, a quite big script but that&#39;s how automation can be. We were able to set up a Django base application with a ready app of Auth0 to extend the functionality. This was just a basic script also you can extend the functionalities like adding a curl command to fetch the credentials and make it more automated but that was not the aim of this article. &#xA;&#xA;If you had any issues using the script please let me know, I&#39;ll be happy to fix those. Thanks for reading. Happy Coding :)&#xA;</content>
      <type>posts</type>
    </item>
    <item>
      <title>Dev Quotes: A platform for developers to quote and get inspired - Auth0 x Hashnode Hackathon</title>
      <link>meetgor.com/devquotes-platform</link>
      <description></description>
      <pubDate>Fri, 27 Aug 2021 00:00:00 UTC</pubDate>
      <content>&#xA;## Introduction&#xA;&#xA;&gt; No one can understand the joy in finishing a personal project, except the dreamer &#xA;&#xA;It was a while,since I have posted an article here, as I was busy on a project or a hackathon.&#xA;&#xA;Hello, world! I am Meet a student and a self-taught web developer. I like to make and break stuff, especially when it comes to programming and Linux. I like shell scripting and learning different languages at once, love to learn about Vim and Linux everyday.&#xA;&#xA;Every time I start a project something else comes and distracts me let that be any other programming language or technology. That leads to creating new projects and leaving the one behind unfinished, I know most of the developers face this.  But this time, thanks to Auth0 X Hashnode Hackathon, I was able to create an almost finished project within almost 10 days. Having a deadline and competition creates a mindset to finish a project on time, that&#39;s my first takeaway from this Hackathon. OH! this is my first Hackathon by the way, and it has been amazing so far.  &#xA;&#xA;** Applying a framework to do something you desire and then everything working smoothly (after fixing 100s of bugs) is such a great feeling that no one can understand except for the person who just dreamt of it. **&#xA;&#xA;I&#39;ll like to share my project which is a web application for the Auth0 x Hashnode Hackathon. Here it goes.&#xA;&#xA;## What is Dev Quotes?&#xA;&#xA;Dev quotes is a web app designed for publishing and viewing quotes related to programming, developer mindset, and all the technicalities involved in a developer&#39;s life. It&#39;s basically a medium to express the life of developers and get inspired by others.  Here it is [devquotes](https://devquotess.herokuapp.com/)&#xA;&#xA;#### Dark Mode:&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1630074051548/TQz9Koh7l.png)&#xA;&#xA;#### Light Mode:&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1630078314355/VhfLrcjJa.png)&#xA;&#xA;&#xA;## Why Dev Quotes?&#xA;&gt; Developers are not the people who only understand how to write code but they&#39;re also the people who can make the code understandable&#xA;&#xA;As a developer, there are often times where you have no motivation left inside, but you never know you might be just a few lines of code away from making another project or fixing a bug. For that, we require some inspiration or a push to break the barrier of.  I am not saying it&#39;s just for developers, it&#39;s designed for developers but everyone is open to understanding the developers&#39; lives and their struggles. &#xA;&#xA;I also felt the need to give back some love-crafted web app to the ever-wonderful and supportive dev community. It&#39;s a small application but still, I would like to give in something instead of nothing at all. Start small grow big, hopefully :)&#xA;&#xA;## Features&#xA;&#xA;Some of the main features of the web application are as follows:&#xA;&#xA;- **Write�dit\Delete Quotes if logged in.**&#xA;&#xA;- **Like / Unlike a Quote.**&#xA;&#xA;- **See all of your quotes.**&#xA;&#xA;- **Randomized Quotes on Homepage.**&#xA;&#xA;- **Dark/Light theme based on Browser&#39;s Preference and local storage.**&#xA; &#xA;- **The app is mobile responsive as well, though the navbar is a bit wonky with the light/dark mode switch toggle, which can be taken care of soon.**&#xA;&#xA;&#xA;&#xA;![dqmob.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1630084573444/YEj38dUTD_.png)&#xA;&#xA;&#xA;&#xA;## In the making&#xA;&#xA;&gt; Have the curiosity to learn, rest is automated&#xA;&#xA;The project was made by using various inspirational articles and videos about making a web application. But the idea stuck in my mind when I was thinking about the people who don&#39;t get inspired as a developer. Like there is no way you can remain sad about being a developer and keep on dealing with imposter syndrome. Every developer has a perspective of programming but there is an infinite number of opportunities if you are curious enough. Just started making the project and got so much into it that I was literally dreaming about it like I saw parts of the webpage. In my dream and I am making it that was genuinely a thing that powered me to complete it. &#xA;&#xA;The project roughly started on 19th August and almost ended on 26th August, like the actual webpage and its core functionalities. Though on 27th were some styling and extra additions such as the About section and Footer. That was like the most productive week I ever had in my programming journey. That was fun as heck.&#xA;&#xA;## Tech Stack&#xA;&#xA;The Tech Stack involved with this app is :&#xA;- `Django`&#xA;- `PostgreSQL` &#xA;- `HTML/CSS/JS`&#xA;- ` Bootstrap`&#xA;&#xA; I have not used any front-end end frameworks just because I never found the need to learn them.  I had experience with Django for just 2 months and I am surprised I was able to make it. As obvious I have used Auth0 for authentication in my web application.&#xA;&#xA;### Auth0 integration for Authentication&#xA;&#xA;I must tell you using Auth0 was just flawless addition to my app as I have to do almost nothing, just drop some credentials of the Auth0 application with my Django project using a  [well-documented guide](https://auth0.com/docs/quickstarts)  for every type of framework. Simply straight-forward was the name for integrating authentication in my app.&#xA;&#xA;#### How I used Auth0 with Django&#xA;&#xA;I&#39;ve used Template tags such as if blocks to verify if the user is authenticated or not. &#xA;```html&#xA;&lt;div class=&#34;login-box auth0-box before&#34;&gt;&#xA;&#x9;&#x9;{{ &#34;{% if user.is_authenticated &#34;}} %}&#xA;&#x9;&#x9;    &lt;a class=&#34;btn btn-primary btn-sm tn-logout &#34; href=&#34;/logout&#34;&gt;Log Out&lt;/a&gt;&#xA;&#x9;&#x9;{{ &#34;{% else &#34;}} %}&#xA;&#x9;&#x9;    &lt;a class=&#34;btn btn-primary btn-sm tn-login &#34; href=&#34;/login/auth0&#34;&gt;Log In&lt;/a&gt;&#xA;    {{ &#34;{% endif &#34;}} %}&#xA;&lt;/div&gt;&#xA;```&#xA;&#xA;This was just readily available on their documentation though there were some adjustments as per the project requirements in this code to fit in the place.&#xA;&#xA;I must say, integrating Auth0 is even easier than using Django User Model in some sense as most of the stuff is handled by the Auth0, on our side, we simply have to create the Auth0 specific app with the credentials from the dashboard rest just works flawlessly till now. How sweet and &#xA; &#xA;### Specifications&#xA;&#xA;I won&#39;t go in-depth about the technicalities of the project but would like to address certain things. Firstly I have mostly used Class-based views for the major part, certain areas are still function-based just for the simplicity of the application and a few of them are handled and documented by Auth0 so just preferred that. &#xA;&#xA;Another thing is about Models, I just have a simple single model called `Quote` which has an Author as a Foreign Key from the Django User Model. I would have also created multiple emojis for the like system but I was too excited and in a rush to see the actual app, So just kept it simple. XD&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1630060555499/246ZKnypP.png) &#xA;&#xA;The rest of the stuff like `URLs`, `Templates`, and `static files` are handled in a neatly organized way as depicted in the below diagram.&#xA;&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1630060426600/JHMlrfOKZ.png)&#xA;&#xA;As it might not be clear from that, there are 3 apps -&gt; `auth0login`, `quotes`, and `user`, here `quotes` is kind of the most important app as it has the models, forms, URLs, and the views linked to them here. &#xA;&#xA;### Hosting&#xA;&#xA;Hosting as you can guess, it&#39;s on  [Heroku](https://www.heroku.com/) , quite beginner-friendly and feature-rich. I also have a free addon for PostgreSQL Database here.  It&#39;s limited to 10K rows but that&#39;s sufficient for a starter app like this in my opinion. Also, it has 500 free hours of dyno, which is also sufficient for a small low-traffic app like this.  &#xA;&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1630076036133/9ofxnM5VN.png)&#xA;&#xA;## Bugs Encountered &#xA;&gt; Love Bugs, they&#39;ll give you experience&#xA;&#xA;This is the most exciting and important part if you consider the hackathon because this determines the level of experience that a developer shoes in achieving certain things or features if you will. Faced some typical Django errors as usual but also some unexpected things like Dark mode and light mode clashing together due to poorly written media queries in CSS.&#xA;&#xA; As usual, the start is often hard, there is no motivation whatsoever in using the admin section to test the database queries and gibberish basic HTML page. In that process, I faced some primary key access issues and was able to understand the concept more clearly by fixing it.&#xA;&#xA;Another instance was with handling post requests in Django which I&#39;ve failed to do before. I used forms and a hybrid of CSS and bootstrap to style those forms which just works brilliantly. That took some time to figure out the exact working but after a while, it was working charms. &#xA;&#xA;&#xA;## Future Updates&#xA;&#xA;As said, I would like to add more like buttons expressing different emotions. Some other features to add are:&#xA;&#xA;- To add more emojis like claps, cheers, and others.&#xA;- To add a profile page in the app that would display all the quotes of the particular author and the details related to him/her.  &#xA;- Adding some tags to filter out particular types of quotes.&#xA;- Improve UI-UX a bit more to make it professional and pleasant.&#xA;&#xA;## Source Code&#xA;&#xA;&gt;Talk is cheap, show me the code - Linus Torvalds&#xA;&#xA;The source code is available at GitHub on this  [Link](https://github.com/Mr-Destructive/devquotes). &#xA;It&#39;s freely open for any contribution after the hackathon(mid-September).  Some of the files such as the environment variables, virtual environments, cached data are not uploaded for security and obvious reasons.&#xA;&#xA;Enough of technical talks, let&#39;s see the DEMO,&#xA;&#xA;&#xA;![dqss.gif](https://cdn.hashnode.com/res/hashnode/image/upload/v1630073466386/3wgnST5hc.gif)&#xA;&#xA;Silent claps.......&#xA;&#xA;It&#39;s not a great UI-UX but works and is not too shabby in my opinion considering it only has base HTML and CSS with a little Bootstrap and Javascript. But ya, a fully functional Backend that&#39;s what I was looking for a full-stack app with some decent features. Hope it helps some developers stay motivated and hack into some hackathons like this.&#xA;&#xA;### References used while creating the app:&#xA;- [Codemy -John Elder Django tutorial]( https://www.youtube.com/watch?v=B40bteAMM_M&amp;list=PLCC34OHNcOtr025c1kHSPrnP18YPB-NFi)&#xA;- [Django - Documentation for Forms](https://docs.djangoproject.com/en/3.2/topics/forms/)&#xA;- [Django template randomizer shuffle](https://stackoverflow.com/questions/28837511/django-template-how-to-randomize-order-when-populating-page-with-objects)&#xA;- [Auth0 app Django integration](https://www.youtube.com/watch?v=kzN_VCFG9NM)&#xA;&#xA;&#xA;## Closing Words&#xA;&#xA;&gt; Why developers find solutions to bugs at the stroke of sleeping, that&#39;s multithreading in our brains &#xA;&#xA;Hope you liked the project and hopefully will inspire developers to stay motivated and can focus on their goals more than dealing with imposter syndrome and whatnot. &#xA;&#xA;Thank you for reading and using the app, for any feedbacks, Twitter handles, comment section, GitHub issues, LinkedIn messages are all freely open. Thanks. Happy Coding :)&#xA;</content>
      <type>posts</type>
    </item>
    <item>
      <title>Django Quick Setup Script</title>
      <link>meetgor.com/django-setup-script</link>
      <description></description>
      <pubDate>Sun, 15 Aug 2021 00:00:00 UTC</pubDate>
      <content>&#xA;## Introduction&#xA;&#xA;Once you learn something very neatly and understand it very clearly, it feels like you are wasting time doing things over and over again. Same things in setting up a Django project, you feel like you could save those typing minutes by making a script. &#xA;&#xA;In this article, we will make a script a batch script for windows and a BASH script for Linux/macOS. We will make a virtual environment using python and then install the libraries and dependencies like in this case we will install Django. You can also tinker with these scripts and install other dependencies if you want like Django rest framework, crispy forms, markdown, Redis, etc. We will also make a Django project using the positional parameter passed before running the script from the command line. &#xA;&#xA;### Python development environment&#xA;This article assumes you have a python environment setup. If you don&#39;t you must install Python from the  [official website](https://www.python.org/downloads/)  as per your operating system. Also, you should have pip installed and configured correctly. You can install pip by following the  [official documentation](https://pip.pypa.io/en/stable/)  for the specific operating systems.&#xA;&#xA;## Steps in Django Project Setup &#xA;&#xA;So, If you are already familiar with the Django project setup, you can directly use the scripts provided in the next few sections. You can also visit  [this GitHub repository](https://github.com/Mr-Destructive/django-quick-setup-script)  if you have any issues and errors.  &#xA;&#xA;If you are new to django, let me first explain the process of django project setup. &#xA;- ### Initialize a VirtualEnvironment (Recommended but not necessary)&#xA;&#xA;Virtual Environment in Python is a great way of localizing the dependencies and frameworks only in the particular folder, it allows the developer to separate things out and keep them distinct, Additionally, when deploying or sharing the repository, the other developers can install the dependencies in the requirement.txt file in their local environment flawlessly. &#xA;&#xA;So, it is always recommended to use python virtualenv when working with python frameworks or libraries. We can set it up by simple pip install and then giving it a name.&#xA;&#xA;```&#xA;pip install virtualenv&#xA;``` &#xA;&#xA;This will install the package/tool using pip. &#xA;&#xA;After that has been properly installed, we can now give it an appropriate name &#xA;```&#xA;virtualenv mytest&#xA;```&#xA;&#xA;The `virtualenv` is the command and `mytest` can be any name, generally `env` or `venv` is preferred but it should be understandable to the user.  You will now be able to see the folder inside of your current directory named as `mytest` or the name you&#39;ve given to it. &#xA;&#xA;**Windows**&#xA;&#xA;Now if you are on windows, you can activate the virtual environment by using the command :&#xA;```&#xA;mytest\Scripts�ctivate&#xA;``` &#xA;here mytest is the name of your virtual env it can be anything as per your choice. This will now activate the virtualenv which will be shown by `(mytest)` before the command prompt. &#xA;&#xA;**Linux/macOS**&#xA;&#xA;For Linux or macOS, you can use the command: &#xA;```&#xA;source mytest/Scripts/activate.sh&#xA;```&#xA;In the above command, `mytest` can be anything that you have used while creating the virtualenv. This should activate the vrtualenv and will be indicated by `(mytest)` before the prompt in the terminal. &#xA;&#xA;&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1629023409389/kEe5AVAsr.png)&#xA;From the above image, we can see that we created and activated an virtualenv in python in a folder. &#xA;So, this is the walkthrough for setting up the virtualenv for a Django project, now we will move to install Django in this environment.&#xA;&#xA;- ### Installing Django using pip&#xA;&#xA;This is quite straightforward. You can use `pip install django` or `pip3 install django` or the normal way you install a library from pip. &#xA;&#xA;- ### Creating a Django project&#xA;&#xA;To create a django project, we use the django-admin command like:&#xA;```&#xA;django-admin startproject mywebsite&#xA;```&#xA;This will create a folder called `mywebsite` or your project name anything you like. Inside the `mywebsite` folder, you will have 2 things: `manage.py` file, and `mywebsite` folder . Yes there will be another `mywebsite` folder inside your project which will have the settings, URLs and other global(project-level) configuration files. The `manage.py` file is the most important file here. You should never touch/edit this file. We use this file to carry out all the operations from running the server to managing the database. &#xA;&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1629032998253/QQ5QXf4v5.png)&#xA;&#xA;### Setup script  for Windows&#xA;&#xA;The below is a batch file for Windows Operating System. Save the file in a `.bat` extension.&#xA;&lt;iframe&#xA;  src=&#34;https://carbon.now.sh/embed?bg=rgba%28171%2C+184%2C+195%2C+1%29&amp;t=cobalt&amp;wt=none&amp;l=application%2Fx-sh&amp;ds=true&amp;dsyoff=20px&amp;dsblur=68px&amp;wc=true&amp;wa=true&amp;pv=56px&amp;ph=56px&amp;ln=false&amp;fl=1&amp;fm=Hack&amp;fs=14px&amp;lh=133%25&amp;si=false&amp;es=2x&amp;wm=false&amp;code=mkdir%2520%25251%2520%250Acd%2520%25251%250Apip%2520install%2520virtualenv%250Avirtualenv%2520env%250Acall%2520env%255CScripts%255Cactivate%250A%250Apip%2520install%2520django%250Adjango-admin%2520startproject%2520%25251%2520.%250Acls%250A&#34;&#xA;  style=&#34;width: 803px; height: 366px; border:0; transform: scale(1); overflow:hidden;&#34;&#xA;  sandbox=&#34;allow-scripts allow-same-origin&#34;&gt;&#xA;&lt;/iframe&gt;&#xA;&#xA;Make sure the file is saved in a `.bat` file and be in the folder where you would like to create the Django project. After being in the appropriate location, enter the following command:&#xA;&#xA;```&#xA;commands.bat myproj&#xA;```&#xA;Here I assume that you have named the script file as `commands.bat`, you can name it anything you like, but I like to keep this a convention. After this you don&#39;t need to do anything, everything will be handled by the script. &#xA;You can run the server using &#xA;```&#xA;python manage.py runserver&#xA;```&#xA;This will have the base django project set up on your system. The below is the live demonstration of the script, I have deliberately removed the `cls` command to show the process. It won&#39;t break the script if you add this to it. &#xA;&#xA;![djqss.gif](https://cdn.hashnode.com/res/hashnode/image/upload/v1629024613612/Zsqa54_KD.gif)&#xA;&#xA;### Setup script  for Linux/macOS&#xA;&#xA;Copy the code from the below script and save it in a file preferably called `commands.sh`, you can name it anything you want but keep the `.sh` extension after it to identify it as a shell-script.&#xA;&#xA;After that file is saved locally, you can run the script by passing the positional parameter as the name of the Django project. The command will be like:&#xA;&#xA;```&#xA;bash commands.sh myproj&#xA;```&#xA; &#xA;&lt;iframe&#xA;  src=&#34;https://carbon.now.sh/embed?bg=rgba%28171%2C+184%2C+195%2C+1%29&amp;t=blackboard&amp;wt=none&amp;l=application%2Fx-sh&amp;ds=true&amp;dsyoff=20px&amp;dsblur=68px&amp;wc=true&amp;wa=true&amp;pv=56px&amp;ph=56px&amp;ln=false&amp;fl=1&amp;fm=Hack&amp;fs=14px&amp;lh=133%25&amp;si=false&amp;es=2x&amp;wm=false&amp;code=%2523%21%252Fusr%252Fbin%252Fenv%2520bash%250A%250Amkdir%2520%25241%250Acd%2520%25241%250Apip%2520install%2520virtualenv%250Avirtualenv%2520env%250Asource%2520env%255Cbin%255Cactivate%250A%250Apip%2520install%2520django%250Adjango-admin%2520startproject%2520%25241%2520.%250Aclear&#34;&#xA;  style=&#34;width: 803px; height: 384px; border:0; transform: scale(1); overflow:hidden;&#34;&#xA;  sandbox=&#34;allow-scripts allow-same-origin&#34;&gt;&#xA;&lt;/iframe&gt;&#xA;&#xA;From the output of the script, you will have created a Django project inside a virtual environment. We can manually activate the virtual environment. You can experiment it within your system as it can be a lot more customizable. This is just bare bone script to start a Django project but you can add your own things into it.&#xA;&#xA;## Conclusion&#xA;Thus, from this little article, you can get a bit lazier in initializing a bare-bone Django project. We were able to understand the structure of the Django project and how to set up a virtual environment powered by Python. &#xA;&#xA;After understanding those concepts we then moved on to making a script namely a batch file and a shell script to automate the initialization of the Django project. I hope it might have helped in some or another way, Thanks for reading till here. Happy Coding :)&#xA;</content>
      <type>posts</type>
    </item>
    <item>
      <title>Setting up Vim for Python</title>
      <link>meetgor.com/vim-for-python</link>
      <description></description>
      <pubDate>Sun, 06 Jun 2021 00:00:00 UTC</pubDate>
      <content>&#xA;## Introduction&#xA;Vim is quite a powerful text editor which can add performance to the already fast typed language Python. Vim can be highly customizable and efficient to use as it has the power of **adding custom plugins and plugins managers, key mappings**, and the most critical weapon of vim - Access to the terminal straight away.&#xA;This is not a full-featured guide of using vim for python, it&#39;s just a quick setup for using python on vim blazingly fast!!&#xA;&#xA;## Plugin Managers&#xA;So let us start making Vim, the text editor suitable for a python programmer. Firstly we&#39;ll need the vim plugin manager. There are different plugin managers out there, each of them has the same purpose to install, upgrade and manage the plugins for vim. You can install any one of them and get up and running.&#xA;&#xA;-  [Vim Plug](https://www.vim.org/scripts/script.php?script_id=4828) &#xA;-  [Vundle](https://github.com/VundleVim/Vundle.vim) &#xA;-  [Pathogen](https://github.com/tpope/vim-pathogen) &#xA;&#xA;These are some of the finest and well-supported plugin managers in vim. You can use any of these plugin managers, and get started by installing some plugins.&#xA;&#xA;## JEDI-VIM- Auto completion &#xA;Firstly I will like to install Jedi for code completion in Python. The plugin can be simple and straightforward to install using any of the above plugin managers. Jedi-Vim provides some neat and clean** syntax analytics and autocompletion for Python in Vim**. You&#39;ll find the docs and installation process here  [JEDI-VIM ](https://github.com/davidhalter/jedi-vim) &#xA;&#xA;## NERDTree-File manager&#xA;Next, It would be great if we install a file manager for managing the files and folders in the code directories. We can simply use the Nerdtree plugin for this. NerdTree is quite a **fantastic plugin for file management in Vim**. It simply makes Vim feel like VS Code. The installation and docs can be found here  [NERDTree](https://github.com/preservim/nerdtree).&#xA;&#xA;Nerdtree commands can be longer to write, for that let&#39;s start mapping and for that, we can start editing our Vimrc. &#xA;&#xA;```vim&#xA;set number&#xA;syntax enable&#xA;filetype indent on&#xA;set tabstop=4&#xA;set softtabstop=4&#xA;set autoindent &#xA;set encoding=utf-8&#xA;``` &#xA;This can be some addition to your existing vimrc as you might have a setup for plugin managers. You can choose the color scheme of your choice, don&#39;t waste time selecting the color scheme. Feel free and modify the vimrc according to your knowledge and choice. &#xA;&#xA;## Keymappings&#xA;We move on to the Key mappings for NERDTree and other features. You can make mappings generally in the normal mode but there might be cases where you need to use maps for visual mode or insert mode as well, that entirely depends on the user :)&#xA;&#xA;To map in normal mode, we&#39;ll its command to be specific:&#xA;&#xA;&#xA;```vim&#xA;nnoremap &lt;C-n&gt; :NERDTree&lt;CR&gt;&#xA;``` &#xA;&#xA;This will map CTRL+n to open the NERDTree file manager to the left, saving a bit of time and avoiding frustration. Feel free to add any keymap of your choice, this is just for demonstration. &#xA;You can further automate NERDTree for switching between tabs because it makes you type CTRL+w twice, you can reduce that to just typing w.&#xA;&#xA;```vim&#xA;nnoremap w:&lt;C-w&gt;&lt;C-w&gt;&#xA;``` &#xA;&#xA;## Integrated Terminal Macros&#xA;We can open a terminal window like a split between the editor. We can simply use the command :terminal to split the window horizontally, where the upper split will be terminal and the down window will have the editor. This is quite a neat feature of Vim in that it blends with the terminal so well so that we can switch between the terminal and the editor very quickly. For that, you can create a macro if you need to fire up a terminal again and again.&#xA;```vim&#xA;nnoremap &lt;C-t&gt; :terminal&lt;CR&gt;&#xA;```&#xA;If you place the above macro in your vimrc and then type Ctrl+t, the exact thing will happen to fire up a terminal split but with fewer keystrokes and without leaving the normal mode. &#xA;Also, the NERDTree macro can be also fruitful with this as it will make a full-blown IDE-like feeling inside of Vim.&#xA;![Demonstrate macros for NERDTree and terminal split](https://s6.gifyu.com/images/screenrecording.gif)&#xA;&#xA;## Running the Code with a snap&#xA;&#xA;We can automate the process of running python scripts inside of vim. Instead of typing out the entire command for executing python script from vim. We can use keymaps for it as they can significantly boost the time required to run and debug the code. &#xA;&#xA;&#xA;```vim&#xA;nnoremap py :!python %&#xA;``` &#xA;&#xA;This is a small map but can save a lot of time and give some motivation to use vim as you run the code blazingly faster than other editors. I have used py, but it can cause some problems as p is already mapped for pasting. So it&#39;s better to use other key combinations such as ty, yh, or any other key combination of your choice. Try it out and add your own flavor that&#39;s how we all learn.&#xA;&#xA;So, that&#39;s the basic set-up for python on vim, you can make more custom mappings, find more plugins and test out which work out the best for your workflow. Happy Coding and Viming ;) &#xA;</content>
      <type>posts</type>
    </item>
  </channel>
</rss>