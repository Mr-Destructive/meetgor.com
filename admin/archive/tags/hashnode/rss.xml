<rss version="2.0">
  <channel>
    <title>Meet Gor - Tag: hashnode</title>
    <link>meetgor.com</link>
    <description>Posts tagged with hashnode</description>
    <language>en-us</language>
    <pubDate>Fri, 17 Oct 2025 16:57:38 UTC</pubDate>
    <item>
      <title>2022: Year Review</title>
      <link>meetgor.com/2022-review</link>
      <description>Dev Retro for 2022, the year that changed me from a shy to a confident developer. Grabbed opportunities for internships and made the most of them. Learned a ton of stuff.</description>
      <pubDate>Sat, 31 Dec 2022 00:00:00 UTC</pubDate>
      <content>&#xA;## Introduction&#xA;&#xA;Well, what a year! If 2021 was a start, 2022 was a year to convert a start into a goal. From collaborating on open-source projects to getting an internship, it was an exciting year! Created a couple dozen of projects(not finished as usual), wrote 40+ articles, did a couple of streams, learned the basics of golang, and spend 6 months as a backend dev intern at [Solarlabs](https://thesolarlabs.com/), just a year that was awaited for the hard work over the span of 2 years.&#xA;&#xA;This was a year, where I did things that were above my expectations, did an internship with college side by side for 6 months, started to stream on twitch(2 streams :),&#xA;&#xA;Some technical things I did and learnt in 2022:&#xA;&#xA;* Markata and blog revamp&#xA;    &#xA;* Learnt Docker&#xA;    &#xA;* Django Rest Framework Project and Django Basics completed 4 articles&#xA;    &#xA;* Podevcast(hashnode/netlify hackathon)&#xA;    &#xA;* Web App from scratch - django collaboration with mark gibney&#xA;    &#xA;* Daily.dev hackathon - bookmark CLI runner up&#xA;    &#xA;* 100 days of golang init 13 articles in April&#xA;    &#xA;* Django deployment (Heroku, railway, nixpacks) articles&#xA;    &#xA;* Switched from Windows 7 to Ubuntu&#xA;    &#xA;* Bought meetgor.com and started applying for an internship&#xA;    &#xA;* Ding 3 rounds of interviews got in at SolarLabs!&#xA;    &#xA;* Learned Flask, pytests, drf, in the process of internship assignments at other companies&#xA;    &#xA;* Switched to Lua config in Neovim with LSP&#xA;    &#xA;* Created lots of projects(vacation) dj-notes, aptui, rattlesnake, django mermaid&#xA;    &#xA;* HTMX with django, golang learning with Graphql, and REST API&#xA;    &#xA;* Picking up with neovim plugins for django, markrunner, black snipper&#xA;    &#xA;* deepgram and steampipe contribution at hacktoberfest&#xA;    &#xA;* Djankata, pykyll and some other contributions to golang&#xA;    &#xA;* Revamped APTUI with textual 2.0&#xA;    &#xA;* Devjournal with pykyll (bare bones ssg in python)&#xA;    &#xA;* All in all, golang and python deep dives this year with tons of projects and django huge learning experience at the internship.&#xA;    &#xA;&#xA;## How did it start?&#xA;&#xA;The start was exciting and full of expectations due to a great start in 2021. I wrote around 80 articles starting almost halfway through the year. Also started to learn Django and shell scripting. With that knowledge, I created dozens of projects like web apps for silly games, portfolios, newsletters, and shell scripts for web scrapping and framework setups. I kept on with the pace and wrote articles and made projects.&#xA;&#xA;I got a collaboration on an awesome open-source project \[web-app-from-scratch\]([https://github.com/no-gravity/web\_app\_from\_scratch](https://github.com/no-gravity/web_app_from_scratch)) for a docker image for setting up Django from scratch. That was a great learning experience as I didn&#39;t know docker and in February 2022 was using Windows 7 back then, bad old days. I researched and got docker up and running on a cloud instance and learned the basics of docker.&#xA;&#xA;## Switch from Windows to Linux&#xA;&#xA;In May came a turning point for good, had to forcefully switch to Linux! I was under a ransomware attack due to the security vulnerability of windows 7 and had messed up all the files on the system. I had to completely wipe out the system and installed fresh ubuntu 22.04 on 14th May. Things changed and I was happy than ever to use my system. Thanks to that virus(xcvf ransomware virus) and natural instincts.&#xA;&#xA;I loved to code in the terminal, I have been using termux in lockdown which is a Linux-like terminal emulator for android. I learned the basics of bash and Linux commands with that and it was becoming my second nature to use Linux commands, so using windows was really frustrating. The incident happened at a good time and was able to switch from windows 7 to ubuntu.&#xA;&#xA;Setup Vim, tmux, and custom aliases was a great productive environment for me compared to windows. It changed the speed and mindset of my programming world.&#xA;&#xA;## Started learning golang&#xA;&#xA;I started to learn golang at the end of March and created a [100-day golang series](https://www.meetgor.com/series/100-days-of-golang/) on April 1st. It was not consecutive days you know, so it still looms around 25 days. It looks a lot less than I expected. Still, I feel really confident in writing golang, so much so that I decided to do the advent of code in golang this year.&#xA;&#xA;I completed around 13 articles in the month of April and then due to end-semester things getting in the way, was not able to keep a consecutive streak. Still, each week, I tried to write an article. And I have just 25 articles till now. It does not mean I did not learn golang, without writing any articles, I have a couple of projects on golang for creating bare-bones REST APIs and also a bit of GraphQL with DB connections. I haven&#39;t got a good amount of time to write detailed articles about them in a while, so maybe January is the time. I would like to complete 100 articles in the first quarter of 2023 that&#39;s the plan or at least the basics of web development with golang(backend of course).&#xA;&#xA;It was a fantastic learning experience by creating examples, and snippets and playing with some low-level stuff in the language.&#xA;&#xA;## Applied for internships&#xA;&#xA;At the end of May, that is when my exams were ending, I started to apply for internships targeting a backend(Django stack) for maybe 3-6 months. And it was a sad time in the first few weeks. I got a few offers talking but ended in rejection as I was not able to work full-time :( That hurts after doing some assignments and an interview.&#xA;&#xA;## TheSolarLabs Internship&#xA;&#xA;It all went on for 3 weeks, until the morning on 27 June, I read the application as &#34;Rejected&#34; to [SolarLabs](https://thesolarlabs.com/). Anyone would have lost hope there, and so did I. And to anyone&#39;s surprise or credit for their blunder, I got a call from them for scheduling an interview! I am not making this up, the portal still says &#34;rejected&#34; and in the chats, it asks for a resume! Some nervous times.&#xA;&#xA;After 3 days of interviews, I finally got the offer letter of confirmation. For 6 months and a good bit of stipend. It was my preferred Django stack, with some unknown grounds of the Django rest framework. I realized rather quickly in the first interview itself, I need to get some DRF stuff up! There was a lot of stuff to learn that I didn&#39;t know existed, I was baffled by how great was DRF then. That&#39;s the first bit of learning from the interview itself, it showed, how much there is to learn.&#xA;&#xA;Soon after the onboarding process and getting a bit familiar with the designing product, I was presented with the code repository and time to get familiarity and set up the system (python3.7, postman, editor, etc). There came the first task soon in the following week. it looked doable and indeed just a matter of time to get familiarity with the problem statement. it was a task for fetching some data from weather API and store in a specific format.&#xA;&#xA;As the days passed, I was introduced to the tech scrum, like a daily update for the tas done yesterday and todo today. It was really new to me, I have never heard of such systems but realized it might be a development process. Soon college started and it was a mess thereafter. had to balance college attendance and attend scrum with clashing times sometimes. But to date got off with the semesters.&#xA;&#xA;### Key takeaways from the internship&#xA;&#xA;I don&#39;t want to get into all the details of the internship tasks but here&#39;s a summary of what I learned in a gist.&#xA;&#xA;* Django Rest Framework viewsets, routers, and actions&#xA;    &#xA;* Django Signals, Admin section, API designs in a better way&#xA;    &#xA;* Azure (some specific things like function deployment, config, sas tokens, pipelines, python SDK, etc.)&#xA;    &#xA;* SQL ( got some good practice on joins and nested queries)&#xA;    &#xA;* ERP technology(erpnext and python setup)&#xA;    &#xA;* JWT tokens set up in Django&#xA;    &#xA;* Process for designing API from scratch for a given feature&#xA;    &#xA;* Cashfree and Stripe integration in Django&#xA;    &#xA;* Dockerfile and buildkit specific features&#xA;    &#xA;&#xA;## Learning Constantly&#xA;&#xA;Currently in a hope of continuing the internship as I have thoroughly enjoyed working here and it has been a great learning experience. But one thing was really important this year again, to not stop learning and building. Don&#39;t mind if the idea is small or useless, just building the project and overcoming the entry barrier for learning the technology has been the quote for everything in my developer journey.&#xA;&#xA;&gt; When your mind feels lost, letting it free and driving new places strikes a inspriation for another take off, don&#39;t run, enjoy the walk, it&#39;s a marathon not a sprint.&#xA;&#xA;Building projects which are useless or not making sense to anybody might be a different thing but what it means to yourself matters the most. There might be instances where you might be failing, not having any ideas, burnout, imposter syndrome, and some other fuzzy words in tech. These situations are meant to improve you in one or the other way, If you run out of ideas, just take a break, look at your personal state and hobbies besides programming and get some inspiration from other fields and apply them in the programming world were some lessons I learned in some rough times during the year.&#xA;&#xA;There will be or rather should be times when you feel down or lose inspiration, these times drive the minds in different directions as programming can be a bit draining and one can quickly lose motivation if there are no results straight away.&#xA;&#xA;&gt; Hard work takes time to turn into results, patience and actions are the key.&#xA;&#xA;I had a hobby for writing, I had written a novel(maybe not a novel it&#39;s not that big) when I was in 8th grade, and had a ton of ideas for stories but was stuck with the hypothetical thing called the perfection of time, plot, and ideas. I watched a youtube video about writing and it just fascinated me to write again, and it began. I started to write my novel which is handwritten into an ebook. I was consistent for a few days but things got wild and were moved away from it. The new year will be the perfect free time to go for it and at least have one fiction novel to my name.&#xA;&#xA;I am also reading fantasy novels, I have read Elantris and am in mid of reading Mistborn. I have been enjoying reading and writing as a programmer, but want to get into fantasy as well. It is so exciting and fascinating as a human to fly with creativity. I am grateful to have eyes and a healthy mind to read and see the beauty of the world.&#xA;&#xA;## Hits and Misses in 2022&#xA;&#xA;There were a few pullbacks in 2022 for me, if there are good times, one must be prepared for bad ones it seemed. The worst thing about bad times is that you sometimes don&#39;t realize that you are in one. I had almost the same count of articles compared to the previous year comparing a whole year to half the year(I started blogging in June 2022).&#xA;&#xA;* Unable to write out words&#xA;    &#xA;* Feeling exhausted and anxious sometimes&#xA;    &#xA;* Not able to communicate properly with mentors&#xA;    &#xA;* Sometimes, college and working on internship tasks clash badly&#xA;    &#xA;* addicted to solving a problem and can&#39;t focus on other things(maybe a good thing sometimes)&#xA;    &#xA;&#xA;## Tech list for 2023&#xA;&#xA;* Golang deep dive with projects and open-source contributions&#xA;    &#xA;* Machine Learning (Tensorflow python and Keras)&#xA;    &#xA;* Kafka&#xA;    &#xA;* Kubernetes and Microservices&#xA;    &#xA;* AoC with Rust&#xA;    &#xA;&#xA;So, these are some of the technologies I will try to learn in 2023. I have a basic knowledge of golang, but I will like to get into the specific things golang is used for like concurrency and channels. I have been wanting to learn machine learning with projects, and this year I am serious about it, I have a couple of ideas for web apps with ML, and will try to get it up and rolling.&#xA;&#xA;Some specific technologies I want to learn to include Kafka for data pipelines and streams. Some deployment tools like Kubernetes but before that, I will be learning a bit more about docker networking.&#xA;&#xA;This year I did AoC with golang, to complete all 25 days, but did around 12 days. Still will be trying to solve this over the month. Next year, I will be trying AoC in Rust. I love low-level programming languages, go is great but rust is extreme.&#xA;&#xA;## Conclusion&#xA;&#xA;So, that&#39;s a wrap for 2022. A great year for learning a lot of stuff. Hopefully, the next year will be a better one. More collaboration and more opportunities. I am grateful to so many people who came into my life and have played important roles for me to develop into a backend developer and even a human. My mentors and colleagues, real-life and Twitter friends, and GitHub collaborators. I would have not reached here if I would have not met any one of them. Thank you. May you too have a great year and life ahead full of opportunities and success.&#xA;&#xA;Happy New Year, Happy Coding :)&#xA;</content>
      <type>posts</type>
    </item>
    <item>
      <title>Podevcast: A single source for developer podcasts</title>
      <link>meetgor.com/podevcast-project</link>
      <description></description>
      <pubDate>Fri, 18 Feb 2022 00:00:00 UTC</pubDate>
      <content>&#xA;## Introduction&#xA;&#xA;Hello Developers! Want to listen to programming podcasts from a single place? Podevcast is the place you should be searching for. &#xA;&#xA;I am Meet Gor and I present this project as a submission to the Netlify x Hashnode Hackathon. Podevcast is a webpage(static) for listening to podcasts centered around developers and programming. Just pick your favorite one and start listening straight away. Let&#39;s dive into the making of Podevcast. Head on to https://podevcast.netlify.app/ to check out the live app.&#xA;&#xA;## What is Podevcast&#xA;&#xA;Podevcast is a web application or a static site that renders the top programming/development podcasts. You can listen to the top podcasts around the developer community from a single source. &#xA;&#xA;&gt; Listen to your favorite developer podcasts with Podevcast&#xA;&#xA;Podevcast is a static site generated using a script. There is a static site generator that is heavily done in Python and deployed to Netlify. You can simply listen to the podcasts on the web page or go to the canonical page of the podcast episode. From the canonical page, you can choose to hop to your chosen music player, but the default music player should be fine for casual listening. The core idea is to keep things in a single place for developer podcasts.&#xA;&#xA;[Podevcast](https://podevcast.netlify.app/)&#xA;&#xA;[Source Code](https://github.com/Mr-Destructive/podevcast)&#xA;&#xA;## Preview&#xA;&#xA;Podevcast has popular developer podcasts like `Command Line Heroes`, `The Python Podcast`, `The freeCodeCamp Podcast`, and many others to choose from. You can go into categories for looking at a specific podcast. &#xA;&#xA;### Application Demonstration&#xA;&#xA;Here&#39;s a small demonstration of the Podevcast application.&#xA;&#xA;![Podevcast Preview gif](https://cdn.hashnode.com/res/hashnode/image/upload/v1645200224921/GC8gmxUzX.gif)&#xA;&#xA;Podevcast has multiple pages like:&#xA;&#xA;1. [Home page](https://podevcast.netlify.app/)&#xA;2. [Podcast page](https://podevcast.netlify.app/list)&#xA;3. [Episode page](https://podevcast.netlify.app/the_real_python_podcast/ep/1/)&#xA;4. [Podcast List page](https://podevcast.netlify.app/command_line_heroes/)&#xA;5. [Categories page](https://podevcast.netlify.app/category/)&#xA;&#xA;The Home page has the latest episode of all the podcasts. It also has an audio player to play on the go.&#xA;&#xA;![Podevcast home page](https://res.cloudinary.com/techstructive-blog/image/upload/v1645113477/blog-media/iafi8nthhj0vvvrcbhka.png)&#xA;&#xA;The Podcast List page has the list of all the Podcasts available in the project. It has the name of the podcast with the link to the podcast page that has the list of all the episodes of that podcast.&#xA;&#xA;![Podevcast Podcast list](https://res.cloudinary.com/techstructive-blog/image/upload/v1645113598/blog-media/cnprgufs3lrouvgdl8jn.png)&#xA;&#xA;The categories page has a list of categories of the podcasts like Web-development, backend, frontend, data science, DevOps, and so on. More categories will be added soon.&#xA;&#xA;![Podevcast Categories](https://res.cloudinary.com/techstructive-blog/image/upload/v1645113626/blog-media/uloq4xi1d4zfo8sfl7bm.png)&#xA;&#xA;The Episode page has the audio player, the summary of the episode, canonical episode, and podcast page. &#xA;&#xA;![Podevcast Episode page](https://res.cloudinary.com/techstructive-blog/image/upload/v1645113654/blog-media/omqks44p8b3u7jclkhgz.png)&#xA;&#xA;## Why Podevcast?&#xA;&#xA;Listening to music is one thing and listening to podcasts is different. I wanted a place from where developers can listen to developer-specific podcasts from a single source not just give out the article **&#34;Top 10 podcast you should be listening to as a developer&#34;**. Having played around with python and some libraries like feedparser and jinga previously I saw this Hackathon as an opportunity to convert the idea into a project. It fits the JAMStack area well from the Hackathon and project perspective.  &#xA;&#xA;## Tech Stack&#xA;&#xA;- Python&#xA;  - [feedparser](https://pypi.org/project/feedparser/)&#xA;  - [jinga2](https://pypi.org/project/Jinja2/)&#xA;- GitHub Actions&#xA;- HTML / CSS&#xA;&#xA;The data is extracted from various RSS Feeds using the feedparser library in Python. &#xA;&#xA;Using GitHub Actions, the feed is refreshed every 24 hours to fetch the latest episodes from the respective podcast feeds. Basically, the GitHub action triggers a Netlify deployment that in turn generates the static site by running the script.&#xA;&#xA;The command for running the script on Netlify and generating the `Podevcast` webpage is :&#xA;&#xA;```&#xA;pip install -r rquirements.txt &amp;&amp; python script.py&#xA;```&#xA;&#xA;And the directory for deployed web pages (published directory) is `site` which contains all the `HTML` files that can be rendered as the website itself. &#xA;&#xA;### Source Code&#xA;&#xA;The project is available on [GitHub](https://github.com/Mr-Destructive/podevcast). Feel free to open a PR to add a Podcast or a Category. The project only has a few python files, the main script is `script.py` which actually creates the home and the podcast list pages along with the episode pages. The `src` folder contains some extra bits of scripts like creating the categories and category podcast list pages. Also, it has certain config files like `runtime.txt`, `requirements.txt`, and so on. Finally, there is the `podlist.json` for the list of podcasts and `categorylist.json` for the categories of podcasts. &#xA;&#xA;### Core Script Snippet &#xA;&#xA;The python script looks a lot bigger than the below snippet but it is doing the same process multiple times for different pages. There is also some type checking and tiny details that are added as per the requirement of the templates. &#xA;&#xA;```python&#xA;import feedparser&#xA;from jinja2 import Environment, FileSystemLoader&#xA;from pathlib import Path&#xA;&#xA;template_env = Environment(loader=FileSystemLoader(searchpath=&#39;./layouts/&#39;))&#xA;index_template = template_env.get_template(&#39;index.html&#39;)&#xA;episode_template = template_env.get_template(&#39;episode.html&#39;)&#xA;&#xA;feed = feedparser.parse(&#34;https://freecodecamp.libsyn.com/rss&#34;)&#xA;&#xA;pod_name = feed[&#39;feed&#39;][&#39;title&#39;]&#xA;&#xA;for i in range(0, len(feed[&#39;entries&#39;]):&#xA;    &#xA;    ep_title = feed[&#39;entries&#39;][i][&#39;title&#39;]&#xA;    audio = feed[&#39;entries&#39;][i][&#39;links&#39;][1][&#39;href&#39;]&#xA;    cover_image = feed[&#39;entries&#39;][i][&#39;image&#39;][&#39;href&#39;]&#xA;    og_link = feed[&#39;entries&#39;][i][&#39;links&#39;][0][&#39;href&#39;]&#xA;&#xA;    episode_obj = {}&#xA;    episode_obj[&#39;title&#39;] = ep_title&#xA;    episode_obj[&#39;audiolink&#39;] = audio&#xA;    episode_obj[&#39;cover&#39;] = cover_image&#xA;    episode_obj[&#39;link&#39;] = og_link&#xA;&#xA;    with open(os.path.join(f&#34;site/{pod_name}/ep/{i}/index.html&#34;), &#39;w&#39;, encoding=&#39;utf-8&#39;) as ep_file:&#xA;         ep_file.write(&#xA;            episode_template.render(&#xA;            episode = episode_obj&#xA;            )&#xA;         )&#xA;```&#xA;&#xA;   Above is a simple snippet of the core functionality of the script. It basically takes the RSS Feed `URL` of the podcast and using `feedparser` the data is retrieved in the form of a dictionary in Python. &#xA;&#xA;   - Iterate over the `feed[&#39;entries&#39;]` which is a list of lengths same as the number of episodes of that podcast, we then assign a set of values like `episode title`, `audio link`, `cover image`, `canonical link for the episode`, `date` and so on. &#xA;   - Create a dictionary and store the key value as the mentioned data to access from the template. &#xA;   - Open a file in the structured file format and then parse the `episode_obj` which is a dictionary to the episode template. &#xA;   - Access the dictionary using jinga2 templating tags. &#xA;&#xA;```html&#xA;&lt;html&gt;&#xA;    &lt;head&gt;&#xA;        &lt;title&gt;Podevcast&lt;/title&gt;&#xA;    &lt;/head&gt;&#xA;    &lt;body&gt;&#xA;        &lt;h3 class=&#34;ep-title&#34;&gt;{{ episode.title }}&lt;/h3&gt;&#xA;        &lt;img src=&#34;{{ episode.cover }}&#34;&gt;&#xA;        &lt;a class=&#34;ep-link&#34; href=&#34;{{ episode.link }}&#34;&gt;Episode &lt;/a&gt; &#xA;        &lt;audio controls=&#34;enabled&#34; preload=&#34;none&#34;&gt;&#xA;            &lt;source src=&#34;{{ episode.audiolink }}&#34; type=&#34;audio/mpeg&#34;&gt;&#xA;        &lt;/audio&gt;   &#xA;    &lt;/body&gt;&#xA;&lt;/html&gt;&#xA;```&#xA;We can use `{{  }}` to access any value parsed to the template via the script. Also, we can make use of `{% %}` to run loops, conditionals, blocks, and other tags in the template. &#xA;&#xA;![Feedparser Illustration](https://res.cloudinary.com/dgpxbrwoz/image/upload/v1645110268/blogmedia/uwdzcwn07oxhppiptem9.png)&#xA;&#xA;So, we can see the feed is basically a dictionary that has a key-value pair and further, it can be a nested dictionary or a list as a value of a key. As in the case of `feed[&#39;entries&#39;]` is a list with the length of the number of episodes of a podcast. And in the script, we use various keys to access various components, obviously, this requires a bit of exploration of the dictionary initially but it becomes easy thereafter to automate using Python. &#xA;&#xA;### Episode List&#xA;&#xA;Currently, the episodes are added using the JSON file. It is not that user-friendly but still not a big task to simply add a link in a file. This is a #TODO that will require some external tooling to integrate into the webpage to ask for a form to submit a new Podcast. &#xA;&#xA;```json&#xA;{&#xA;    &#34;Command Line Heroes&#34;: &#34;https://feeds.pacific-content.com/commandlineheroes&#34;,&#xA;    &#34;Python Podcast__init__&#34;: &#34;https://www.pythonpodcast.com/feed/mp3/&#34;,&#xA;    &#34;Real Python Podcast&#34;: &#34;https://realpython.com/podcasts/rpp/feed&#34;,&#xA;    &#34;The freeCodeCamp Podcast&#34;: &#34;https://freecodecamp.libsyn.com/rss&#34;,&#xA;    &#34;CodeNewbie&#34;: &#34;http://feeds.codenewbie.org/cnpodcast.xml&#34;,&#xA;    &#34;Linux For Everyone&#34;: &#34;https://feeds.fireside.fm/linuxforeveryone/rss&#34;,&#xA;    &#34;JavaScript Jabber&#34; : &#34;https://feeds.fireside.fm/javascriptjabber/rss&#34;&#xA;}&#xA;```&#xA;&#xA;The process requires a manual test to validate a given RSS Feed as not all feeds are generated the same way and thus there are a few exceptions that need to be sorted out manually. For example, the Python Podcast doesn&#39;t have a cover image parsed into the RSS Feed, so there needs to be a check for it in the script and also in the template to restrict parsing and displaying the cover image link. &#xA;&#xA;### Episode Categories&#xA;&#xA;This is also a JSON file that holds the keys as the category and the value as a list of episode names (strictly the name from `feed[&#39;feed&#39;][&#39;title&#39;]`). There needs to be a human decision to be taken to add the podcast into a specific category. &#xA;&#xA;```json&#xA;{&#xA;   &#34;Python&#34;:[&#xA;      &#34;Talk Python To Me&#34;,&#xA;      &#34;The Python Podcast.__init__&#34;,&#xA;      &#34;The Real Python Podcast&#34;,&#xA;      &#34;Python Bytes&#34;&#xA;   ],&#xA;   &#34;Javascript&#34;:[&#xA;      &#34;Full Stack Radio&#34;,&#xA;      &#34;JavaScript Jabber&#34;&#xA;   ],&#xA;   &#34;Linux&#34;:[&#xA;      &#34;Command Line Heroes&#34;,&#xA;      &#34;LINUX Unplugged&#34;,&#xA;      &#34;The Linux Cast&#34;,&#xA;      &#34;Linux For Everyone&#34;&#xA;   ],&#xA;   &#34;Data Science&#34;:[&#xA;      &#34;DataFramed&#34;,&#xA;      &#34;Data Skeptic&#34;,&#xA;      &#34;The Banana Data Podcast&#34;&#xA;   ],&#xA;   &#34;Dev Ops&#34;:[&#xA;      &#34;DevOps Cafe Podcast&#34;,&#xA;      &#34;Arrested DevOps&#34;,&#xA;      &#34;Pulling the Strings&#34;,&#xA;      &#34;Azure DevOps Podcast&#34;,&#xA;      &#34;DevOps and Docker Talk&#34;&#xA;   ]&#xA;}&#xA;```&#xA;&#xA;   Though the JSON file is managed manually the generation of the categories is automated. Please feel to add other categories of your choice. &#xA;&#xA;## What&#39;s Coming?&#xA;&#xA;Certain features like adding podcast using a form, adding more podcasts, and categories for sure. Though what looks a bit cloudy in my opinion is adding accessibility links to music players because the RSS feed doesn&#39;t contain direct links to them. Though I still to explore and find out if it can be obtained from the feed itself. &#xA;&#xA;- Search box for searching podcasts&#xA;- Accessible Links to other platforms (Spotify, Itunes, etc)&#xA;- More depth in categories (Languages/Frameworks/Niche-specific podcasts)&#xA;&#xA;I&#39;ll add these features after checking the feasibility of the ideas and the response from the community after releasing them.&#xA;&#xA;## Final Words&#xA;&#xA;This project wouldn&#39;t have existed without this Hackathon as it gives a deadline to finish and hope to win something. Specially thanks to Hashnode and Netlify for organizing such a great opportunity in the form of a hackathon. Also, the maintainers of Python libraries like feedparser and jinja. The project would have been impossible without them. &#xA;&#xA;If you like the project please give it a star on [GitHub](https://github.com/Mr-Destructive/podevcast). Have any feedback? Please let me know in the comments or on [Twitter](https://twitter.com/MeetGor21).  Thank you for reading, Hope you have a good time using Podevcast. Happy Coding :)&#xA;</content>
      <type>posts</type>
    </item>
    <item>
      <title>What is Machine Learning?</title>
      <link>meetgor.com/ml-intro</link>
      <description></description>
      <pubDate>Wed, 29 Sep 2021 00:00:00 UTC</pubDate>
      <content>&#xA;## Introduction&#xA;&#xA;We all hear about terms like `Machine Learning`, `Artificial Intelligence`, and others, but what do they actually mean and why do you need to care about these as a developer. This won&#39;t be a perfect guide in terms of experience but surely enough to get anyone through the basics of Machine Learning.&#xA;&#xA;This is not the kind of article I write but, having such challenges can help me become a better technical writer, this is the challenge put forward in the Hashnode Bootcamp 4 to get out of my comfort zone. Here&#39;s my take on what I know about Machine Learning till now (P.S. Half of the stuff I discovered and re-learned during writing).&#xA;&#xA;## What is Machine Learning?&#xA;&#xA;Machine Learning is a technique in software development to predict and react to the inputs without being explicitly programmed or written. We can use the if-else condition till a point in time, after seeing real-world examples like customer service, driving, playing games(chess, checkers, etc), image prediction, and so on. You can&#39;t write code for every single case of these applications, So that is where we see Artificial Intelligence.&#xA;&#xA;&gt; Artificial Intelligence is a process of simulating human-like behavior into computers /robots/ electronic systems.&#xA;&#xA;These are two quite similar terms(A.I., M.L.) but they have their own differences. Let&#39;s look at those differences:&#xA;&#xA;- **Artificial Intelligence is a technology that enables computer systems to act and decide like humans.**&#xA;&#xA;-  **Machine Learning is a process of extracting data and learning from the past experience or outcomes from that data.**&#xA;&#xA;Machine learning is actually a subset of AI. Machine learning actually is about training the computer system about an outcome using the data feed into it. We will actually look at the detailed process about it in the next few sections. &#xA;&#xA;## The Process of Machine Learning&#xA;&#xA;The first step should be to choose an idea or a goal that you would like to make the system predict or output the results.&#xA;&#xA;1. Data Gathering&#xA;2. Filtering Data&#xA;3. Selecting an Algorithm &#xA;4. Training the system&#xA;5. Verifying and Evaluation of Training&#xA;6. Improving and Deploying the Model&#xA;&#xA;Let&#39;s take the example of classifying a picture as either dog or cat.&#xA;&#xA;![Images.gif](https://cdn.hashnode.com/res/hashnode/image/upload/v1632902918426/AoHlrL13z.gif)&#xA;&#xA;### 1. Data Gathering&#xA;&#xA;We can now move on to collecting the medium of data that will be used by our system to get the desired outcome, it might be to predict something, classify certain things, take decisions, etc.&#xA;&#xA;In our example, as we want to classify an image into either a dog or a cat is classifying things from the given data set. For that, we will require images that depict this constraint.  We can use our personal data, public data and from other sources, you would like to get your hands on.&#xA;&#xA;These are some of the popular places to get data publicly:&#xA;   - [Kaggle](https://www.kaggle.com/)&#xA;   - [Google Data Search](https://datasetsearch.research.google.com/)&#xA;   - [Reddit Datasets](https://www.reddit.com/r/datasets/top/?sort=top&amp;t=all)&#xA;   - [Public Datasets on GitHub](https://github.com/awesomedata/awesome-public-datasets#machinelearning)&#xA;   - [AWS Registry of Open Data](https://registry.opendata.aws/)&#xA;&#xA;### 2. Filtering Data&#xA;&#xA;After you have collected the data from some sources, you will notice that it is not perfect as per your needs. And to be honest, there is no dataset that is perfect for your requirements, because otherwise there will be a ton of data to work with, it might be inefficient for humans to create and sort out from that data. So we may have to do it manually or take help from a data scientist. &#xA;&#xA;But if you are just learning, it will be helpful for you to filter and clean the data yourself. There will be things in the data sets missing or there will be unwanted things in it. This is a critical step that everyone tends to ignore but at the end of the day,  spend about 80% of the time unknowingly. This is quite an important step as it decides the efficiency of the model you will have made. &#xA;&#xA;- Remove/Fill in the rows which are empty.&#xA;- Remove the columns which are not related to your objective.&#xA;- Fix certain wrong or inconsistent data.&#xA;&#xA;#### Group data as Training and Testing &#xA;After the procedure has been applied, you can now separate the data set as Training and Testing Data. You have to create two datasets from one, the prior for training and the latter for testing the model system after evaluating the tests.&#xA;&#xA;For our example, we have to separate the images which will be relatively easier to distinguish in the training data, and the tough ones for the testing data as it will challenge the model appropriately. &#xA;&#xA;### 3. Selecting an Algorithm &#xA;&#xA;Now, this is again an important step as it will make your project&#39;s backbone. This will be the algorithm that will identify, predict or decide on the outcomes from the data given to it.&#xA;&#xA;We have the following types of algorithms &#xA;&#xA;- Linear Regression&#xA;- Logistic Regression&#xA;- Decision Tree&#xA;- Artificial Neural Network&#xA;- k-Nearest Neighbors (KNN)&#xA;- k-Means&#xA;&#xA;You can choose any one of the above or find other types which will be more or less based on these algorithms. This algorithm will be decided by the outcomes you want, for example, whether you have to predict, classify, recommend, cluster, etc. the outcome from the given data. Different algorithms have different complexity as they have a completely different approaches.&#xA;&#xA;You can research this more and find more about which will be suitable for your objectives or application.  &#xA;&#xA;Now an important topic that is misleading, Model is the program that will work with the data in association with the algorithm and output the actual objective. Model is not the algorithm but it works with the chosen algorithm and processes the actual learning in machine learning. &#xA;&#xA;So,&#xA;&#xA;&gt; Model = Algorithm + Data&#xA;&#xA; The model will actually process the data according to the algorithm given and fill in the objectives may they be classifying or predicting. &#xA;&#xA;### 4. Training the system&#xA;&#xA;Training is a step that is very interesting as it involves actually testing the model and it&#39;s really fun. We provide the model the `training data` that we segregated while filtering the data. In this process we try to minimize the loss by making changes to the algorithm, fix some data set or bring in some additional dataset as per needs and again evaluate the results. This is a loop called `model fitting`.&#xA;&#xA;This step depends on the learning into consideration, whether you want to provide any supervision or not. &#xA;&#xA;### 5. Verifying and Evaluation of Training&#xA;&#xA;This is a part of `model fitting` as it is the part of the loop which allows us to evaluate and verify the model.  We can evaluate the model based on its accuracy, precision, labels, etc. So based on those parameters we should be able to decide its complexity and performance.&#xA;&#xA;These are important aspects to consider in evaluating the model.&#xA;- Accuracy &#xA;- Precision  &#xA;- Recall &#xA;&#xA;You can get the details of the mathematics and logic involved in evaluating the model with some references like:&#xA;&#xA;- [Evaluating ML model - Jeremy Jordan](https://www.jeremyjordan.me/evaluating-a-machine-learning-model/)&#xA;- [Ways to Evaluate ML model - Towards DataScience ](https://towardsdatascience.com/various-ways-to-evaluate-a-machine-learning-models-performance-230449055f15)&#xA;&#xA;### 6. Improving and Deploying the Model&#xA;&#xA;This might be the final step generally but it depends on the project, there are certain aspects that need to be taken care of like:&#xA;&#xA;- Creating an API endpoint&#xA;- Analysis and Visualization integration with client-side (web/android/ios/desktop app)&#xA;- Creating a Pipeline for data input and output from the model.&#xA;&#xA;There might be other options like CI/CD, Testing, feedback, and other production level details that need to be taken care of, you can read more about the deployment of machine learning models  [here](https://christophergs.com/machine%20learning/2019/03/17/how-to-deploy-machine-learning-models/). &#xA;&#xA;You can learn about deploying an ML model for your learning and testing for free with the recommendations of  [FCC](https://www.freecodecamp.org/news/deploy-your-machine-learning-models-for-free/).&#xA;&#xA;## Different Types of Machine Learning&#xA;&#xA;There are four basic types of Machine Learning :&#xA;&#xA;### 1. Supervised Learning&#xA;&#xA;In this type of ML, the model is given the labeled data in the training dataset and is evaluated. We provide both input and output to the model and hence it is supervised or tracked throughout the process. &#xA;&#xA;&#xA;![3.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1632909214720/1uHALiOG-.png)&#xA;&#xA;The above image is just for reference and not directly a model, height and weight can be a parameter to consider and are not only the thing to be considered her. It&#39;s just for making understand the concept of the learning process. &#xA;&#xA;### 2. Unsupervised Learning&#xA;&#xA;In this type of machine learning, the model is trained with unlabeled data. It is on the algorithm to actually see the pattern or logic in the dataset provided and give the output. The output will be known to the user but is not given to the model, hence called unsupervised learning. &#xA;&#xA;&#xA;![4.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1632909227565/KtU7Oppkc.png)&#xA;&#xA;### 3. Semi-Supervised Learning&#xA;&#xA;As the name suggests, it is a combination of both Supervised and Unsupervised learning. The dataset is given with the label but the model is also allowed to process its own label(kind of) into the output. Hence having the best of both worlds. There might be even some labeled and some unlabeled datasets as per the requirements of the application.&#xA;&#xA;![5.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1632909276475/TPGy91_LQ.png)&#xA;&#xA;&#xA;### 4. Reinforcement Learning&#xA;&#xA;In reinforcement learning, the model learns from feedback. It might look similar to supervised learning but here the feedback might not be instant and hence causing delay and improper decision making from the model. Though it is used in many places, it is like the realistic learning behavior of humans depicted to computers with this learning system.  &#xA;&#xA;**There are other types of learning systems as well but these are used quite commonly and are quite versatile as well.**&#xA;&#xA;&#xA;## Applications of Machine Learning&#xA;&#xA;The applications of Machines Learning are all around you. Just look carefully, you would have even feedback on a model! &#xA;- Personal Assistants (Google Assistant/ Siri/ Alexa)&#xA;- Gmail Inbox filter.&#xA;- [Youtube Video Recommendation system](https://towardsdatascience.com/how-youtube-recommends-videos-b6e003a5ab2f) .&#xA;- Face recognition ( [DeepFace](https://en.wikipedia.org/wiki/DeepFace) )&#xA;- Product Recommendations.&#xA;- Self-Driving Cars( [Tesla](https://www.tesla.com/autopilot) )&#xA;- Traffic Alerts (Google Map)&#xA;- Text Improvement ([Grammarly](https://www.grammarly.com/blog/how-grammarly-uses-ai/))&#xA;&#xA;This list is quite huge and is increasing every day with new technologies and growing popularity. &#xA;&#xA;## Can GitHub Copilot take away developers&#39; jobs?&#xA;&#xA;This just doesn&#39;t focus on developers, it&#39;s every human&#39;s job on target this day but really? Is it a matter of concern? &#xA;I don&#39;t think so, because,&#xA;&#xA;&gt; the number of jobs lost = the number of jobs given.&#xA;&#xA;There will be a need for humans in some or the other way, remember a computer cannot is **not smart** like humans, surely it has improved from what we thought a couple of years ago. But who discovered this? HUMANS. &#xA;&#xA;Yes, Machine Learning is quite a powerful technique but humans will remain the essence in the world. It will be dependent on humans how we treat the models and use them to our and nature&#39;s advantage and not use them against nature to face the consequences later. &#xA;&#xA;## Conclusion&#xA;&#xA;Ok, so from this big article, we can summarize the Machine Learning concept.&#xA;&#xA;&gt; Machine learning is a program that has a dataset and algorithm along with the model for the objective, we train the model as per the requirements and objectives with our dataset. &#xA;&#xA;We were able to understand some common processes involved in Machine Learning. We even discussed the applications and the state of Machine Learning in today&#39;s world. I hope you found this article helpful. Thank you for reading. Happy Coding :)&#xA;</content>
      <type>posts</type>
    </item>
    <item>
      <title>What&#39;s in Techstructive Blog</title>
      <link>meetgor.com/techstructive-blog-init</link>
      <description></description>
      <pubDate>Sun, 19 Sep 2021 00:00:00 UTC</pubDate>
      <content>&#xA;## Introduction&#xA;&#xA;**Hello World!** This is an article in which I&#39;ll introduce why Techstructive Blog exists and what it covers in brief. This is just a casual introduction to my blogging niche. P.S. It&#39;s not any technical blog but has challenged me enough to write and complete it.  &#xA;&#xA;&gt; Techstructive Blog is my personal blog hosted on GitHub pages as well as on  [Hashnode](https://techstructiveblog.hashnode.dev/). It first started on Hashnode and soon created my own using Jekyll on GitHub pages. On this blog, I write articles mainly Vim, BASH, and some programming languages and tools. &#xA;&#xA;Firstly thanks to Hashnode for providing a free platform for developers to share their journey to the world. I am happy that I have found such a gold mine of a supportive and growing community of developers that help find and inspire each other&#39;s way.&#xA;&#xA;&#xA;## What Techstructive Blog covers?&#xA;&#xA;&gt; Vim + Linux + Random Stuff&#xA;&#xA;Techstructive Blog started around 20th February 2021, where I first found  Hashnode. There I wrote my first article in my technical writing journey. The article was about `Vim`. It covered some quite basic stuff on how to get started in Vim. After few months I really found the need to blog about my learnings as I felt more confident about my skills after writing 10-12 articles on the  [GeeksforGeeks portal](https://auth.geeksforgeeks.org/user/meetgor/articles). I again started writing articles about Vim and BASH as well. &#xA;&#xA;Fast forward today,  [Techstructive Blog](https://techstructiveblog.hashnode.dev/)  has 26 articles on it, 14 being about Vim and 8 being about BASH. That is the niche of Techstructive Blog revolving around GNU\Linux and its applications. I also talk about Django and C++ as they are technologies I love to work with and create some personal projects with them.  &#xA;&#xA;## Rambling about Vim&#xA;&#xA;I don&#39;t know it might feel to the readers like I am rambling and boasting about how much I know about Vim, but I honestly love and adore the text editor as it is so customizable and wicked fast. I just write about what might be helpful and important to others as a setup or just editing in Vim. I personally use Vim every day so I feel more confident and excited to write about it. I feel it&#39;s just the start of Vim for me, I can go on writing articles about Vim that will be helpful for someone or the other. I have 7 articles already planned up for Vim, I just need to finish off certain pending tasks and projects first. &#xA;&#xA;I am gonna primarily focus on how to use Vim for various languages or frameworks. This also applies to using Vim in different environments and improving the workflow of daily usage. Also notice that all my Vim articles are short and simple. They just cover the topics as mentioned in the title, because I don&#39;t feel like spitting everything in one article that no one can understand and connect topics together. Instead, I break topics into series, just like the Vim:  [Tabs](https://techstructiveblog.hashnode.dev/vim-tabs), [ Window Splits](https://techstructiveblog.hashnode.dev/vim-window-splits), and  [Buffers](https://techstructiveblog.hashnode.dev/vim-buffers)  articles. &#xA;&#xA;I plan ahead as more and more articles about Vim and maybe some weekly newsletter of Vim tricks and commands. That&#39;s some exaggerated thing but I have decent skills to tackle that. Who knows what the future holds? but it&#39;s important to plan your way.&#xA;&#xA;## Linux &#xA;&#xA;Well, I technically don&#39;t have any articles about `Linux` but I have a lot of things to share about it. I have a series to be written about it with a minimum of 10 articles in it. But I am not able to start my way off in search of a perfect time. Though I have some BASH articles and a  [series](https://techstructiveblog.hashnode.dev/series/bash-scripting)  about scripting already. I have always preferred to use Linux even if I use Windows 7 daily, I have a virtual machine to satisfy some of my needs and curiosity. That&#39;s aside I have used Termux which is a terminal emulator for Android, I have literally spent the Lockdown, coding on it all the months and weeks. &#xA;&#xA;I feel to talk about the need to use Linux and how it has revolutionized programming and development around the world. This is really a biased topic because people who use certain OS are gonna keep using it but I hope that they would get some insights at least from those articles.&#xA;&#xA;## Web development &#xA;&#xA;I have created several projects/websites using Vanilla Javascript and Django, so I can pretty much talk about the things which I&#39;ve learned and the mistakes that have made. I have a good grasp on Django now so I feel much confident to write series about it, just covering the concepts and the terminologies in which I faced challenges in getting through.&#xA;&#xA;&#xA;## General Programming&#xA;&#xA;Well, I can&#39;t lie but I feel too excited when it comes to learning new things and I genuinely learn them until I create something from it, may it be C/C++, Python. Django, Javascript, BASH, or other tools or frameworks. I am not limiting myself to any language or topic, but ya I can proficiently write about one and slowly gather around others as well. &#xA;&#xA;&gt; Jack of all trades, master of none.&#xA;&#xA;That might be a good quote applicable to me but I believe in  [PI-Shaped Learning](https://appunite.com/blog/become-a-pi-shaped-developer). PI-Shaped learning emphasizes broadening the knowledge in all domains but having expertise in one. Like I can talk about Web development, Android development, DevOps but I will be majorly inclined towards one and have a deep knowledge of ins and outs of that domain. &#xA;&#xA;## Conclusion&#xA;&#xA;Phew! That took a while to finish. But hey! Thanks a lot for reading till here. I hope you got my thoughts about the scope of this blog. I owe to continue this blogging journey in the future and improve my as well as the reader&#39;s skills and experience.&#xA;&#xA;Well, until then HAPPY CODING :)&#xA;</content>
      <type>posts</type>
    </item>
    <item>
      <title>My Journey as a Technical Writer</title>
      <link>meetgor.com/technical-writer-journey</link>
      <description></description>
      <pubDate>Tue, 14 Sep 2021 00:00:00 UTC</pubDate>
      <content>&#xA;## Introduction&#xA;&#xA;Hello World! I am Meet Gor, a self-taught web developer, Linux enthusiast, and a newbie technical writer. I am currently studying in an Engineering college pursuing my B. Tech in I.T.  I love to explore new programming languages and technologies, create innovative projects, love to write stories and blogs like this. &#xA;&#xA;## How it started&#xA;&#xA;When I was learning Vim, I found the need to write some kind of cheatsheet for myself. So I started writing it, soon I realized I had written a kind of an article instead of a cheatsheet XD There were a lot of chunks of it unorganized but meaningful in some sense. So, from there I started to research on article writing. I found the term perfect for my techno feelings to express i.e. &#34;Technical Writing&#34;.  I soon landed on Hashnode, I knew Medium, GeeksforGeeks but found Hashnode absolutely perfect and much more viable to the creativity of an author. &#xA;&#xA;### Starting on Hashnode&#xA;My  [first article](https://techstructiveblog.hashnode.dev/why-and-how-you-should-use-vim-as-a-text-editor-and-ide)  was published on  [Hashnode](https://hashnode.com/@Mr-Destructive/joinme), which I absolutely love and adore. That was a bit big article about 12 minutes for a beginner me writing everything about Vim which I knew about that time.  The response was not that bad, I received a couple of reactions and comments to pump me up but I never felt confident to write more articles. &#xA;&#xA;### GeeksforGeeks Internship&#xA;Until I found an **Internship at GeeksforGeeks for a Technical Writer** role.  [Geeksforgeeks](https://www.google.com/aclk?sa=l&amp;ai=DChcSEwj-_8TAq_7yAhUtlUsFHdI4AD4YABAAGgJzZg&amp;ae=2&amp;sig=AOD64_1xL_mUI1OLWumXOK-H1jF4wRP8eg&amp;q&amp;nis=1&amp;adurl&amp;ved=2ahUKEwjSlb_Aq_7yAhXMb30KHXM6BPsQ0Qx6BAgCEAE)  is a start-up for Computer science students to learn and grow with free as well as paid courses and mentors. In a couple of months, I wrote some 10-12 articles about Shell scripting. There I really found my interest and the confidence I wanted.  It was really a great experience working here and loved the freedom it provided to the authors with genuine and constructive feedback along with a decent stipend.  [Here](https://auth.geeksforgeeks.org/user/meetgor/articles)  you can find my work.&#xA;&#xA;### The start of the `Techstructive Blog` &#xA;Soon, on June 6th something stuck in my mind that I should write about how to use Vim for doing various things. So, the first idea was what currently I was learning in College i.e Python, I started writing about the Vim set up for python and I completed it within 2 hours. I published it on Hashnode and **from there I never looked back. I started writing an article every 3-4 days**. That summed up for 3 months making 21 articles till September. I also made my personal open-source blog called [`Techstructive Blog`](https://mr-destructive.github.io/techstructive-blog/) using Jekyll and hosted it on GitHub pages. &#xA;&#xA;&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1631625512256/eyN6xO92G.png)&#xA;&#xA;I did experiments with a lot of blogging tools and frameworks like  [Netlify with Flask](https://www.patricksoftwareblog.com/flask-tutorial/),  [Django distill](https://github.com/meeb/django-distill),  [Gatsby Js](https://www.gatsbyjs.com/starters/gatsbyjs/gatsby-starter-blog), etc and finally landed on  [Github pages](https://pages.github.com/)  with  [Jekyll](https://jekyllrb.com/)  as it is quite customizable and a lot easier to add certain components as well. &#xA;&#xA;&#xA;&#xA;## Why I kept going?&#xA;&#xA;It&#39;s not hard to keep up with what you love to do. Even if you are not that interested in doing something, just having curiosity and consistency can turn any work into a skill. Here are the reasons why I love to keep going as a Technical writer ( some of them are from the Bootcamp session from @[Edidiong Asikpo](@didicodes) and @[Quincy Larson](@quincy) :) &#xA;&#xA;- Over a span of 5-6 months I have learned a lot than I had in my past 2 years, I understood that I am writing for myself first and not only for other people. &#xA;- It helps me in improving my online presence and clearly showcases my skills and interests. &#xA;- Able to sum up ideas and document them well.&#xA;- Maintain a record of learning for your future self.&#xA;- Learning to get things done by writing articles consistently in an allotted time.&#xA;&#xA;&#xA;## How I kept going?&#xA;&#xA;I am writing articles almost daily one for my blog and another day for GeeksforGeeks. I have a schedule and follow it almost punctually. I have never run out of ideas and motivation till now, every time I feel that there&#39;s no motivation in me, something or the other pops up just like this  [Hashnode Bootcamp - The Art &amp; business of Technical writing](https://hashnode.com/bootcamp). Some youtube videos, Hackathon, Bootcamps, Project, conversations with friends just can impact in a constructive and a drastic way, they create a refreshed experience and allow you to clarify the doubt in yourself. Just you have to be open to ideas and feedback from other people and learn in harmony. &#xA;&#xA;## My writing workflow&#xA;&#xA;This is really a neglected part when you ask a technical writer as it can really improve your productivity.  I use Hashnode and Vim both for writing out the markdown script. I like to write the subheadings or the content which I want to explain in that article. That really makes a bigger idea in a small chunk and I repeat the process until I feel that is the lowest abstracted way I can explain something. I record some screencasts in gifs on ScreenToGif recorder, MS Paint and Canva as an Image editor,  **Hashnode makes uploading and accessing images, gifs so easy and it&#39;s quick too, really Hashnode is just flawless for a tech writer.** &#xA;&#xA;&#xA;## Conclusion&#xA;&#xA;That&#39;s been my story so far. I have grown from a noob coder to a somewhat confident nerd who can quickly write functional scripts, jump in Vim with more speed, and of course, teach someone something that can be helpful. It also is a way for me to relax and enjoy the process of programming. &#xA;&#xA;Thanks a lot if you have been reading till here. &#xA;**Thank you Hashnode for providing such a great opportunity to create a side hustle here**. As always Happy Coding :)&#xA;</content>
      <type>posts</type>
    </item>
    <item>
      <title>Dev Quotes: A platform for developers to quote and get inspired - Auth0 x Hashnode Hackathon</title>
      <link>meetgor.com/devquotes-platform</link>
      <description></description>
      <pubDate>Fri, 27 Aug 2021 00:00:00 UTC</pubDate>
      <content>&#xA;## Introduction&#xA;&#xA;&gt; No one can understand the joy in finishing a personal project, except the dreamer &#xA;&#xA;It was a while,since I have posted an article here, as I was busy on a project or a hackathon.&#xA;&#xA;Hello, world! I am Meet a student and a self-taught web developer. I like to make and break stuff, especially when it comes to programming and Linux. I like shell scripting and learning different languages at once, love to learn about Vim and Linux everyday.&#xA;&#xA;Every time I start a project something else comes and distracts me let that be any other programming language or technology. That leads to creating new projects and leaving the one behind unfinished, I know most of the developers face this.  But this time, thanks to Auth0 X Hashnode Hackathon, I was able to create an almost finished project within almost 10 days. Having a deadline and competition creates a mindset to finish a project on time, that&#39;s my first takeaway from this Hackathon. OH! this is my first Hackathon by the way, and it has been amazing so far.  &#xA;&#xA;** Applying a framework to do something you desire and then everything working smoothly (after fixing 100s of bugs) is such a great feeling that no one can understand except for the person who just dreamt of it. **&#xA;&#xA;I&#39;ll like to share my project which is a web application for the Auth0 x Hashnode Hackathon. Here it goes.&#xA;&#xA;## What is Dev Quotes?&#xA;&#xA;Dev quotes is a web app designed for publishing and viewing quotes related to programming, developer mindset, and all the technicalities involved in a developer&#39;s life. It&#39;s basically a medium to express the life of developers and get inspired by others.  Here it is [devquotes](https://devquotess.herokuapp.com/)&#xA;&#xA;#### Dark Mode:&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1630074051548/TQz9Koh7l.png)&#xA;&#xA;#### Light Mode:&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1630078314355/VhfLrcjJa.png)&#xA;&#xA;&#xA;## Why Dev Quotes?&#xA;&gt; Developers are not the people who only understand how to write code but they&#39;re also the people who can make the code understandable&#xA;&#xA;As a developer, there are often times where you have no motivation left inside, but you never know you might be just a few lines of code away from making another project or fixing a bug. For that, we require some inspiration or a push to break the barrier of.  I am not saying it&#39;s just for developers, it&#39;s designed for developers but everyone is open to understanding the developers&#39; lives and their struggles. &#xA;&#xA;I also felt the need to give back some love-crafted web app to the ever-wonderful and supportive dev community. It&#39;s a small application but still, I would like to give in something instead of nothing at all. Start small grow big, hopefully :)&#xA;&#xA;## Features&#xA;&#xA;Some of the main features of the web application are as follows:&#xA;&#xA;- **Write�dit\Delete Quotes if logged in.**&#xA;&#xA;- **Like / Unlike a Quote.**&#xA;&#xA;- **See all of your quotes.**&#xA;&#xA;- **Randomized Quotes on Homepage.**&#xA;&#xA;- **Dark/Light theme based on Browser&#39;s Preference and local storage.**&#xA; &#xA;- **The app is mobile responsive as well, though the navbar is a bit wonky with the light/dark mode switch toggle, which can be taken care of soon.**&#xA;&#xA;&#xA;&#xA;![dqmob.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1630084573444/YEj38dUTD_.png)&#xA;&#xA;&#xA;&#xA;## In the making&#xA;&#xA;&gt; Have the curiosity to learn, rest is automated&#xA;&#xA;The project was made by using various inspirational articles and videos about making a web application. But the idea stuck in my mind when I was thinking about the people who don&#39;t get inspired as a developer. Like there is no way you can remain sad about being a developer and keep on dealing with imposter syndrome. Every developer has a perspective of programming but there is an infinite number of opportunities if you are curious enough. Just started making the project and got so much into it that I was literally dreaming about it like I saw parts of the webpage. In my dream and I am making it that was genuinely a thing that powered me to complete it. &#xA;&#xA;The project roughly started on 19th August and almost ended on 26th August, like the actual webpage and its core functionalities. Though on 27th were some styling and extra additions such as the About section and Footer. That was like the most productive week I ever had in my programming journey. That was fun as heck.&#xA;&#xA;## Tech Stack&#xA;&#xA;The Tech Stack involved with this app is :&#xA;- `Django`&#xA;- `PostgreSQL` &#xA;- `HTML/CSS/JS`&#xA;- ` Bootstrap`&#xA;&#xA; I have not used any front-end end frameworks just because I never found the need to learn them.  I had experience with Django for just 2 months and I am surprised I was able to make it. As obvious I have used Auth0 for authentication in my web application.&#xA;&#xA;### Auth0 integration for Authentication&#xA;&#xA;I must tell you using Auth0 was just flawless addition to my app as I have to do almost nothing, just drop some credentials of the Auth0 application with my Django project using a  [well-documented guide](https://auth0.com/docs/quickstarts)  for every type of framework. Simply straight-forward was the name for integrating authentication in my app.&#xA;&#xA;#### How I used Auth0 with Django&#xA;&#xA;I&#39;ve used Template tags such as if blocks to verify if the user is authenticated or not. &#xA;```html&#xA;&lt;div class=&#34;login-box auth0-box before&#34;&gt;&#xA;&#x9;&#x9;{{ &#34;{% if user.is_authenticated &#34;}} %}&#xA;&#x9;&#x9;    &lt;a class=&#34;btn btn-primary btn-sm tn-logout &#34; href=&#34;/logout&#34;&gt;Log Out&lt;/a&gt;&#xA;&#x9;&#x9;{{ &#34;{% else &#34;}} %}&#xA;&#x9;&#x9;    &lt;a class=&#34;btn btn-primary btn-sm tn-login &#34; href=&#34;/login/auth0&#34;&gt;Log In&lt;/a&gt;&#xA;    {{ &#34;{% endif &#34;}} %}&#xA;&lt;/div&gt;&#xA;```&#xA;&#xA;This was just readily available on their documentation though there were some adjustments as per the project requirements in this code to fit in the place.&#xA;&#xA;I must say, integrating Auth0 is even easier than using Django User Model in some sense as most of the stuff is handled by the Auth0, on our side, we simply have to create the Auth0 specific app with the credentials from the dashboard rest just works flawlessly till now. How sweet and &#xA; &#xA;### Specifications&#xA;&#xA;I won&#39;t go in-depth about the technicalities of the project but would like to address certain things. Firstly I have mostly used Class-based views for the major part, certain areas are still function-based just for the simplicity of the application and a few of them are handled and documented by Auth0 so just preferred that. &#xA;&#xA;Another thing is about Models, I just have a simple single model called `Quote` which has an Author as a Foreign Key from the Django User Model. I would have also created multiple emojis for the like system but I was too excited and in a rush to see the actual app, So just kept it simple. XD&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1630060555499/246ZKnypP.png) &#xA;&#xA;The rest of the stuff like `URLs`, `Templates`, and `static files` are handled in a neatly organized way as depicted in the below diagram.&#xA;&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1630060426600/JHMlrfOKZ.png)&#xA;&#xA;As it might not be clear from that, there are 3 apps -&gt; `auth0login`, `quotes`, and `user`, here `quotes` is kind of the most important app as it has the models, forms, URLs, and the views linked to them here. &#xA;&#xA;### Hosting&#xA;&#xA;Hosting as you can guess, it&#39;s on  [Heroku](https://www.heroku.com/) , quite beginner-friendly and feature-rich. I also have a free addon for PostgreSQL Database here.  It&#39;s limited to 10K rows but that&#39;s sufficient for a starter app like this in my opinion. Also, it has 500 free hours of dyno, which is also sufficient for a small low-traffic app like this.  &#xA;&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1630076036133/9ofxnM5VN.png)&#xA;&#xA;## Bugs Encountered &#xA;&gt; Love Bugs, they&#39;ll give you experience&#xA;&#xA;This is the most exciting and important part if you consider the hackathon because this determines the level of experience that a developer shoes in achieving certain things or features if you will. Faced some typical Django errors as usual but also some unexpected things like Dark mode and light mode clashing together due to poorly written media queries in CSS.&#xA;&#xA; As usual, the start is often hard, there is no motivation whatsoever in using the admin section to test the database queries and gibberish basic HTML page. In that process, I faced some primary key access issues and was able to understand the concept more clearly by fixing it.&#xA;&#xA;Another instance was with handling post requests in Django which I&#39;ve failed to do before. I used forms and a hybrid of CSS and bootstrap to style those forms which just works brilliantly. That took some time to figure out the exact working but after a while, it was working charms. &#xA;&#xA;&#xA;## Future Updates&#xA;&#xA;As said, I would like to add more like buttons expressing different emotions. Some other features to add are:&#xA;&#xA;- To add more emojis like claps, cheers, and others.&#xA;- To add a profile page in the app that would display all the quotes of the particular author and the details related to him/her.  &#xA;- Adding some tags to filter out particular types of quotes.&#xA;- Improve UI-UX a bit more to make it professional and pleasant.&#xA;&#xA;## Source Code&#xA;&#xA;&gt;Talk is cheap, show me the code - Linus Torvalds&#xA;&#xA;The source code is available at GitHub on this  [Link](https://github.com/Mr-Destructive/devquotes). &#xA;It&#39;s freely open for any contribution after the hackathon(mid-September).  Some of the files such as the environment variables, virtual environments, cached data are not uploaded for security and obvious reasons.&#xA;&#xA;Enough of technical talks, let&#39;s see the DEMO,&#xA;&#xA;&#xA;![dqss.gif](https://cdn.hashnode.com/res/hashnode/image/upload/v1630073466386/3wgnST5hc.gif)&#xA;&#xA;Silent claps.......&#xA;&#xA;It&#39;s not a great UI-UX but works and is not too shabby in my opinion considering it only has base HTML and CSS with a little Bootstrap and Javascript. But ya, a fully functional Backend that&#39;s what I was looking for a full-stack app with some decent features. Hope it helps some developers stay motivated and hack into some hackathons like this.&#xA;&#xA;### References used while creating the app:&#xA;- [Codemy -John Elder Django tutorial]( https://www.youtube.com/watch?v=B40bteAMM_M&amp;list=PLCC34OHNcOtr025c1kHSPrnP18YPB-NFi)&#xA;- [Django - Documentation for Forms](https://docs.djangoproject.com/en/3.2/topics/forms/)&#xA;- [Django template randomizer shuffle](https://stackoverflow.com/questions/28837511/django-template-how-to-randomize-order-when-populating-page-with-objects)&#xA;- [Auth0 app Django integration](https://www.youtube.com/watch?v=kzN_VCFG9NM)&#xA;&#xA;&#xA;## Closing Words&#xA;&#xA;&gt; Why developers find solutions to bugs at the stroke of sleeping, that&#39;s multithreading in our brains &#xA;&#xA;Hope you liked the project and hopefully will inspire developers to stay motivated and can focus on their goals more than dealing with imposter syndrome and whatnot. &#xA;&#xA;Thank you for reading and using the app, for any feedbacks, Twitter handles, comment section, GitHub issues, LinkedIn messages are all freely open. Thanks. Happy Coding :)&#xA;</content>
      <type>posts</type>
    </item>
  </channel>
</rss>