<rss version="2.0">
  <channel>
    <title>Meet Gor - Tag: bash</title>
    <link>meetgor.com</link>
    <description>Posts tagged with bash</description>
    <language>en-us</language>
    <pubDate>Fri, 17 Oct 2025 16:57:38 UTC</pubDate>
    <item>
      <title>Basics of curl command</title>
      <link>meetgor.com/curl-basics</link>
      <description></description>
      <pubDate>Fri, 05 Nov 2021 00:00:00 UTC</pubDate>
      <content>&#xA;## Introduction&#xA;&#xA;We all might have used the curl command but might be unaware of it. It&#39;s super old&#xA;and still serves a great purpose. It has been available since 1996 and still is&#xA;widely used in many embedded technologies, web API testing, CLI applications,&#xA;etc. In this article, we&#39;ll see some basics of using the curl command along with&#xA;its applications.&#xA;&#xA;## What is the curl command?&#xA;&#xA;Curl or cURL command is the utility or tool to access the internet from the command&#xA;line interface using various protocols. This looks trivial but it can blow up&#xA;your mind! Most people use this tool for fetching and processing the&#xA;data from the servers/internet from their terminal without the browser but&#xA;there is a lot more to it. It is used in various embedded devices for accessing&#xA;the network in a lightweight and accessible way. Let&#39;s see how you can use the curl&#xA;command from the very basics.&#xA;&#xA;&#xA;## Why do we need it?&#xA;&#xA;Before we talk about how to use the curl command let&#39;s talk about why might we need&#xA;that? There are a lot of reasons and it even depends on the application you are&#xA;using.  You can use curl to test your API, well there are other tools like&#xA;POSTMAN, Insomnia, etc but for keeping things simple you can quickly get in&#xA;with curl and test some endpoints.  You might require curl for creating some&#xA;CLI applications that require fetching/posting to an URL over the internet.&#xA;If you are using the terminal, curl integrates really very well with the shell&#xA;programming languages like BASH, ZSH, etc So, after making WHY out of the way,&#xA;let&#39;s start with the actual content. &#xA;&#xA;&#xA;## Structure of curl command&#xA;&#xA;**curl or Client URL is a command-line utility that helps in accessing/posting&#xA;data with various protocols over the internet.** It basically serves as a&#xA;bare-bones browser URL search bar.  You can&#39;t render those pages like the&#xA;actual GUI, and all but you can get is the HTML source code, JSON response,&#xA;etc.  That&#39;s still quite powerful and used in tons of applications. &#xA;&#xA;```&#xA;curl URL arguments &#xA;```&#xA;&#xA;The above is a basic structure of the curl command. We see the argument&#xA;structure in-depth in the next section. Firstly, let&#39;s take a simple curl command with just the URL is given.&#xA;&#xA;```bash&#xA;curl &#34;https://github.com&#34;   &#xA;```&#xA;From this query to `github.com`, you are literally going to `GitHub.com` and getting a response as the entire HTML source code of the page.&#xA;If you don&#39;t want to spam the output in the terminal, you can redirect the output to a file.&#xA;&#xA;```bash&#xA;curl &#34;https://github.com&#34; &gt;temp.html&#xA;```&#xA;With this command, we store the output of the command in the file temp.html, it can be any other file you like. &#xA;&#xA;### Arguments &#xA;&#xA;It turns out that you can even parse in certain arguments to the `curl` command to get some desired and modified results. Let&#39;s take a look at some of them.&#xA;The [entire list of arguments](https://curl.se/docs/manpage.html) is quite huge&#xA;and baffling, but this shows how customizable the command is. &#xA;&#xA;- `-s` (silent the progress bar)&#xA;- `-X` (web requests `POST, GET, etc` to the URL)&#xA;- `-o` (output to a file)&#xA;- `-H` ( provide Header to the request)&#xA;- `-d` (providing the data e.g. in POST request)&#xA;&#xA;```bash&#xA;curl -s -o &#34;https://github.com&#34; temp.html&#xA;```&#xA;&#xA;This command doesn&#39;t load the progress bar and simply outputs the response in a&#xA;file, making the execution process in the terminal clean.&#xA;&#xA;### Integration with other commands &#xA;&#xA;As said, the `curl` command can be well integrated with the other commands using piping in shell, assigning to variables, and so on.&#xA;&#xA;Let&#39;s see how we can convert the `JSON` response to a BASH variable.&#xA;&#xA;```bash&#xA;resp=$(curl -H &#34;api-key: N2vDzMyEeYGTxjUTePhC8bYd&#34; https://dev.to/api/users/me)&#xA;&#xA;echo $resp&#xA;```   &#xA;Here, we are fetching the `JSON` response from the `dev.to` [API](https://developers.forem.com/api/),The wired string `N2vDzMyEeYGTxjUTePhC8bYd` is my [dev.to API token](https://dev.to/settings/account)(don&#39;t worry I have revoked it:) ) we have provided an argument `-H` that is a Header for accepting a `Json` response. &#xA;We can store the contents of the curl command by using the `$( )` and assigning that to the variable name of your choice.&#xA;&#xA;```bash&#xA;username=$(curl -H &#34;api-key: N2vDzMyEeYGTxjUTePhC8bYd&#34; https://dev.to/api/users/me | grep -o -P &#39;(?&lt;=username&#34;:&#34;).*(?=&#34;,&#34;name)&#39;)&#xA;```&#xA;Here, we have stored the username from a `JSON` response to the variable username. We have piped the curl command so that we can work with that `JSON` response and modify the contents and then store the final results in a variable.&#xA;In this case, we are using `grep` to filter out the content between the key `username` and `name`, thus we get the value we desired. To see the value you can always run the echo command as below:&#xA;```bash&#xA;echo $username&#xA;```   &#xA;So, that&#39;s how the `curl` command integrates flawlessly with BASH and other shell programming languages. &#xA;&#xA;## Where is it used?&#xA;&#xA;`curl` is actually used in API testing, CLI applications, Web Scrapping, etc. It&#39;s a great tool for terminal lovers. Let&#39;s see where we can use the curl command actually to make some good projects.&#xA;&#xA;### API Testing&#xA;&#xA;We can use, `curl` to test an API, it might be API you would have made or to simply test and play with other API available publicly. You can get an in-depth guide about [Testing a REST API with curl](https://www.codepedia.org/ama/how-to-test-a-rest-api-from-command-line-with-curl/).&#xA;Actually, curl can do more than just testing, I have made a [bash script](https://gist.github.com/Mr-Destructive/80860664b1014ef0b94092d68ead1044) that actually posts some data over a database through the API so that I don&#39;t have to do that manually. That is the kind of automation I love to do and curl! Just did that.&#xA;&#xA;### Web Scrapping&#xA;&#xA;Web-scrapping is usually trending with Python, but I have done that with BASH.&#xA;That might be an outdated idea but is a good task to learn the basics of&#xA;Web-scrapping with BASH ;). I must say that sed, awk, grep are the tools are&#xA;powerful like heck in doing these tricks. I have made this&#xA;[crypto-currency](https://mr-destructive.github.io/techstructive-blog/bash/2021/07/15/BASH-Crypto-Coingecko.html)&#xA;and&#xA;[dictionary](https://mr-destructive.github.io/techstructive-blog/bash/2021/07/27/BASH-script-dictionary-scrap.html)&#xA;scrapper with BASH. Web-scrapping can be done with the curl command by fetching to&#xA;an API if any or any website. We need to search and find the particular fields,&#xA;classes, or ids the elements the required data might be into and then extract&#xA;and filter using the tools like grep, sed or awk.&#xA;&#xA;&#xA;### CLI Applications&#xA;&#xA;We can make CLI applications like creating a terminal view of existing&#xA;applications using their APIs or website. I recently made a CLI for&#xA;[cross-posting articles](https://github.com/Mr-Destructive/crossposter) to&#xA;dev. to, hashnode and medium. That is a project still in progress(tons of bugs)&#xA;but still serving a decent job. Definitely `curl` might not be the only command&#xA;that works here, but the project might look so incomplete without `curl`.&#xA;&#xA;**There might be other applications as well, who knows there is a lot to do with this command.** If you know one, please let everyone know in the comments.&#xA;&#xA;### References:&#xA;&#xA;Special Thanks to the creator of the curl command - [Magnus Daniel Stenberg](https://github.com/bagder) and the developers who are still contributing and maintaining the great project.&#xA; &#xA;### Conclusion&#xA;&#xA;So, from this article, we were able to understand the basics of the `curl` command and understand its applications in actual programming stuff. Hope you liked it. Thanks for reading and until then Happy Coding :)&#xA;</content>
      <type>posts</type>
    </item>
    <item>
      <title>Crossposting with a single script: Crossposter.sh</title>
      <link>meetgor.com/crossposter-shellscript</link>
      <description></description>
      <pubDate>Sun, 31 Oct 2021 00:00:00 UTC</pubDate>
      <content>&#xA;## Introduction&#xA;&#xA;If you have been writing articles you know the pain to get some attention, if you have already been cross-posting your articles it usually takes some time to do that. This task can be automated with a shellscript. If you have been cross-posting articles on `medium.com`, `dev.to` and at `hashnode.com`, then I have a treat for you. &#xA;&#xA;Introducing **crossposter.sh**!!&#xA;&#xA;## What is Crossposter.sh?&#xA;&#xA;### Crosspost to dev.to/hahsnode/medium from the command line.&#xA;&#xA;Crossposter.sh is a shellscript(BASH) to automate crossposting to platforms like dev.to, medium.com and hashnode.com. The script takes in markdown version of your post with a few inputs from you and posts it to those platforms. You would require a token/key for each of those platforms to post it from the command line. You can check out the official repository of [Crossposter](https://github.com/Mr-Destructive/crossposter).&#xA;&#xA;The actual script is still not perfect (has a few bugs). Though it posts on `dev.to` and `medium.com` easily, the `hashnode.com` is buggy as it parses the raw markdown into the post and doesn&#39;t render as desired. So, **its a under-development script**, fell free to raise any issues or PRs on the official GitHub repo.   &#xA;&#xA;Run the script on a bash interpreter with the command:&#xA;&#xA;`bash crosspost.sh`&#xA;&#xA;For posting the article you need to provide the following details:&#xA;&#xA;## Front-Matter&#xA;&#xA;### Meta data about the post&#xA;&#xA;- Title of Post&#xA;- Subtitle of Post&#xA;- Publish status of post(`true` or `false`)&#xA;- Tags for the post (comma separated values)&#xA;- Canonical Url (original url of the post)&#xA;- Cover Image (URL of the post&#39;s image/thumbnail)&#xA;&#xA;This information is a must for `dev.to` especially the `title`. This should be provide in the same order as given below:&#xA;&#xA;```yaml&#xA;&#xA;---&#xA;title: The title of the post&#xA;subtitle: The description of your article&#xA;published: true&#xA;tags: programming, anythingelse&#xA;canonical url: url of your original blog&#xA;cover_image: coverimage_url&#xA;---&#xA;```&#xA;&#xA;There is no need to enclose any of them with quotation marks. `Published` argument will be `true` if you want to publish it and `false` if you want to keep it in your Drafts.&#xA;&#xA;In the demonstrations, we just need to enter the tokens once. The tokens will be stored locally in the `keys.txt` file and retrieved later within the script.&#xA;&#xA;## Posting on **dev.to**:&#xA;&#xA;Posting on dev.to requires their `API key` which can be generated by going on the [Dev Community API Keys](https://dev.to/settings/account/). From there you can generate a new key with any name you like. You just need to enter the key to CLI once or manually enter in the `keys.txt` file with the format `dev.to:key` on the first line. This will be used for the future cross-posting whenever you execute the shell script(`bash crosspost.sh`)&#xA;&#xA;You can provide the [front matter](#front-matter) manually in your markdown file or you will be prompted for the input. So, that is all you will require for posting on dev.to from the Command line.  &#xA;&#xA;Lets see the script in action &#xA;&#xA;![dev.to](https://gitlab.com/MR_DESTRUCTIVE/tblog-img/-/raw/main/devto.gif)&#xA;   &#xA;If you want to add in more stuff to the post, you can check out the [DEV.to API docs](https://developers.forem.com/api#operation/createArticle) which is powered by [Forem](https://www.forem.com/), there a ton of options you can hook to the front-matter in the shellscript.&#xA;&#xA;**NOTE: There is a limit of 10 requests per 30 seconds, so keep in mind while testing the script and don&#39;t try to spam**&#xA;&#xA;## Posting on **hashnode.com**:&#xA;&#xA;This part is still under development as it only displays the raw markdown in the post, also the `tags` are too heavy to implement from the API as `id` of every tag is required along with the `slug` and `name`. Still it serves some purpose at least. For posting on `hashnode.com`, we need `Personal Access Token`. This can be generated by going to [Developer Settings](https://hashnode.com/settings/developer). You will also require the user-id of your `hashnode` account. You can get your user-id/username from the [settings](https://hashnode.com/settings) tab under profile information. We require Username for posting to the Publication Blog if any. As usual, the `Personal Access Token` for interacting with the [Hashnodes&#39; GraphQL API](https://api.hashnode.com/). The API is quite user friendly and provides everything in one place. There are docs for running each and every `query` and `mutations` present in the API. &#xA;&#xA;You can paste the token when prompted from the script or manually type in the `keys.txt` text file as `hashnode:token` on the 4th line. Yes, that should be on the `4th` line, thats make retrieving much more easier and safe. Next also input in the `username` when the script asks for the input or again type in on the `5th` line, `hashnode_id:username` in the text file `keys.txt`. Please enter the credentials from the script prompt so as to avoid errors and misconfigurations when doing manually&#xA; &#xA;This will create the Post on hashnode with the title, subtitle, cover image correctly but will mess up the content. I tried hard but its just not happening. There needs to be some character for newline as the API rejects the `rn` characters passed in, so I have substited them with `br` and the result is raw markdown. **As the Hashnode API is still under development and they are bringing changes and new features in, the API should improve in its core functionality and make it much easier for creating some common queries**. So, I&#39;ll create issue on GitHub for posting the actual content via the script.&#xA;&#xA;So, this is the demonstration of posting on hashnode.&#xA;&#xA;![hashnode](https://gitlab.com/MR_DESTRUCTIVE/tblog-img/-/raw/main/hashnode.gif)&#xA;&#xA;&#xA;## Posting on **medium.com**:&#xA;&#xA;Medium API is much more versatile and markdown friendly, though it has some limitation on the number of posts you can make in a day. For posting on `Medium.com`, we will require the `Integration Token` which can be generated on the [settings tab](https://medium.com/me/settings). As similar to `hashnode`, you can name the token whatever you like and then get the token. Paste the token when prompted from the script or manually type in the `keys.txt` text file as `medium:token` on the `2nd` line. We also require the Medium_id, but we can get that from the token itself, so inside the script once the token is obtained, the curl command is executed to fetch in the `id` and it is stored on the next(`3rd`) line in the `keys.txt` file for actually posting on `medium.com`. So that is all the configuration you need for posting on `medium.com`.&#xA;&#xA;There is some documentation on [Medium API](https://github.com/Medium/medium-api-docs), we can even post to a Publication, that shall be created in future. Also the cover images can be posted on medium, it is not currently done but that can again be a #TODO. **The tags are not rendered on Medium yet with the script.** The way we can parse  strings is limited in BASH, so this might still be a doable thing later. Most of the checkboxes are ticked like title, subtitle, cover-image, canonical url, and importantly the content.&#xA;&#xA;Let&#39;s look at post on medium from the script.&#xA;&#xA;![medium](https://gitlab.com/MR_DESTRUCTIVE/tblog-img/-/raw/main/medium.gif)&#xA;&#xA;&#xA;## All platforms: &#xA;&#xA;Now, once you have configured every thing, you can opt for the `4` choice that is post on all platforms(dev.to, hashnode and medium), but as hashnode is not looking a good option right now, so there is the `5` option for only `dev.to` and `medium`. &#xA;&#xA;![allplatforms](https://gitlab.com/MR_DESTRUCTIVE/tblog-img/-/raw/main/crossposter.gif)&#xA;&#xA;## Why use Crossposter.sh?&#xA;&#xA;This can be not so big of an issue for most of the people but it was a good side project to work and learn more about how APIs work and get some ideas on the design of the platform. Though it is quite time saving to cross post on 3 different platforms within a minute or two. You can tailor your own script as per your specifications and desire.   &#xA;&#xA;So, if you are an author on all of the mentioned platforms, please give it a try. Other Platforms are welcome for contributions. If you found any unexpected things, please hit them in the `issues` tab. &#xA;&#xA;## Script&#xA;&#xA;The script mostly leverages `curl`, `sed`, `cat` and some other basic utilities in BASH. &#xA;&#xA;### Using `curl` for posting the article from APIs&#xA;&#xA;Curl is a life saver command for this project, without this tool, the project might not be as great and efficient. Let&#39;s see some quick commands used in the script.&#xA;&#xA;&#xA;```bash&#xA;curl -H &#34;Content-Type: application/json&#34; -H &#34;api-key&#34;: \&#34;&#39;&#34;$key&#34;&#39;\&#34; -d &#39;{&#34;content&#34;:\&#34;&#39;&#34;$body&#34;&#39;\&#34;}&#39; &#34;$url&#34;&#xA;```&#xA;&#xA;So, the above command is quite basic, some more additions are also added as per the specifications of the Platform. But, let us understand the structure of the command we are sending to the APIs. The first part is the Header (`-H`), in here we specify the content that is going to get parsed and the api-keys to access the API. Next, we have the body or the data (`-d`), here we parse in the actual contents, it might be the front matter along with the markdown content. Finally we have the `url` where we send the `POST` request i.e. the `API endpoint`. The is the escape character that is used to preserve the literal value of the next character and in short we can shorten the command to fit in the next line.&#xA;&#xA;The wired `$body` is used to parse the value of the variable `body` inside of single quotes as in BASH, we can only access the variables&#39; value in double quotes. We are using single quotes as we have to pass the `json` object and which has already double quotes in it.  &#xA;&#xA;### Using `sed` for editing text&#xA;&#xA;Sed is a super-powerful stream editor, its somewhat similar to Vim without an interface, only commands. We use this tool to manipulate the front-matter for posting on the platforms by parsing them to variables in BASH. We also use to enter the api keys inputted by user from variables into the file at a specific position to retrieve later. &#xA;   &#xA;```bash&#xA;sed -i &#34;1a title: $title&#34; file.txt&#xA;```   &#xA;&#xA;&#xA;Here, we are appending(`a`) to the 1st line, text `title: $title`, here `$title` is the variable, so we are technically parsing the value of the variable `title`. We are editing the file `file.txt` in-place `-i` i.e. we are editing it live without creating any temp or backup files.       &#xA;&#xA;```bash&#xA;sed -n -e &#34;s/dev.to://p&#39; keys.txt&#34;&#xA;```&#xA;&#xA;Here we are essentially getting the text after a particular pattern. In this case we are searching in `keys.txt` file for the string `dev.to:` and anything after that till the end of line is returned, we can further store it in the variable and do all sorts of operation.&#xA;      &#xA;### Using `awk` for programmatic editing &#xA;&#xA;```bash&#xA;awk &#39;{print $0&#34;&#xD;&#xA;&#34;}&#39; temp.txt &gt;file.txt&#xA;```&#xA;&#xA;AWK is a command-line utility for manipulating or writing certain operations/patterns programmatically. We use this tool so as to add `4r4n` to the end of each line, the APIs can&#39;t parse the file contents directly so we have to add certain characters before the end of line and do further operations.&#xA;&#xA;```bash&#xA;cat temp.md | tr -d &#39;&#xD;&#xA;&#39; &gt; temp.txt&#xA;```   &#xA;&#xA;After we have added the `&#xD;&#xA;` characters to the end of the file, we simply can use `cat` and `tr` to merge all the lines into a single line. This is how we parse the contents to the API more safely and concisely, of course we need to parse them in a variable by reading the file.&#xA;&#xA;OK, I won&#39;t bore anyone with more BASH but that were some of the quite important commands in the script that form the backbone of the cross-posting and handling text with the APIs.&#xA;&#xA;## Conclusion&#xA;&#xA;So, we can see `crosspost.sh` is a BASH script that cross-posts markdown articles with a bit of inputs to 3 different platforms within a couple of minutes. This article was basically to demonstrate the project and its capabilities also highlighting the issues present. I hope you liked the project, please do try it and comment the feedback please. Thank you for reading, Until next time, Happy Coding :) &#xA;</content>
      <type>posts</type>
    </item>
    <item>
      <title>Django + Auth0 Quick Setup</title>
      <link>meetgor.com/djagno-auth0-script</link>
      <description></description>
      <pubDate>Tue, 28 Sep 2021 00:00:00 UTC</pubDate>
      <content>&#xA;## Introduction&#xA;&#xA;&#xA;This is a guide and a walkthrough of how to quickly set up a base Django project with Auth0 as integration for authentication and authorization. I will walk you through the Django setup and how to use and integrate the functionalities of the Auth0.  I will also discuss how why you should be using Auth0 and why I love it.&#xA;&#xA;The script takes `2:44` minutes time to do everything from scratch. From installing virtualenv in python to integrating the Auth0 application. &#xA;&#xA;Here&#39;s how the script works:&#xA;&#xA;![authodj.gif](https://cdn.hashnode.com/res/hashnode/image/upload/v1632830813802/MOvedPYdt.gif)&#xA;&#xA;### Contents&#xA;&#xA;- [What is Auth0](#what-is-auth0)&#xA;- [Why I love Auth0](#why-i-love-auth0)&#xA;- [Set up a Django Project](#set-up-a-django-project)&#xA;- [Integrate Auth0 to a Django project](#integrate-auth0-to-a-django-project)&#xA;- [Creating a BASH Script for integrating Auth0](#creating-a-bash-script-for-integrating-auth0)&#xA;     - [Appending to a file](#appending-to-a-file)&#xA;     - [Adding text before a particular line using `sed` ](#adding-text-before-a-particular-line-using-sed)&#xA;     - [Appending to a line using `sed`](#appending-to-a-line-using-sed)&#xA;- [Complete BASH Script](#complete-bash-script)&#xA;- [Conclusion](#conclusion)&#xA;&#xA;## What is Auth0&#xA;&#xA;Auth0 (`Auth zero`) is a platform that provides easy authentication and authorization for a number of platforms in various programming languages and frameworks. The easy-to-follow documentation, availability for almost all web frameworks across platforms make it a big bonus for developers. They actually make the Developer experience flawless and beginner-friendly. &#xA;&#xA;According to Auth0,&#xA;&gt; They make your login box awesome&#xA;&#xA;And how true is that they make things pretty convenient and wicked fast to integrate a smooth functional backend for authentication and authorization. Of course, there are more things they offer than just making authentication systems but it is by far what the world knows them for.&#xA;&#xA;## Why I love Auth0&#xA;&#xA;Auth0 is a generous company that provides a free tier for a limited capacity of authentication and that might be more than enough for a developer getting its feet wet in the web development (backend). &#xA;&#xA;They even provide a nice user interface out of the box for login/signup and even a dashboard ready-made, which is quite a lot of heavy lifting already done for you. Also, there is a dashboard for analyzing the number of sign-in/logins into the particular app. This provides the admin/developer of the app to get a closer look at the user registered in a day/week/months, number of active users, and so on. &#xA;&#xA;So, who would not love it? I am willing to write and use their service for some of my projects. I already have used one for the Hashnode x Auth0 Hackathon, I made [devquotes](https://github.com/Mr-Destructive/devquotes) using the authentication of Auth0 in my Django application. &#xA;&#xA;## Set up a Django Project&#xA;&#xA;If you are reading this you already know how to set up a Django project, I assume. But nevertheless, I can just include a quick introduction on how to do it. I have a script to do this. &#xA;&#xA;```bash&#xA;#!/usr/bin/env bash&#xA;&#xA;mkdir $1&#xA;cd $1&#xA;pip install virtualenv&#xA;virtualenv env&#xA;source env�in�ctivate&#xA;&#xA;pip install django&#xA;django-admin startproject $1 .&#xA;clear&#xA;```&#xA;You can check out  [Django Quick Setup Script](https://techstructiveblog.hashnode.dev/django-quick-setup-script)  for the details of this script and also a more in-depth guide of Django project setup.&#xA;&#xA;But if you want to understand the basics of the Django project setup here is a little guide about it:&#xA;&#xA;Firstly, create a virtual environment, it&#39;s not mandatory but it keeps things simple and easy for your project in correspondence to the entire OS. So in python, we have a module to create the virtual environment pretty easily,&#xA;&#xA;```shell&#xA;pip install virtualenv&#xA;```&#xA;You can use `pip3` or `pip -m`, or however you install normal python modules. This just installs the python virtual environment, we need to create one in the current folder, so for that navigate to the folder where you want to create the project and enter the following command:&#xA;&#xA;```shell&#xA;virtualenv venv&#xA;``` &#xA;&#xA;Here, `venv` can be anything like `env` just for your understanding and simplicity it&#39;s a standard name kept for the same. After this, you will see a folder of the same name i.e. `venv` or any other name you have used. This is the folder where python will keep every installation private to the local folder itself. Now, we need to activate the virtual environment, for that we can use the command :&#xA;&#xA;```bash&#xA;# for Linux/macOS :&#xA;source venv/bin/activate&#xA;```&#xA;&#xA;```batch&#xA;# for Windows:&#xA;venv\Scripts�ctivate&#xA;```&#xA;After this, your command prompt will have a `(venv)` attached to its start. This indicates you are in a virtual environment, things you do here, may it be module installation or any configuration related to python will stay in the local folder itself.&#xA;&#xA;After the virtual environment is set up and activated, you can install Django and get started with it. Firstly, install Django using pip:&#xA;&#xA;```shell&#xA;pip install django&#xA;```&#xA;After the installation is completed, you can start a Django project in the current folder using the command: &#xA;&#xA;```shell&#xA;django-admin startproject name&#xA;```&#xA;Here name can be your project name. After this, you will see one new folder and one file pop up.&#xA;Namely, the `project named` folder and `manage.py` file. So you don&#39;t have to touch the `manage.py` file but we use it in most of the commands to use the Django functionalities. &#xA;&#xA;You can now run your basic server using the command : &#xA;```shell&#xA;python manage.py runserver&#xA;```&#xA;There is a base installed/setup of the Django project. Moving on in integrating the Auth0 login functionality in our webpage.&#xA;&#xA;&#xA;## Integrate the Auth0 app in your project&#xA;&#xA;So, for integrating the Auth0 app for your web application, you need to have an Auth0 account, you can signup here. After this you can create an Auth0 application for any type of application, we have a couple of options:&#xA;&#xA;- Native Application&#xA;- Single Page Application&#xA;- Regular Web Application&#xA;- Machine to Machine Application&#xA;&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1632748408741/sUeS8AgrX.png)&#xA;&#xA;You can choose as per your needs, but mostly it would be a Regular Web application if you have a backend like Django, Nodejs, PHP, or other types of frameworks and languages. So, moving ahead we have created an application for the Django framework as a backend. Now, we have a `Settings` tab in the application dashboard, where we have different credentials for the Auth0 app to talk to our application.&#xA;&#xA;The credentials needed to be stored safely are:&#xA;- domain&#xA;- Client ID (Key)&#xA;- Client Secret&#xA;&#xA;This has to be secured for our local application which will go into production when ready. You can use several options like dotenv, environment variables, and so on when the application is being deployed but for now, let&#39;s hardcode them in our Django project. &#xA;&#xA;Now, you can follow the simple straightforward procedure to copy-paste your credentials from the  [Auth0 official documentation](https://auth0.com/docs/quickstart/webapp/django/01-login#logout). It&#39;s quite straightforward to follow the steps even for a beginner. &#xA;&#xA;After the Auth0 app has been configured following the procedure in the documentation, you need to integrate several files like dashboard and index templates into your custom templates.&#xA;&#xA;Following additional changes are also to be made if you have a user-defined app for your Django project.&#xA;&#xA; In the `auth0login` app, `view.py` file:&#xA;1. The `index` function renders the base file for your project if the user is logged in.&#xA;2. The `dashboard` function renders the baked version of your profile/dashboard of users on your app.&#xA;&#xA;You would also need to add the root URIs of your app that you will be using for testing or in production. For example, we can add `http://127.0.0.1:8000` to allow and use Auth0 in our development environment locally.&#xA;&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1632828981455/2gc4h7tTh.png)&#xA;&#xA;You also need to specify the callback URLs for your application which is `/complete/auth0` by default.&#xA;&#xA;## Creating a BASH Script for integrating Auth0&#xA;&#xA;So, we can now dive into creating the BASH Script to set up the Django x Auth0 application in minutes. The script is quite large, like 200 lines but don&#39;t worry! Its automation reduces the pain of integrating a User Authorization flawlessly. I am also thinking of adding the `cURL` command and parsing in the Client ids, keys, and secret keys, etc. &#xA;&#xA;### Appending to a file&#xA;&#xA;We can use the `cat` command to append text to a file, using the syntax as below:&#xA;&#xA;```shell&#xA;cat &lt;&lt; EOF &gt;&gt; filename&#xA;text&#xA;more text&#xA;EOF&#xA;```&#xA;Remember here EOF is just a label to stop the command and save it to the file. &#xA;&#xA;&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1632826339707/_g_RXP3NE.png)&#xA;&#xA;So, we can see that we were able to append to a file, multiple lines using the cat command.  &#xA;&#xA;We have used this concept in adding configuration and credentials to the `settings.py` or the `urls.py` files.&#xA;&#xA;### Adding text before a particular line using `sed` &#xA;&#xA;`sed` is a great command, and there is nothing you can&#39;t do with it, OK there might be exceptions. We can get write to a file directly (don&#39;t display the output) and specify the line number before which we want to append the text. We can then add the text we want and followed by the filename.&#xA;&#xA;```shell&#xA;sed -i &#39;33 i sometext here&#39; filename&#xA;```&#xA;Here, `33` is the line number in the file which we want to insert before. We have used `&#39;&#34;&#39;` to add a `&#39;` inside a `&#39;`, this might feel a bit wired but that is how it is in BASH. &#xA;&#xA;Let&#39;s say you want to add `print(&#39;Hello, World!&#39;)` to a particular line, we have to enclose `&#39;` with these `&#34;&#39;`( double and single quotes),&#xA;&#xA;```shell&#xA;sed -i &#39;2i print(&#39;&#34;&#39;Hello, World&#39;&#34;&#39;)&#39; hello.py&#xA;```&#xA;This will add the line `print(&#39;Hello World&#39;)` to the file `hello.py`&#xA;&#xA;&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1632824742835/Uj8AF07UG.png)&#xA;&#xA;### Appending to a line using sed&#xA;&#xA;We can even append text to a particular line using sed, we can use some escape characters and regex to add the text from the end of the line.&#xA;&#xA;```shell&#xA;sed -i &#39;2i s/$/ textgoes here /&#39; filename&#xA;``` &#xA;Here 2 is any number of line you want to add text to, next `i` a prompt for inserting text and then we have regex like `s/$/ /`, this will put the text enclosed in `/ /` to the end of the line as indicated by `$`.  We have the filename at its usual place as before.&#xA;&#xA;So, lets say, I want to add a comment to the second line in the previous example, I can use the following command to do it:&#xA;&#xA;```shell&#xA;sed -i &#39;2 s/$/ # another comment/&#39; hello.py&#xA;&#xA;```&#xA;&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1632825067925/0eU2mkCDI.png)&#xA;&#xA;We have used these commands to add the `include` function in the `urls.py` in the project folder.&#xA;&#xA;So those were all the operations we used for doing some automated editing for the Auth0 app integration to our Django project.&#xA; &#xA;Below is the entire script and is also uploaded on [GitHub](https://github.com/Mr-Destructive/django-auth0-quick-setup). &#xA;&#xA;## Complete BASH Script&#xA;&#xA;You can run the file by parsing the name of your project.&#xA;&#xA;```shell&#xA;bash script.sh mywebsite&#xA;```&#xA;&#xA;Wait for some 2-3 minutes, and the script will produce the Django application with the Auth0 app integrated. You will have to enter the credentials manually wherever applicable.&#xA;&#xA;&#xA;```bash&#xA;#!/usr/bin/env bash&#xA;&#xA;mkdir $1&#xA;cd $1&#xA;pip install virtualenv&#xA;virtualenv venv&#xA;source venv/Scripts/activate&#xA;&#xA;pip install django&#xA;django-admin startproject $1 .&#xA;&#xA;cat &lt;&lt; EOF &gt;&gt; requirements.txt&#xA;social-auth-app-django~=3.1 &#xA;python-jose~=3.0 &#xA;python-dotenv~=0.9&#xA;EOF&#xA;&#xA;pip install -r requirements.txt&#xA;&#xA;pip freeze &gt; requirements.txt&#xA;&#xA;python manage.py startapp auth0login&#xA;&#xA;touch auth0login/urls.py&#xA;mkdir auth0login/templates&#xA;touch auth0login/templates/index.html&#xA;touch auth0login/templates/dashboard.html&#xA;&#xA;sed -i &#39;40 i \    &#39;&#34;&#39;&#34;&#39;social_django&#39;&#34;&#39;&#34;&#39;,&#39; $1/settings.py&#xA;sed -i &#39;41 i \    &#39;&#34;&#39;&#34;&#39;auth0login&#39;&#34;&#39;&#34;&#39;,&#39; $1/settings.py&#xA;sed -i &#39;21 i \    path(&#39;&#34;&#39;&#39;&#34;&#39;, include(&#39;&#34;&#39;auth0login.urls&#39;&#34;&#39;)),&#39; $1/urls.py&#xA;sed -i &#39;17 s/$/, include/&#39; $1/urls.py &#xA;&#xA;cat &lt;&lt; EOF &gt;&gt; $1/settings.py&#xA;SOCIAL_AUTH_TRAILING_SLASH = False  # Remove trailing slash from routes&#xA;SOCIAL_AUTH_AUTH0_DOMAIN = &#39;YOUR_DOMAIN&#39;&#xA;SOCIAL_AUTH_AUTH0_KEY = &#39;YOUR_CLIENT_ID&#39;&#xA;SOCIAL_AUTH_AUTH0_SECRET = &#39;YOUR_CLIENT_SECRET&#39;&#xA;EOF&#xA;&#xA;cat &lt;&lt; EOF &gt;&gt; $1/settings.py &#xA;SOCIAL_AUTH_AUTH0_SCOPE = [&#xA;    &#39;openid&#39;,&#xA;    &#39;profile&#39;,&#xA;    &#39;email&#39;&#xA;]&#xA;EOF&#xA;&#xA;python manage.py migrate&#xA;&#xA;cat &lt;&lt; EOF &gt;&gt;auth0login/auth0backend.py&#xA;&#xA;from urllib import request&#xA;from jose import jwt&#xA;from social_core.backends.oauth import BaseOAuth2&#xA;&#xA;&#xA;class Auth0(BaseOAuth2):&#xA;    &#34;&#34;&#34;Auth0 OAuth authentication backend&#34;&#34;&#34;&#xA;    name = &#39;auth0&#39;&#xA;    SCOPE_SEPARATOR = &#39; &#39;&#xA;    ACCESS_TOKEN_METHOD = &#39;POST&#39;&#xA;    REDIRECT_STATE = False&#xA;    EXTRA_DATA = [&#xA;        (&#39;picture&#39;, &#39;picture&#39;),&#xA;        (&#39;email&#39;, &#39;email&#39;)&#xA;    ]&#xA;&#xA;    def authorization_url(self):&#xA;        return &#39;https://&#39; + self.setting(&#39;DOMAIN&#39;) + &#39;/authorize&#39;&#xA;&#xA;    def access_token_url(self):&#xA;        return &#39;https://&#39; + self.setting(&#39;DOMAIN&#39;) + &#39;/oauth/token&#39;&#xA;&#xA;    def get_user_id(self, details, response):&#xA;        &#34;&#34;&#34;Return current user id.&#34;&#34;&#34;&#xA;        return details[&#39;user_id&#39;]&#xA;&#xA;    def get_user_details(self, response):&#xA;        # Obtain JWT and the keys to validate the signature&#xA;        id_token = response.get(&#39;id_token&#39;)&#xA;        jwks = request.urlopen(&#39;https://&#39; + self.setting(&#39;DOMAIN&#39;) + &#39;/.well-known/jwks.json&#39;)&#xA;        issuer = &#39;https://&#39; + self.setting(&#39;DOMAIN&#39;) + &#39;/&#39;&#xA;        audience = self.setting(&#39;KEY&#39;)  # CLIENT_ID&#xA;        payload = jwt.decode(id_token, jwks.read(), algorithms=[&#39;RS256&#39;], audience=audience, issuer=issuer)&#xA;&#xA;        return {&#39;username&#39;: payload[&#39;nickname&#39;],&#xA;                &#39;first_name&#39;: payload[&#39;name&#39;],&#xA;                &#39;picture&#39;: payload[&#39;picture&#39;],&#xA;                &#39;user_id&#39;: payload[&#39;sub&#39;],&#xA;                &#39;email&#39;: payload[&#39;email&#39;]}&#xA;&#xA;EOF&#xA;&#xA;cat &lt;&lt; EOF &gt;&gt; $1/settings.py&#xA;&#xA;AUTHENTICATION_BACKENDS = {&#xA;    #&#39;YOUR_DJANGO_APP_NAME.auth0backend.Auth0&#39;,&#xA;    &#39;django.contrib.auth.backends.ModelBackend&#39;&#xA;}&#xA;&#xA;EOF&#xA;&#xA;cat &lt;&lt; EOF &gt;&gt; $1/settings.py&#xA;&#xA;LOGIN_URL = &#39;/login/auth0&#39;&#xA;LOGIN_REDIRECT_URL = &#39;/dashboard&#39;&#xA;EOF&#xA;&#xA;cat &gt; auth0login/views.py&lt;&lt;EOF&#xA;&#xA;from django.shortcuts import render, redirect&#xA;from django.contrib.auth.decorators import login_required&#xA;from django.contrib.auth import logout as log_out&#xA;from django.conf import settings&#xA;from django.http import HttpResponseRedirect&#xA;from urllib.parse import urlencode&#xA;import json&#xA;&#xA;def index(request):&#xA;    user = request.user&#xA;    if user.is_authenticated:&#xA;        return redirect(dashboard)&#xA;    else:&#xA;        return render(request, &#39;index.html&#39;)&#xA;&#xA;&#xA;@login_required&#xA;def dashboard(request):&#xA;    user = request.user&#xA;    auth0user = user.social_auth.get(provider=&#39;auth0&#39;)&#xA;    userdata = {&#xA;        &#39;user_id&#39;: auth0user.uid,&#xA;        &#39;name&#39;: user.first_name,&#xA;        &#39;picture&#39;: auth0user.extra_data[&#39;picture&#39;],&#xA;        &#39;email&#39;: auth0user.extra_data[&#39;email&#39;],&#xA;    }&#xA;&#xA;    return render(request, &#39;dashboard.html&#39;, {&#xA;        &#39;auth0User&#39;: auth0user,&#xA;        &#39;userdata&#39;: json.dumps(userdata, indent=4)&#xA;    })&#xA;&#xA;def logout(request):&#xA;    log_out(request)&#xA;    return_to = urlencode({&#39;returnTo&#39;: request.build_absolute_uri(&#39;/&#39;)})&#xA;    logout_url = &#39;https://%s/v2/logout?client_id=%s&amp;%s&#39; % \&#xA;                 (settings.SOCIAL_AUTH_AUTH0_DOMAIN, settings.SOCIAL_AUTH_AUTH0_KEY, return_to)&#xA;    return HttpResponseRedirect(logout_url)&#xA;&#xA;EOF&#xA;&#xA;cat &lt;&lt; EOF &gt;&gt; auth0login/templates/index.html&#xA;&#xA;&lt;div class=&#34;login-box auth0-box before&#34;&gt;&#xA;    &lt;img src=&#34;https://i.cloudup.com/StzWWrY34s.png&#34; /&gt;&#xA;    &lt;h3&gt;Auth0 Example&lt;/h3&gt;&#xA;    &lt;p&gt;Zero friction identity infrastructure, built for developers&lt;/p&gt;&#xA;    &lt;a class=&#34;btn btn-primary btn-lg btn-login btn-block&#34; href=&#34;/login/auth0&#34;&gt;Log In&lt;/a&gt;&#xA;&lt;/div&gt;&#xA;EOF&#xA;&#xA;cat &lt;&lt; EOF &gt;&gt; auth0login/templates/dashboard.html&#xA;&#xA;&lt;div class=&#34;logged-in-box auth0-box logged-in&#34;&gt;&#xA;    &lt;h1 id=&#34;logo&#34;&gt;&lt;img src=&#34;//cdn.auth0.com/samples/auth0_logo_final_blue_RGB.png&#34; /&gt;&lt;/h1&gt;&#xA;    &lt;img class=&#34;avatar&#34; src=&#34;{{ auth0User.extra_data.picture }}&#34;/&gt;&#xA;    &lt;h2&gt;Welcome {{ user.username }}&lt;/h2&gt;&#xA;    &lt;pre&gt;{{ userdata }}&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;EOF&#xA;&#xA;cat &lt;&lt; EOF &gt;&gt; auth0login/urls.py&#xA;from django.urls import path, include&#xA;from . import views&#xA;&#xA;urlpatterns = [&#xA;    path(&#39;&#39;, views.index),&#xA;    path(&#39;dashboard&#39;, views.dashboard),&#xA;    path(&#39;logout&#39;, views.logout),&#xA;    path(&#39;&#39;, include(&#39;django.contrib.auth.urls&#39;)),&#xA;    path(&#39;&#39;, include(&#39;social_django.urls&#39;)),&#xA;]&#xA;&#xA;EOF&#xA;&#xA;python manage.py makemigrations&#xA;python manage.py migrate&#xA;&#xA;```&#xA;## Conclusion&#xA;&#xA;Ok, so this was it, a quite big script but that&#39;s how automation can be. We were able to set up a Django base application with a ready app of Auth0 to extend the functionality. This was just a basic script also you can extend the functionalities like adding a curl command to fetch the credentials and make it more automated but that was not the aim of this article. &#xA;&#xA;If you had any issues using the script please let me know, I&#39;ll be happy to fix those. Thanks for reading. Happy Coding :)&#xA;</content>
      <type>posts</type>
    </item>
    <item>
      <title>Django Quick Setup Script</title>
      <link>meetgor.com/django-setup-script</link>
      <description></description>
      <pubDate>Sun, 15 Aug 2021 00:00:00 UTC</pubDate>
      <content>&#xA;## Introduction&#xA;&#xA;Once you learn something very neatly and understand it very clearly, it feels like you are wasting time doing things over and over again. Same things in setting up a Django project, you feel like you could save those typing minutes by making a script. &#xA;&#xA;In this article, we will make a script a batch script for windows and a BASH script for Linux/macOS. We will make a virtual environment using python and then install the libraries and dependencies like in this case we will install Django. You can also tinker with these scripts and install other dependencies if you want like Django rest framework, crispy forms, markdown, Redis, etc. We will also make a Django project using the positional parameter passed before running the script from the command line. &#xA;&#xA;### Python development environment&#xA;This article assumes you have a python environment setup. If you don&#39;t you must install Python from the  [official website](https://www.python.org/downloads/)  as per your operating system. Also, you should have pip installed and configured correctly. You can install pip by following the  [official documentation](https://pip.pypa.io/en/stable/)  for the specific operating systems.&#xA;&#xA;## Steps in Django Project Setup &#xA;&#xA;So, If you are already familiar with the Django project setup, you can directly use the scripts provided in the next few sections. You can also visit  [this GitHub repository](https://github.com/Mr-Destructive/django-quick-setup-script)  if you have any issues and errors.  &#xA;&#xA;If you are new to django, let me first explain the process of django project setup. &#xA;- ### Initialize a VirtualEnvironment (Recommended but not necessary)&#xA;&#xA;Virtual Environment in Python is a great way of localizing the dependencies and frameworks only in the particular folder, it allows the developer to separate things out and keep them distinct, Additionally, when deploying or sharing the repository, the other developers can install the dependencies in the requirement.txt file in their local environment flawlessly. &#xA;&#xA;So, it is always recommended to use python virtualenv when working with python frameworks or libraries. We can set it up by simple pip install and then giving it a name.&#xA;&#xA;```&#xA;pip install virtualenv&#xA;``` &#xA;&#xA;This will install the package/tool using pip. &#xA;&#xA;After that has been properly installed, we can now give it an appropriate name &#xA;```&#xA;virtualenv mytest&#xA;```&#xA;&#xA;The `virtualenv` is the command and `mytest` can be any name, generally `env` or `venv` is preferred but it should be understandable to the user.  You will now be able to see the folder inside of your current directory named as `mytest` or the name you&#39;ve given to it. &#xA;&#xA;**Windows**&#xA;&#xA;Now if you are on windows, you can activate the virtual environment by using the command :&#xA;```&#xA;mytest\Scripts�ctivate&#xA;``` &#xA;here mytest is the name of your virtual env it can be anything as per your choice. This will now activate the virtualenv which will be shown by `(mytest)` before the command prompt. &#xA;&#xA;**Linux/macOS**&#xA;&#xA;For Linux or macOS, you can use the command: &#xA;```&#xA;source mytest/Scripts/activate.sh&#xA;```&#xA;In the above command, `mytest` can be anything that you have used while creating the virtualenv. This should activate the vrtualenv and will be indicated by `(mytest)` before the prompt in the terminal. &#xA;&#xA;&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1629023409389/kEe5AVAsr.png)&#xA;From the above image, we can see that we created and activated an virtualenv in python in a folder. &#xA;So, this is the walkthrough for setting up the virtualenv for a Django project, now we will move to install Django in this environment.&#xA;&#xA;- ### Installing Django using pip&#xA;&#xA;This is quite straightforward. You can use `pip install django` or `pip3 install django` or the normal way you install a library from pip. &#xA;&#xA;- ### Creating a Django project&#xA;&#xA;To create a django project, we use the django-admin command like:&#xA;```&#xA;django-admin startproject mywebsite&#xA;```&#xA;This will create a folder called `mywebsite` or your project name anything you like. Inside the `mywebsite` folder, you will have 2 things: `manage.py` file, and `mywebsite` folder . Yes there will be another `mywebsite` folder inside your project which will have the settings, URLs and other global(project-level) configuration files. The `manage.py` file is the most important file here. You should never touch/edit this file. We use this file to carry out all the operations from running the server to managing the database. &#xA;&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1629032998253/QQ5QXf4v5.png)&#xA;&#xA;### Setup script  for Windows&#xA;&#xA;The below is a batch file for Windows Operating System. Save the file in a `.bat` extension.&#xA;&lt;iframe&#xA;  src=&#34;https://carbon.now.sh/embed?bg=rgba%28171%2C+184%2C+195%2C+1%29&amp;t=cobalt&amp;wt=none&amp;l=application%2Fx-sh&amp;ds=true&amp;dsyoff=20px&amp;dsblur=68px&amp;wc=true&amp;wa=true&amp;pv=56px&amp;ph=56px&amp;ln=false&amp;fl=1&amp;fm=Hack&amp;fs=14px&amp;lh=133%25&amp;si=false&amp;es=2x&amp;wm=false&amp;code=mkdir%2520%25251%2520%250Acd%2520%25251%250Apip%2520install%2520virtualenv%250Avirtualenv%2520env%250Acall%2520env%255CScripts%255Cactivate%250A%250Apip%2520install%2520django%250Adjango-admin%2520startproject%2520%25251%2520.%250Acls%250A&#34;&#xA;  style=&#34;width: 803px; height: 366px; border:0; transform: scale(1); overflow:hidden;&#34;&#xA;  sandbox=&#34;allow-scripts allow-same-origin&#34;&gt;&#xA;&lt;/iframe&gt;&#xA;&#xA;Make sure the file is saved in a `.bat` file and be in the folder where you would like to create the Django project. After being in the appropriate location, enter the following command:&#xA;&#xA;```&#xA;commands.bat myproj&#xA;```&#xA;Here I assume that you have named the script file as `commands.bat`, you can name it anything you like, but I like to keep this a convention. After this you don&#39;t need to do anything, everything will be handled by the script. &#xA;You can run the server using &#xA;```&#xA;python manage.py runserver&#xA;```&#xA;This will have the base django project set up on your system. The below is the live demonstration of the script, I have deliberately removed the `cls` command to show the process. It won&#39;t break the script if you add this to it. &#xA;&#xA;![djqss.gif](https://cdn.hashnode.com/res/hashnode/image/upload/v1629024613612/Zsqa54_KD.gif)&#xA;&#xA;### Setup script  for Linux/macOS&#xA;&#xA;Copy the code from the below script and save it in a file preferably called `commands.sh`, you can name it anything you want but keep the `.sh` extension after it to identify it as a shell-script.&#xA;&#xA;After that file is saved locally, you can run the script by passing the positional parameter as the name of the Django project. The command will be like:&#xA;&#xA;```&#xA;bash commands.sh myproj&#xA;```&#xA; &#xA;&lt;iframe&#xA;  src=&#34;https://carbon.now.sh/embed?bg=rgba%28171%2C+184%2C+195%2C+1%29&amp;t=blackboard&amp;wt=none&amp;l=application%2Fx-sh&amp;ds=true&amp;dsyoff=20px&amp;dsblur=68px&amp;wc=true&amp;wa=true&amp;pv=56px&amp;ph=56px&amp;ln=false&amp;fl=1&amp;fm=Hack&amp;fs=14px&amp;lh=133%25&amp;si=false&amp;es=2x&amp;wm=false&amp;code=%2523%21%252Fusr%252Fbin%252Fenv%2520bash%250A%250Amkdir%2520%25241%250Acd%2520%25241%250Apip%2520install%2520virtualenv%250Avirtualenv%2520env%250Asource%2520env%255Cbin%255Cactivate%250A%250Apip%2520install%2520django%250Adjango-admin%2520startproject%2520%25241%2520.%250Aclear&#34;&#xA;  style=&#34;width: 803px; height: 384px; border:0; transform: scale(1); overflow:hidden;&#34;&#xA;  sandbox=&#34;allow-scripts allow-same-origin&#34;&gt;&#xA;&lt;/iframe&gt;&#xA;&#xA;From the output of the script, you will have created a Django project inside a virtual environment. We can manually activate the virtual environment. You can experiment it within your system as it can be a lot more customizable. This is just bare bone script to start a Django project but you can add your own things into it.&#xA;&#xA;## Conclusion&#xA;Thus, from this little article, you can get a bit lazier in initializing a bare-bone Django project. We were able to understand the structure of the Django project and how to set up a virtual environment powered by Python. &#xA;&#xA;After understanding those concepts we then moved on to making a script namely a batch file and a shell script to automate the initialization of the Django project. I hope it might have helped in some or another way, Thanks for reading till here. Happy Coding :)&#xA;</content>
      <type>posts</type>
    </item>
    <item>
      <title>Scrapping the meaning of a word from dictionary.com using BASH script.</title>
      <link>meetgor.com/bash-dictionary-scrapper</link>
      <description></description>
      <pubDate>Tue, 27 Jul 2021 00:00:00 UTC</pubDate>
      <content>&#xA;## Introduction&#xA;&#xA;Web Scraping is quite an interesting and powerful tool or skill to have in a Programmer&#39;s toolkit.  It helps in analyzing data and getting some information in various formats. Web Scraping is a process in which a user fetches a website&#39;s content using some pattern in those HTML tags and the desired content to be fetched or scraped.&#xA;&#xA;For this article, we aim to fetch the meaning of a word entered by the user from the dictionary.com website. We need to print just the meaning of the word from the HTML tags in it. We must have a good understanding of HTML and some basic Linux tools such as cURL, grep, sed, and others for doing all of these. &#xA;&#xA;![Inspecting the Target Website](https://cdn.hashnode.com/res/hashnode/image/upload/v1625737499658/FGLusWSII.png)&#xA;&#xA;## Inspecting the Target Website&#xA;&#xA;To begin with, scrapping the website, first, it is absolutely important to inspect the website and view its source code. For that, we can make use of Inspect tool in our Browsers. Just Right-click on the website you are viewing or the website for scraping, a list of options appears in front of you. You have to select Inspect option( also Shift + Ctrl + I), this will open a side window with a plethora of options. You simply have to select Elements from the top of the menus. The code that you will see is the source code of the website. No, don&#39;t think you can change the content of the website from here :)&#xA;&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1625737510444/KonUrEpcq-.png)&#xA;Inspect Tool in the browser.&#xA;&#xA;Now we have to analyze the website with the content which we want to scrape. You can go on for clicking the `select the element in the page to inspect it` option or icon in the top left-hand side corner. This will allow you to inspect the particular element that you selected on the webpage. You can now see the element tag, id, class, and other attributes required to fetch the element&#39;s content.&#xA;&#xA;&#xA;## Selecting the particular element from the website to view the source code.&#xA;&#xA;&#xA;### Accessing the website from the Command line/terminal&#xA;&#xA;Now the website structure is being understood we can actually move to scrap it. For that, we need to have the web site&#39;s content on our local machine. First of all, we need to access the website from elsewhere not from the browser, because you cannot copy-paste content from there. So let&#39;s use Command Line here. We have a popular tool known as `cURL`, which stands for client URL. The tool fetches the contents of the provided URL. It also has several parameters or arguments that can be used to modify its output. We can use the command&#xA;&#xA;```&#xA;curl -o meaning.txt https://www.dictionary.com/browse/computer#&#xA;```&#xA;&#xA;The above command fetches the HTML page for the word Computer, it could be any word you might be searching for.&#xA;&#xA;### Understanding the Website Structure.&#xA;&#xA;Here comes the time to explain the structure of dictionary.com. When you search a word on the website(dictionary.com), you are routed to `/browse` which then fetches the word for you and defaults you to the `/browse/word#` (the word can be any word you searched). The curl command dumps the output in the `meaning.txt` or any specified file. If you see the contents of the file, it is the same as on the web.  So we are going to store the meaning of the searched word in the meaning.txt file, you can customize the name and command however you like.&#xA;&#xA;Voila! you successfully scraped a webpage. Now the next target is to filter the webpage content.&#xA;&#xA;### Filtering Content from Website local file&#xA;&#xA;Now we have the content of the webpage on our local machine, we need to search or filter out the useful content and remove the unwanted tags and elements. For that, we can use commands such as `grep` and `sed`. &#xA;&#xA;### Finding Tags to Extract content.&#xA;&#xA;We need to find patterns and similarities in the tags that contain the text of the meaning of the specified word. From the analysis of the webpage, we see that the element `&lt;span class=&#34;one-click-content css-nnyc96 e1q3nk1v1&#34;&gt;` contains the actual meaning. We just need the basic meaning, we may not need examples and long lengthy definitions on our Terminal, So we will go with filtering out the span tag with a class called `one-click-content css-nnyc96 e1q3nk1v1`. To do that we can use the grep command, which can print the text or line matching the specified expression or text. Here we need the span element with the particular class name so we will use regular expressions to find it more effectively.&#xA;&#xA;```shell&#xA;grep -oP &#39;(?&lt;=&lt;span class=&#34;one-click-content css-nnyc96 e1q3nk1v1&#34;&gt;).*?(?=&lt;/span&gt;)&#39; meaning.txt &gt;temp.txt &#xA;```&#xA;&#xA;### Using GREP command to filter.&#xA;&#xA;The above command will search and return only lines that are contained in the span tags with that particular class name from the meaning.txt file which we appended to fill the webpage&#39;s source code. The `-oP` are the arguments that return Only the matching cases and `-P` the coming expression is a Perl Regex. The command will return everything in between those tags. Finally, we are storing the result or output in `temp.txt`. &#xA;&#xA;Now, if you think we are done, then it&#39;s wrong, the webpage can have internal or external links embedded inside of the elements as well, so we need to again filter out the HTML tags from the `temp.txt` file. For that, we will introduce another tool to filter text called `sed` or Stream editor. This tool allows us to filter the stream field and print or store the outcome. The following code will remove the HTML tags from the scrapped text.&#xA;&#xA;### Using SED command to remove embedded &#xA;&#xA;```shell&#xA; sed -i &#39;s/&lt;[^&gt;]*&gt;//g&#39; temp.txt &gt;meaning.txt&#xA;```&#xA;The above command filters the text and removes the HTML tags from the `temp.txt `file using regular expressions. The `-i` command allows us to store the output in a file `meaning.txt`.  We have used Regex to remove `&lt;&gt;` tags from the file and hence anything in between these is also removed and we get the only pure text but it may also contain special characters and symbols. To remove that we&#39;ll again use `grep` and filter the fine meaning in our file.&#xA;&#xA;### Removing Special Characters from the Content using GREP commands.&#xA;```shell&#xA; grep -v &#39;^\s*$\|^\s*\#&#39; temp.txt &gt;meaning.txt&#xA;```&#xA;&#xA;Now from the above command removes the special characters such as `$,#`, and others from the temp.txt file. We finally store everything filtered in the meaning.txt file. If you understood till here, the next concrete step will be super easy for you, as we will assemble everything here in a shell script.&#xA;&#xA;## Making the Shell Script&#xA;&#xA;```bash&#xA;#!/bin/bash&#xA;&#xA;read -p &#34;Enter the word to find meaning : &#34; word&#xA;output=&#34;meaning.txt&#34;&#xA;url=&#34;https://www.dictionary.com/browse/$word#&#34;&#xA;&#xA;curl -o $output $url &#xA;clear&#xA;grep -oP &#39;(?&lt;=&lt;span class=&#34;one-click-content css-nnyc96 e1q3nk1v1&#34;&gt;).*?(?=&lt;/span&gt;)&#39; $output &gt;temp.txt &#xA;&#xA;sed -i &#39;s/&lt;[^&gt;]*&gt;//g&#39; temp.txt &gt;$output&#xA;grep -v &#39;^\s*$\|^\s*\#&#39; temp.txt &gt;$output&#xA;echo &#34;$word&#34;&#xA;while read meaning &#xA;do&#xA;&#x9;echo $meaning&#xA;done &lt; $output&#xA;```&#xA;&#xA;We can clearly see most of the commands are the same, but some have been modified to avoid repetition and automation. Firstly, I have taken user input of word from the user and stored it in with an appropriate variable name.  Next, I have created another variable to store the file name in which we are going to store the meaning of the word, Also a variable for the URL of the website we are searching for. We have used a variable to access the required URL. Then we invoke `cURL` to the file which we want to store using the variable we created and the URL variable So creating variables makes our script quite easy to manage and also it improves the readability of the script. &#xA;&#xA;## Updating cURL command&#xA;&#xA;We can also update the curl command by adding `&#34;&amp;&gt; /dev/null&#34;` this will dump the curl output of network analysis. So we will only get the output of the meaning.txt file.  It is optional to add the following into your code as it depends on the operating system so we can optionally use clear command to wipe out the curl output.&#xA;&#xA;## Printing the output file line by line.&#xA;&#xA;To print the meaning in the output file, we need to print each line separately as the meanings are distinct. Therefore, we will use a while loop with the output file and echo the line variable we have used as the loop iterator.&#xA;&#xA;## Script Screenshots:&#xA;&#xA;&#xA;![dict.gif](https://cdn.hashnode.com/res/hashnode/image/upload/v1627366344193/We_heehuL.gif)&#xA;&#xA;&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1627365131696/YH8Vaqoh_.png)&#xA;&#xA;&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1627365274090/D9IETfRAh.png)&#xA;&#xA;&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1627365304653/A9AXuHDH8.png)&#xA; &#xA;&#xA;## Output Conclusion&#xA;&#xA;From the above output, we have scrapped the meaning of the word `Mathematics`, `code`, and `python`.  It works only for the words which are on the dictionary.com website. We have successfully made a scrapper that scraps the meaning of the input word from the dictionary.com website, &#xA;&#xA;## Appropriate use of Web-Scrapping.&#xA;&#xA;We must be careful and not scrape any website without reading its privacy policy. If they allow scraping from their website, then only you should scrape the content and not use it for any monetization of the content. This was just used for demonstrating some idea about web scrapping using BASH and just meant for teaching purposes.&#xA;&#xA;Therefore, it is quite easy to scrape the website&#39;s content especially if you find any patterns in the code structure. We were able to make a script that can print the meaning of the input word from the base of the website dictionary.com.&#xA;&#xA;We can see how Bash can be powerful in terms of web scrapping. I hope you found this interesting and inspiring. Thank you for reading. Happy Coding :)&#xA;</content>
      <type>posts</type>
    </item>
    <item>
      <title>Cryptocurrency Price Scrapping using BASH and Coingecko API</title>
      <link>meetgor.com/bash-crypto-scrapper</link>
      <description></description>
      <pubDate>Thu, 15 Jul 2021 00:00:00 UTC</pubDate>
      <content>&#xA;## Introduction&#xA;Cryptocurrency is in such a hype that it is attracting even nerds and terminal fanboys, it is quite comfortable for such people to view the price inside of their terminal, also for normal people to learn about how to interact with an API from the local machine. We are gonna make a script about 20 lines in BASH to extract data from the  [coingecko cryptocurrency API](https://www.coingecko.com/en/api#explore-api) and some tools such as grep and sed. That being said let&#39;s start scripting.&#xA;&#xA;&#xA;![crypsh.gif](https://cdn.hashnode.com/res/hashnode/image/upload/v1626354050031/0BRlM7tfs.gif)&#xA;&#xA;This is how the script will work like. It is not a fancy script just some basic commands to extract data from the API.&#xA;&#xA;## Getting familiar with the API &#xA;This is quite an important step as this will decide what type of data we will get from it.  So head out to  [coingecko cryptocurrency API](https://www.coingecko.com/en/api#explore-api) and start exploring some things yourselves. I am gonna cover everything you need for the script but just for your knowledge and if you are really into crypto. &#xA;&#xA;![coing.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1626336264054/dFqhnBjFl.png)&#xA;&#xA;Hopefully, you should see the following screen and after clicking on &#34;Get Started&#34;, you will see a list of the API endpoints. After playing with it for several hours, I found the perfect and precise endpoint to achieve our target. Many o them work well but the problem with many of them was the precision of the price, there it could not show a reliable price for some low-valued coin/tokens. There are tons of options to choose from, but every option has its own advantage and disadvantage. &#xA;&#xA;Based on my tiny experience, the best fit for the required task will be the &#34;Get historical market data to include price, market cap, and 24h volume (granularity auto)&#34; option in the coin section. It will give the price with very nice precision and also in any national currency as well. So when you find the option, which looks like this:&#xA;&#xA;![coing.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1626338409604/TPxpUAJ91.png)&#xA;&#xA;If you click on that option you will get a button to **&#34;Try it out&#34;**, just click on it and now you can parse data to the API and respond with the JSON response file like the text below as output. &#xA;&#xA;![coing.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1626340029764/-hVg5t0iv.png)&#xA;&#xA;### Filling in the coin id&#xA;You need the **id**which is the code of the cryptocurrency on coingecko so a few ids of famous cryptocurrencies are: `bitcoin`, `ethereum`, `dogecoin`, `shiba-inu`, `basic-attention-token`, and if you want more coins you can check the coingecko API coins list  [here](https://api.coingecko.com/api/v3/coins/list) and now you can search using the shortcut F3 and type the name of the coin you require. &#xA;&#xA;### Filling in the currency &#xA;We need a currency to display the price of the selected coin in terms of a particular currency or its equivalent price in the currency. Every national currency has a code attached to it, for example, USD is the code for US Dollar, INR for Indian Rupee, EUR for Euro, AUD for Australian Dollar, and so on. You can find the list [here](https://www.iban.com/currency-codes).&#xA;&#xA;### The number of days&#xA;We also need the number of days to indicate the price of the coin before the provided day, but we want today&#39;s and latest price, so we can enter the number of days as 0. You can get the price as your wish but we want the current price so we are using 0. &#xA;&#xA;So your request should look somewhat like this, just for particular coin pair:&#xA;&#xA;![coing.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1626340121389/YkRdtMm-o.png)&#xA;&#xA;After filling in with your favorite coin-currency pair, you can now click on **&#34;Execute&#34;**. You will get a list of prices, volume, market cap, and all of that stuff. It should look somewhat like this:&#xA;&#xA;![coing.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1626340386948/QepcJHtUV.png)&#xA;&#xA;If you look carefully and are aware of the current price, the second item in the prices object is the actual price of ethereum at some point in time. We need to extract that using tools and utilities in BASH. They have also provided a cURL command to fetch the API, how nice of Coingecko :)&#xA;&#xA;So, that was the introduction to the Coingecko API, you can now explore various endpoints and what they respond to, and what are inputs they take. Many of them do not give precise enough price, so check out that as well. &#xA;&#xA;&#xA;## Fetching data from the API &#xA;&#xA;Now, we&#39;ll finally start coding. Firstly we&#39;ll need input from the user, the coin-id, currency code, and optionally the number of days. We will read the input by using the read command and providing the prompt argument. &#xA;```bash&#xA;#!/bin/bash&#xA;&#xA;read -p &#34;Enter the coin name: &#34; coin&#xA;read -p &#34;Enter your national currency: &#34; crncy&#xA;days=0&#xA;#read -p &#34;Enter the number of days before today to get its price: &#34; days&#xA;&#xA;```&#xA;I am not inputting the number of days before the equivalent price as it&#39;s not our mission, but if have commented on the part if you want to get the price before some days. The day value is hardcoded to 0 meaning the current day. &#xA;&#xA;Now we need the golden piece of this script, the cURL command. The command is just pre-written for us XD. But hey we need to modify it a bit. We need to store the output of the cURL command in a fie for modifying it further. We can use piping the command and avoid using files but that would make the command quite big. So, I just use the files to handle and trim the output according to what I need. &#xA;&#xA;This is the default command that coingecko gave us:&#xA;```bash&#xA;#!/bin/bash&#xA;curl -X &#39;GET&#39; \&#xA;  &#39;https://api.coingecko.com/api/v3/coins/ethereum/market_chart?vs_currency=usd&amp;days=0&#39; \&#xA;  -H &#39;accept: application/json&#39;&#xA;```&#xA;We send a GET request to the API endpoint with the provide URL and we accept the response in the form of JSON. The -X is for providing the option of either GET, POST, or any other API interaction code. But this is a REST API and we do not want to mess up the database by posting, deleting, or updating anything just to GET the data from the API. We use -H to pass the URL to the head and the type of response in this case JSON. &#xA;&#xA;We&#39;ll change the default command to this, &#xA;```bash&#xA;curl -o temp.json -X &#39;GET&#39; \&#xA;  &#39;https://api.coingecko.com/api/v3/coins/&#39;$coin&#39;/market_chart?vs_currency=&#39;$crncy&#39;&amp;days=&#39;$days&#39;&#39; \&#xA;  -H &#39;accept: application/json&#39; &amp;&gt; /dev/null&#xA;```&#xA;We need to modify the URL a bit to make it dynamic. The ethereum or any coin name should be dynamic, the currency should be dynamic, so we will use the variables created before to use now. We will use `&#39;$variable&#39;` in between the URL to embed the variable value in it. We change the ethereum or any coin name with `&#39;$coin&#39;` and the currency name with `&#39;$crncy&#39;` and the same for the days as well. We have to store the output in the temp.json file, we use -o to output the result in the specified file in the cURL command. It&#39;s optional to add `&amp;&gt; /dev/null` because it just flushes the output of cURL, it looks neater if we add it. &#xA;&#xA;And that is it, we have obtained the JSON response and stored it in a file, we have the access to the data and we just need to edit the file.&#xA;&#xA;&#xA;## Editing the response JSON file&#xA;&#xA;Now we start the actual editing and pattern finding in BASH. We have a plethora of tools to use like grep, sed, awk, and others, but I&#39;ll use only grep to keep things simple. Firstly we need to see the output( JSON file) again. &#xA;&#xA;&#xA;![JSON file response](https://cdn.hashnode.com/res/hashnode/image/upload/v1626345122090/ERfxLQPX-.png)&#xA;&#xA;But the file stored locally has everything in a single line, like this:&#xA;&#xA;&#xA;![coing.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1626349631809/B0y8F9ruE.png)&#xA;&#xA;So, we just need the numbers between `,` and `]],&#34;market_caps&#34;` right? &#xA;&#xA;OR&#xA;&#xA;The text between `,` and `]],&#34;m`.&#xA;&#xA;It is quite simple to extract the required value, we will use grep and Pearl Regular Expression. &#xA;```bash&#xA;grep -o -P &#39;(?&lt;=,).*(?=]],&#34;m)&#39; temp.json &gt; price.txt&#xA;&#xA;```&#xA;We are finding anything between the `,` and `]],&#34;m` from the temp.json file and storing the output in the price.txt file.  As simple to use and we have the current price of the coin in terms of the provided currency in the file price.txt.&#xA;&#xA;Now we have obtained the result in a crystal clear way, we need to store the price in a variable just for further usage and simplicity.&#xA;We&#39;ll use a while loop that iterates over the file until it is End of the File. We&#39;ll store the value in the variable in the following way:&#xA;```bash&#xA;while read val&#xA;do&#xA;&#x9;p=$val&#xA;done &lt; price.txt&#xA;```&#xA;The value in the `p` variable. But we are not done yet, because if we see some values of certain coins which have quite low value, it displays in the scientific format. We&#39;ll tackle this in the next section.&#xA;&#xA;## Converting the price from scientific notation to decimal&#xA;&#xA;If you try to print the values of coins with pretty low value like `shiba-inu` or `baby-doge-coin` or any other coin with less value then a penny. The value is expressed in scientific notation i.e like `1.998e-5` i.e `0.00001998`&#xA;&#xA;![coing.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1626351434484/3GeTI-kn0.png)&#xA;&#xA;This is not good-looking, is it? &#xA;```bash&#xA;price=`printf &#34;%.15f&#34; $p`&#xA;```&#xA;The above command is quite similar to the C language. We are printing the value in the `p` variable with a precision of 15 decimal values, that is enough for any serious small value coin.&#xA;&#xA;![coing.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1626351561755/uPyHXMhd7.png)&#xA;&#xA;Now that was much better. That is it! How simple was that. Really BASH has some powerful commands and tools.&#xA;&#xA;## Printing the price &#xA;&#xA;Finally, we need to print the output, and to keep it simple, we can print using the echo command.&#xA;```bash&#xA;echo &#34;The value of $coin in $crncy is = $price&#34;&#xA;```&#xA;&#xA;![coing.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1626353654753/ajVMws8d6.png)&#xA;&#xA;&#xA;## Script&#xA;```bash&#xA;#!/bin/bash&#xA;&#xA;read -p &#34;Enter the coin name : &#34; coin&#xA;read -p &#34;Enter your national currency : &#34; crncy&#xA;days=0&#xA;#read -p &#34;Enter the number of days past today: &#34; days&#xA;touch temp.json price.txt&#xA;&#xA;curl -o temp.json -X &#39;GET&#39; \&#xA;  &#39;https://api.coingecko.com/api/v3/coins/&#39;$coin&#39;/market_chart?vs_currency=&#39;$crncy&#39;&amp;days=&#39;$days&#39;&#39; \&#xA;  -H &#39;accept: application/json&#39; &amp;&gt; /dev/null&#xA;&#xA;grep -o -P &#39;(?&lt;=,).*(?=]],&#34;m)&#39; temp.json &gt; price.txt&#xA;&#xA;while read val&#xA;do&#xA;&#x9;p=$val&#xA;done &lt; price.txt&#xA;&#xA;price=`printf &#34;%.15f&#34; $p`&#xA;&#xA;echo &#34;The value of $coin in $crncy is = $price&#34;&#xA;rm temp.json&#xA;&#xA;```&#xA;&#xA;That was it, I hope you liked it and learned something along with me. BASH truly has the potential to do a whole lot of stuff. This was just one of the many examples where we can do some data gathering or scraping from the web using various tools and utilities. Thank you for listening to me. Happy Coding:) &#xA;</content>
      <type>posts</type>
    </item>
    <item>
      <title>BASH Scripting Guide - PART - 3</title>
      <link>meetgor.com/bash-guide-p3</link>
      <description></description>
      <pubDate>Mon, 12 Jul 2021 00:00:00 UTC</pubDate>
      <content>&#xA;&#xA;Bash or shell won&#39;t be much popular and powerful if they didn&#39;t have some tools and utilities baked in. But even further they are supported natively in Bash, which just makes every task and challenge quite hassle-free to deal with. In this part of the series, I&#39;ll try to cover an overview of some quite powerful and robust tools and utilities in Bash(shell in general) and also some of the advanced topics like dictionaries and positional parameters. Enough talk let&#39;s dive in.&#xA;&#xA;The topics to be covered in this part include the following:&#xA;&#xA;- Hash tables/dictionaries in BASH&#xA;- Positional parameters&#xA;- Aliases in BASH&#xA;- Some Tools and utilities&#xA;    - grep/sed/awk&#xA;    - cat/tac/head/tail&#xA;    - cURL&#xA;    - find&#xA;    - bc&#xA;    - wc&#xA;&#xA;&#xA;## Bash dictionaries&#xA;Bash dictionaries or hash tables are just like any other hash tables or keymaps in other programming languages. Bash dictionaries are quite similar to arrays but they have a key instead of the index(0,1,2...) and a value just like arrays. This can be quite useful for storing passwords with emails or usernames or any other way in which a value can be accessed only via a unique key. &#xA;&#xA;To declare a dictionary/ hash table, we can simply write `declare -A name`, this will declare an empty hash map for us. Further, we can populate the hash map with keys and values using the same syntax as of array just instead of numbers we can also have strings. &#xA;&#xA;```bash&#xA;#!/bin/bash&#xA;&#xA;declare -A fruits&#xA;fruits[&#34;apple&#34;]=&#34;red&#34;&#xA;fruits[&#34;mango&#34;]=&#34;yellow&#34;&#xA;fruits[&#34;grapes&#34;]=&#34;green&#34;&#xA;&#xA;read -p &#34;Enter the name of fruit : &#34; name &#xA;echo &#34;The fruit is $name and its color is ${fruits[$name]} &#34;&#xA;&#xA;```&#xA;&#xA;![possh.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1626167875237/A2TxYPNoS.png)&#xA;&#xA;The above example depicts a way to declare, define and access the key values in a dictionary. The example may look silly but you get the idea. We can also access every key or value using the `@` variable and access the number of key-value pairs using the `#` variable just like an array. &#xA;```bash&#xA;#!/bin/bash&#xA;&#xA;declare -A fruits&#xA;fruits[&#34;apple&#34;]=&#34;red&#34;&#xA;fruits[&#34;mango&#34;]=&#34;yellow&#34;&#xA;fruits[&#34;grapes&#34;]=&#34;green&#34;&#xA;&#xA;for i in &#34;${!fruits[@]}&#34;;&#xA;do&#xA;&#x9;echo &#34;$i : ${fruits[$i]}&#34;&#xA;done&#xA;&#xA;echo &#34;There are ${#fruits[@]} key-value pairs.&#34;&#xA;```&#xA;&#xA;![possh.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1626171398570/14jJl2eFs.png)&#xA;&#xA;OK, this is very tricky they are the same variables but used slightly differently. Firstly in the range-based for loop `${!fruits[@]}`, focus on the `!` before the hash table name, this will expand(depict) the hash map&#39;s keys. This is used to access every key from the hash table and we can also see `#` at the beginning of the hash map name as it is used to represent the entire hash map further in the `{#fruits[@]}` we can also use `{#fruits[*]}`.  Inside the for loop, `i` will be the key, and `{fruits[$i]}` will be the value for that `i` th key.&#xA;&#xA;Also, you can notice the bash interpreter automatically arranges the map in the alphabetical order of the values and not keys. This is quite a neat little feature that can come in handy a lot of times.&#xA;&#xA;If you want to delete or add any key-value pairs we can do that by the following commands:&#xA;```bash&#xA;#!/bin/bash&#xA;&#xA;declare -A fruits&#xA;fruits[&#34;apple&#34;]=&#34;red&#34;&#xA;fruits[&#34;mango&#34;]=&#34;yellow&#34;&#xA;fruits[&#34;grapes&#34;]=&#34;green&#34;&#xA;&#xA;for i in &#34;${!fruits[@]}&#34;;&#xA;do&#xA;&#x9;echo &#34;$i : ${fruits[$i]}&#34;&#xA;done&#xA;echo &#34;There are ${#fruits[@]} key-value pairs.&#34;&#xA;&#xA;unset fruits[&#34;mango&#34;] &#xA;echo &#34;There are ${#fruits[@]} key-value pairs.&#34;&#xA;fruits[&#34;strawberry&#34;]=&#34;pink&#34;&#xA;&#xA;for i in &#34;${!fruits[@]}&#34;;&#xA;do&#xA;&#x9;echo &#34;$i : ${fruits[$i]}&#34;&#xA;done&#xA;echo &#34;There are ${#fruits[@]} key-value pairs.&#34;&#xA;&#xA;```&#xA;&#xA;![possh.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1626172120966/yCeXpaM9w.png)&#xA;&#xA;The above code example is a bit complex but easy enough to understand. We can delete the key-value pair using the unset command and pass in the key along with the hash map name. We can create a key-value pair by simple command as depicted in the above example. This was a basic overview of hash maps/dictionaries in BASH.&#xA;&#xA;##  Positional parameters&#xA;&#xA;We often use user input from within the script but there is another way to pass in parameters outside of the script using positional parameters. It basically allows us to pass in arguments or parameters from the command prompt/ shell and inside of the script, we can access them via Positional Parameters ( $1, $2, $3....$9, ${10} and so on).&#xA;&#xA;```bash&#xA;#!/bin/bash&#xA;&#xA;echo &#34;first parameter : &#34; $1&#xA;echo &#34;second parameter : &#34; $2&#xA;echo &#34;eleventh parameter : &#34; ${11}&#xA;&#xA;```&#xA;![possh.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1626159559317/XSyVwkC9U.png)&#xA;&#xA;You can see from the above script we have passed the parameters from the command line just after typing the filename. The positional parameter $0 is the file name and from 1 onwards the parameters are optional to run if only your script needs any parameters or input to work with. The numbers are just random and just used for demonstration. The 11th parameter or double-digit parameter starting from 10 onwards, you need to encapsulate the number in {curly braces}`${number}` because it won&#39;t interpret `$10` or any other number as just `$1` and print 0. &#xA;&#xA;So we can pass a list of parameters that should be space-separated. We can pass any relevant information such as a string, number, or file names as well. &#xA;&#xA;If we want to access all the parameters passed to the script, we can use `@` variable. You may know this symbol from the array section of part-II, it is used to access every element in the array. But here it is used to access every parameter passed to the script just behaving like a list of values.&#xA;&#xA;```bash&#xA;#!/bin/bash&#xA;&#xA;echo &#34;The parameters passed are: &#34; $@&#xA;&#xA;```&#xA;&#xA;![possh.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1626160205206/eH6BD1r_Yu.png)&#xA; &#xA;To get the number of the parameters passed to the script, we can use `#` variable. This is also a variable used in the array section for accessing the number of elements in the array, in this case, the number of parameters in the list.&#xA;&#xA;```bash&#xA;#!/bin/bash&#xA;&#xA;echo &#34;The parameters passed are: &#34; $#&#xA;&#xA;```&#xA;![possh.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1626160630991/jVvJqtCqs.png)&#xA;&#xA;Positional parameters allow to not take explicit input from the user from the script. This might not be used for the simple scripts but for administration purposes for the admins and users who know what does the script needs and it allows them to pass in arguments without designing the input system.&#xA;&#xA;&#xA;## Bash aliases&#xA;&#xA;Bash aliases are a great way of reducing the command length and making it much easier to type and work with the scripts or any development-related work. Alias is a file called bash_aliases inside the .bashrc folder that contains our shortcut commands, it has a particular order to map certain commands with others. &#xA;&#xA;Let&#39;s see what is an alias first and then we&#39;ll see how to set it up.&#xA;```bash&#xA;alias cdc=&#39;cd C:/Users/acer/Desktop/New\ folder/Code/&#39;&#xA;```&#xA;This will make it viable to just type cdc and I will be in this directory instead of printing all of the jargon. The command we need to use to replace the big command is `cdc`. The right command is the variable assigned the command and the left or its value is the command to be replaced with it.&#xA;&#xA;![shalias.gif](https://cdn.hashnode.com/res/hashnode/image/upload/v1626163036098/lDwlSdiry.gif)&#xA;&#xA;This command will definitely defer on your machine and OS as the filesystems are different in each major operating system. We can quickly make other such alias or shortcuts so to speak for making the development process faster and efficient. &#xA;&#xA;Now let us see how we set up this environment for bash alias, it&#39;s quite straightforward. You need to create a hidden file named &#34;bashrc&#34; i.e the file name will be `.bashrc`. This file has to be in the root directory (the folder to which bash defaults). I do not mean the `root` directory in Linux but the repository in which your bash interpreter opens. Once you have created the file put any alias in the file and source the file using the command:&#xA;```bash&#xA;source .bashrc&#xA;```&#xA;And that would do the trick, you can now test your macro or shortcut by opening a new instance of the terminal. If this doesn&#39;t work for you, then you can check  [this article](https://opensource.com/article/19/7/bash-aliases)  for a broader understanding of the setup.&#xA;&#xA;## Bash tools &amp; utilities  &#xA;&#xA;What would you call BASH without grep or sed man! It&#39;s a sad life:( BASH comes with some absolutely powerful and handy tools and utilities such as grep, sed, awk, at, wc, find, tar, gzip, which, make, ping, cURL, wget, ssh, .... my words there is an unstoppable long list. Really they are quite important and lay the foundation for some quite complex tasks. Some web servers can become redundant if some of the tools went missing. Let us find why they are so powerful.&#xA;&#xA;### grep&#xA;GREP or global regular expression print is a tool or command that can find patterns using regular expressions in files/strings or any other piece of data. It&#39;s not just printing or searching for the text, besides all that it can also edit the file and store the output in the desired file or any variable by proving some arguments to it. Grep supports Pearl&#39;s regular expression as well. There is a lot of customization options and arguments available in grep that can just do anything. It becomes an irreplaceable tool for some complex tasks. &#xA;&#xA;![possh.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1626179054053/9ttkV-MZZ.png)&#xA;&#xA;The above code finds the pattern &#34;more text&#34; in the file specified and prints the line to the screen, but we can modify the output we want, extract the output in a file and do all kinds of wizardry with this tool. This is just a basic, to get started example but trust me it&#39;s more than you think, this tool is used widely for web scrapping and pattern matching in quite a lot of use cases.&#xA;&#xA;&#xA;### sed&#xA;SED or stream editor is another beast in BASH&#39;s toolkit, this is just a flawless tool. No words for this. This is a great tool but still underrated. This can actually edit the text inside the terminal, no graphical environment, no interface at all just commands, but it can do what a huge text editor can&#39;t! Save time, just edit text without opening anything except a terminal, becomes unbeatable in large files. This is surely a tiny little application that can skyrocket the efficiency development process. &#xA;&#xA;![possh.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1626179410079/BkvdAqkfDS.png)&#xA;&#xA;The above example replaces the word `more` with `less` using the sed command if you type 3g or nth line preceded by g, you will replace the word on the nth line only. In this case, only`g` will replace every occurrence of the word.&#xA;This is again a basic example of a sed command, its more if you go deeper, its more than a tool, its kind of a text-editor for wizards ;) &#xA;&#xA;### awk&#xA;awk or Aho, Weinberger, and Kernighan XD are the names of the developers of this application. This is another mind-blowing tool that can programmatically do a lot of stuff. This is like a programming language to a whole new level that can extrapolate and extract data from files and other forms of data. This is quite a great option if you want to quite neatly do something. It has great support libraries and functions that can even perform complex mathematical and scientific operations.&#xA;&#xA;![possh.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1626180322400/hWkEVhPl_.png)&#xA;&#xA;These are the topics for separate articles because it is insufficient to explain everything at once.&#xA;&#xA;### cat / tac / head / tail&#xA;&#xA;CAT or concatenate is a tool used for printing out files, create files, sorting the contents of files, editing files, and a plethora of stuff. This command is generally used for printing the file but there is more to it like creating a file directly in the terminal, merging two files, and a ton of other operations. &#xA;&#xA;TAC or reverse of CAT is a tool used for everything that CAT can do but in reverse:) This is a wired tool but still quite useful sometimes.&#xA;&#xA;Head is a tool that will print or edit the text in the first 10 lines of the file, it can be used to extrapolate multiple files with similar content. &#xA;Tail is a tool that will print or edit the text in the last 10 lines of the file, it can be used just like head but for the last few lines.&#xA;&#xA;![possh.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1626180451092/Z5VUpIxCm.png)&#xA;&#xA;It turns out, you can not only print the first or last 10 lines but n lines by passing the -n as an argument, there is a ton of stuff to discover, this just drives me crazy.&#xA;&#xA;### cURL&#xA;cURL or client URL is a tool that can be used to transfer data via various network protocols. You might not believe but it is used in cars, televisions, routers, and other embedded systems for exchanging relevant data via appropriate protocols. &#xA;&#xA;![possh.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1626181263235/JPocJwoEd.png)&#xA;&#xA;This example depicts how we can fetch data from an API using cURL and extract data in JSON format and use it for relevant tasks.&#xA;This is again one of the best utility out there as it becomes quite remarkable and vintage. Despite being almost 30 years old, it shines bright in the tech world.&#xA;&#xA;### find&#xA;Find as the name suggests it is used to find files among the folders and directories in a file system. it becomes quite helpful in complex projects where the directory structure is deep and large. &#xA;![possh.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1626181386566/zpP9Yaom4.png)&#xA;&#xA;The command `find *.txt` finds every txt file available on this directory. As simple as it can get. This is surely looking silly and idiotic but it finds its glory in large and complicated codebases. &#xA;&#xA;### bc&#xA;bc or basic calculator is a utility tool for performing mathematical and arithmetical operations in the terminal, this commands gets integrated with other commands such as awk really well and can be used for further extending the limits of what the command line development can do.&#xA;&#xA;&#xA;![possh.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1626182601487/z8X4KeDGG.png)&#xA;&#xA;AWW! I could hear the excitement. That just added new dimensions into BASH. Just creativity and resonance to anything is the limit here. I am using  [REPL.IT](http://repl.it/)  here for using bash as I do not have it on my windows machine :( But that command is truly insane.&#xA;&#xA;### wc&#xA;wc or word count is a utility tool for counting and analyzing the size or count of characters, words, lines, or files in a given file structure. This is quite a handy tool for monitoring and keeping track of a system, also for general development purposes.&#xA;&#xA;![possh.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1626182319602/r8UidHV2z.png)&#xA;&#xA;The above command prints out the word and lines in the provided file. This command `wc` can even compute the size of files and even more properties of files.&#xA;Those were some of the quite powerful commands, tools, or utilities in BASH/shell. There are plenty of other commands not covered here because this an extremely large topic and even making separate articles or resources there will certainly and surely be some things that will get missed out, that&#39;s the beauty Linux or in general Computer Science has.&#xA;Ok, that was a lot, but I hope you got some insights for learning more BASH or Linux in general. This is a wide topic and can&#39;t be covered entirely in a single article. &#xA;&#xA;Now that is it from this part, everything cannot be covered in any number of parts but at least it will help someone to get started in BASH scripting and its specifications for development. Have a Blast learning BASH. Happy Coding :)&#xA;</content>
      <type>posts</type>
    </item>
    <item>
      <title>Learning BASH by making a Number game</title>
      <link>meetgor.com/bash-game-numberjack</link>
      <description></description>
      <pubDate>Thu, 08 Jul 2021 00:00:00 UTC</pubDate>
      <content>&#xA;## Introduction&#xA;&#xA;OK! Learning BASH can be quite confusing without a proper goal in hand. So this will be a pretty good idea to start learning BASH and have a ton of fun. In this little time, we&#39;ll make a Number game which I have designed myself last year in C++, which took about 3 months due to lazy research and wasting time. But I was surprised that I made this game within two hours in BASH. You can refer to the game instructions in this  [repository at Github](https://github.com/Mr-Destructive/NumberJack).&#xA;&#xA;## Concept &#xA;The game will ask a number between 0 and 9 to the user. Then a list of 10 numbers shuffled in a random order will appear from of the user along with another list used for indexing the numbers from the array. The user has to select the index beneath its chosen number to proceed ahead. The game loops until the user has failed to enter the correct index of the number or the time for input was exceeded by 5 seconds. The user will get a point for every successful hit. So that is probably the introduction of the game so, let&#39;s dive into the specifications.&#xA;&#xA;## Specifications of the Game in BASH&#xA;The game is a number based which means it will need Arithmetic operators a lot. In fact, we&#39;ll need a few complex functions such as shuf. We will very frequently use while and for loops to perform some tasks such as filling and printing array and the game loop. We&#39;ll use some flag variables to indicate the current situation in the game and finally some arithmetic on arrays and numbers. &#xA;&#xA;## Script Explanation&#xA;The game is quite simple to understand. You just have to select the number beneath your chosen number within 5 seconds in the shell script. We will create a menu-like display in the terminal by simple echo command and formatting. Before the menu, we will have a while loop that will iterate until the user enters 3 which is stored in variable `ch` which is initialized to 0 in the beginning so as to enter the loop for the first time. A while loop starts with the do statement and ends at the done statement.&#xA;```bash&#xA;while [ condition ];&#xA;do &#xA;# statements&#xA;done&#xA;```&#xA;For loop can be different based on the scenario. We&#39;ll use a range-based for loop to iterate over a range of numbers using the { } operators. For loop also has do as the beginning of the loop and done as the end of the loop.&#xA;&#xA;```bash&#xA;for i in {1..5};&#xA;do &#xA;#statements&#xA;done&#xA;```&#xA;We&#39;ll also use some If-else statements just to check for the correct user input and checking the exit status. The if statements have `then` to start the block and `fi` to end the if block. &#xA;```bash&#xA;if [ condition ];&#xA;then&#xA;    #statements&#xA;elif&#xA;    #statements&#xA;else&#xA;    #statements&#xA;fi&#xA;```&#xA;&#xA;&#xA;We use a read statement with the argument -p to have a prompt to the user for some information on the input. The input of choice from the menu i.e 1 to play, 2 for Instructions, and 3 to exit are stored in the variable `ch`. If the input is 1, the game will start and it will ask the user for the number `n`, which is the number used throughout the loop until the game is over. &#xA;&#xA;Now we have the number for the rest of the game, we need to generate the list for the user to select the number from. We will have a flag sort of to check if the user has entered the correct number which is `c`, this will store 0 for correct input(number x) and 1 for incorrect input. It is initialized with 0, again to enter the while loop once before the generation of numbers. &#xA;&#xA;To generate and **shuffle 10 numbers which should not have any repeated numbers**, as it can have multiple numbers which might be unfair also it might happen that the number chosen by the user might not be present due to repetition. So to avoid that mischief of pseudo-random numbers we have to generate distinct 10 numbers from 0 to 9 in this case. For that, we are gonna use a command in BASH called `shuf` which can create some permutation of the elements in a list/array or a sequence of numbers in an input stream. We are gonna use `shuf` to generate a random sequence of 10 numbers from 0 to 9 using the command `shuf -i 0-9 -n 10`. &#xA;&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1625748675622/1Li6h3_vX.png)&#xA;&#xA;You can see it generated a list of shuffled numbers between 0 to 9 so there are 10 numbers. We&#39;ll store this in result an array to access and print them later. You can refer to  [this](https://www.geeksforgeeks.org/shuf-command-in-linux-with-examples/)  and  [these](https://www.howtoforge.com/linux-shuf-command/)  articles for understanding shuf.  &#xA;&#xA;The main thing is taken care of, now we need to print the list and also print another list to indicate the index of numbers to the user. We will print the list without a for loop using the `@` variable. If you are new to BASH and want a bit guide on BASH please do check out my series on  [BASH scripting](https://techstructiveblog.hashnode.dev/series/bash-scripting), I have this all covered. So using `@` we can print the entire array in BASH. &#xA;&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1625749273007/hf_y4Fm53.png)&#xA;&#xA;To print the lower list of indices, we&#39;ll use a range-based for loop i.e it will iterate over a range(in this case between 1 to 10), and assign each element the value of the counter i.e from 1 to 10. We are using `r` as the shuffled list and `a` as the indices list. And print this array with the same method.&#xA;&#xA;After the generation and printing of lists are complete, we&#39;ll take the input from the user for the index of his/her number. We&#39;ll use an argument in read known as timeout, which will give a stop to the input stream after several seconds provided in the argument. In this case, we will use 5 seconds as a timeout for the input of the index. `read -t 5 -p &#34;Enter the index of your number : &#34; x `&#xA;We&#39;ll store the input in `x` variable and access it later for verification. &#xA;&#xA;Next, we will check if the input was done before the timeout or not. For this, if the user input before timeout, we can proceed ahead but if the time was over, then we&#39;ll get an exit status above 128 so we use this as a checker for the timeout in the input. I came to this via this  [article](https://www.linux.org/threads/exit-script-by-timeout-if-delay-of-read-input-in-command-line.15905/), really very helpful. We will break the loop and make the flag `c` as 1 indicating an improper input and thus it&#39;ll show &#34;GAME OVER&#34;. But if you were fast enough then we&#39;ll check that the index of the shuffled array has your chosen number or not, we used this `${r[$(($x))-1]} -eq $n` to check for the correct number. Why -1? If you remember indexing in the array by default starts with 0, as we have started the second list from 1 hence every element will become offset by 1 hence to avoid that we&#39;ll subtract one to refer to that index. &#xA;&#xA;If the index of the number was equal and correct, well done we&#39;ll increment the counter of points `p` by one and if it was incorrect, the flag will be set to one as previously said and we&#39;ll break the loop. After coming out of the loop, we&#39;ll check if the status flag `c` was 1 if yes, then print the GAME OVER and display the points earned. And that is it. Let&#39;s take a look at some gameplay :)&#xA;&#xA;![numbjackbash.gif](https://cdn.hashnode.com/res/hashnode/image/upload/v1625753634816/CCUD8OD_K.gif)&#xA;&#xA;## BASH Script&#xA;```bash&#xA;#!/bin/bash&#xA;&#xA;echo -e &#34;&#xA; NumberJack &#xA;&#34;&#xA;ch=0&#xA;while [ $ch -ne 3 ];&#xA;do&#xA;&#x9;echo  &#34;  &#xA;&#x9;&#x9; PLAY : Hit 1 and enter.&#xA;&#x9;&#x9; HELP : Hit 2 and enter.&#xA;&#x9;&#x9; EXIT : Hit 3 and enter.&#xA;&#x9;&#x9; &#34;&#xA;&#xA;&#x9;read -p &#34;Enter your choice : &#34; ch&#xA;&#x9;if [ $ch -eq 1 ];then&#xA;&#x9;x=0&#xA;&#x9;c=0&#xA;&#x9;p=0&#xA;&#x9;read -p &#34;Enter any number between 0 and 9 : &#34; n&#xA;&#x9;while [ $c -eq 0 ];&#xA;&#x9;do&#xA;&#x9;&#x9;x=11&#xA;&#x9;&#x9;r=($(shuf -i 0-9 -n 10))&#xA;&#x9;&#x9;echo &#34;${r[@]} &#34;&#xA;&#x9;&#x9;for i in {1..10};&#xA;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;a[$i]=$i&#x9;&#xA;&#x9;&#x9;done&#xA;&#x9;&#x9;echo &#34;${a[@]} &#34;&#xA;&#x9;&#x9;read -t 5 -p &#34;Enter the index of your number : &#34; x&#xA;&#x9;&#x9;if [[ $? -gt 128 ]]; then &#xA;&#x9;&#x9;&#x9;c=1&#xA;&#x9;&#x9;&#x9;break&#xA;&#x9;&#x9;fi&#xA;&#x9;&#x9;if [ ${r[$(($x))-1]} -eq $n ];then&#xA;&#x9;&#x9;&#x9;echo &#34;Great&#34;&#xA;&#x9;&#x9;&#x9;((p=p+1))&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;c=1&#xA;&#x9;&#x9;&#x9;break&#xA;&#x9;&#x9;fi&#xA;&#x9;done&#xA;&#x9;elif [ $ch -eq 2 ];then&#xA;&#x9;&#x9;echo &#34;HELP: INSTRUCTIONS TO PLAY THE GAME. &#34;&#xA;&#x9;else&#xA;&#x9;&#x9;break&#xA;fi&#xA;&#xA;if [ $c -eq 1 ];then&#xA;&#x9;&#x9;&#x9;echo -e &#34;&#xA;GAME OVER&#xA;&#34;&#xA;&#x9;&#x9;&#x9;echo &#34;You scored $p points&#34;&#xA;fi&#xA;&#x9;&#x9;done&#xA;&#xA;```&#xA;&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1625753738352/qBDF1PFQG.png)&#xA;&#xA;This is the final bare-bones script without any help instructions just keeping the script simple. I hope you learned something from the game development in BASH. This is just a fun little project and a cool way of learning certain concepts in BASH such as loops, conditional statements, and arithmetic. Have FUN. Happy CODING :)&#xA;</content>
      <type>posts</type>
    </item>
    <item>
      <title>BASH Scripting Guide - PART - 2</title>
      <link>meetgor.com/bash-guide-p2</link>
      <description></description>
      <pubDate>Fri, 02 Jul 2021 00:00:00 UTC</pubDate>
      <content>&#xA;&#xA;# Introduction&#xA;&#xA;In this part, topics such as switch cases, mathematical expression, arrays, and strings. This won&#39;t be an in-depth guide to understand each and every concept, but to make users aware of the things and features in Bash. This also would not be an absolute basic guide, I expect to have some basic programming knowledge such as binary systems, logical and mathematical concepts. Don&#39;t worry, you won&#39;t be bombarded with commands, I&#39;ll just explain with easy examples to get started.&#xA;&#xA;Topics to be covered in this part are as follows:&#xA;- User Input&#xA;&#xA;    - User Prompt&#xA;    - Changing the Delimiter&#xA;    - Password as Input&#xA;    - Limiting the length of Input&#xA;&#xA;- Cases&#xA;&#xA;- Arrays&#xA;    - Declaring and Printing Arrays&#xA;    - Number of elements in an array&#xA;    - Splicing the array&#xA;    - Inserting and Deleting elements&#xA;&#xA;- Strings&#xA;    - Making Substrings&#xA;    - String Concatenation&#xA;    - String Comparison&#xA;- Arithmetic in Bash&#xA;    - Integer Arithmetic &#xA;    - Floating-Point Arithmetic&#xA;&#xA;# User Input&#xA;&#xA;Taking user input in Bash is quite straightforward and quite readable as well. We can make use of `read` command to take in input from the user. We just specify the variable in which we want to store the input.` read x` Here, the input will be stored in x. We can also pass in certain arguments to the read command such as -p (prompt with string), -r ( delimiter variation), -a(pass to the array), and others as well. Each of them will make the foundation of various complicated tasks to perform in logical operations. &#xA;&#xA;### User prompt argument&#xA;The -p argument will prompt the user with a string before they input anything. It makes quite informative and useful user input. This becomes quite a useful argument/parameter to make it quite readable and understand what to do directly with much hassle. The below is the general syntax of passing the argument to the read function.&#xA;&#xA;```bash&#xA;read -p &#34;Enter the number &#34; n&#xA;```&#xA;&#xA;```bash&#xA;#!/bin/bash&#xA;&#xA;read -p &#34;Enter the number &#34; n&#xA;echo &#34;The inputted number was $n&#34;&#xA;```&#xA;![bashs2.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1625118915300/NRF7Ci2rK.png)&#xA;&#xA;In this example, we can prompt the user with the string **Enter the number**, and it gives certain information to the user about what to input. &#xA;&#xA;&#xA;### Changing the delimiter&#xA;Next, we can make use of -r which depending on the use case, we can change the delimiter while taking the input.&#xA;&#xA;```bash&#xA;#!/bin/bash&#xA;&#xA;IFS=&#39;/&#39; read -p &#34;Enter the file path : &#34; user project app &#xA;echo $user $project $app&#xA;&#xA;```&#xA;&#xA;![bashs2.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1625202319183/R9Eo3lg0oU.png)&#xA;&#xA;In the above script, we separated the path of a directory(user-entered) into separate components such as the username, project name, and the app name, this can get pretty important and a great tool for automation of making project and application structures. At the beginning of the command, we use IFS which stands for Internal Field Separator, which does the separation of variables based on the field provided, in this case it was `//`, you can use any other field characters appropriate to your needs.&#xA;&#xA;This command will change the delimiter, by default it uses spaces or tabs etc to identify distinct input variables but we change it to other internal field separators such as / , \ ,- , \|, etc. This can make the user input more customizable and dynamic. &#xA;&#xA;### Password Typing&#xA;We can hide the input from the screen so as to keep it confidential and keep sensitive information such as passwords and keys private and protected. &#xA;```bash&#xA;#!/bin/bash&#xA;&#xA;read -sp &#34;Password: &#34; pswd&#xA;echo &#34;the password was $pswd&#34;&#xA;&#xA;```&#xA;&#xA;![bashs2.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1625161571993/MkCadbyKW.png)&#xA;&#xA;&#xA;We used the -s to keep the input hidden, the screen doesn&#39;t reflect what the user is typing, and -p for the prompt to offer the user some information on the text. &#xA;&#xA;### Limiting Length of Input&#xA;&#xA;We can limit the user to only a certain number of characters as input. It becomes quite useful in constrained environments such as usernames and passwords to be restricted with a certain limit. &#xA;&#xA;```bash&#xA;#!/bin/bash&#xA;&#xA;read -n 6 -p &#34;Enter the name: &#34; n&#xA;echo $n&#xA;```&#xA;&#xA;![bashs2.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1625161752440/8xI5Lovxo.png)&#xA;&#xA;In the above script, we demonstrate the limit of characters of 6 in the variable n. This restricts the user with only the first 6 characters, it just doesn&#39;t exceed ahead, directly to the next command.&#xA;&#xA;### Passing to the array&#xA;&#xA;Another important argument to be passed after read command is -a which inserts the value to the array elements.&#xA; &#xA;```bash&#xA;#!/bin/bash&#xA;&#xA;read -a nums -p &#34;Enter the elements : &#34; &#xA;for i in ${nums[*]};&#xA;do &#xA;&#x9;echo -e &#34;$i&#xA;&#34;&#xA;done&#xA;&#xA;```&#xA;In the above script, we have used array, don&#39;t worry, I&#39;ll explain it in the coming sections of this part. We have assigned an empty array and made the user enter those arrays, they are space-separated values. We have used the -a operator to insert the input to the elements of the array. The for loop is range-based which means it will do certain commands until there are no elements left in nums. The command `${nums[@]}` indicates every element in the array nums. &#xA;  &#xA;# Cases&#xA;&#xA;Cases are quite a good way of replacing nested if-else statements to make them nice and readable in the script.  Cases in Bash are quite powerful and easy to use compared with C/ C++ styled switch cases. &#xA;&#xA;The general structure of using a case in Bash is as follows:&#xA;&#xA;```bash&#xA;case variable in&#xA;    pattern 1)&#xA;        statements&#xA;        ;;&#xA;    pattern 2)&#xA;        statements&#xA;        ;;&#xA;    pattern 3)&#xA;        statements&#xA;        ;;&#xA;    pattern 4)&#xA;        statements&#xA;        ;; &#xA;    *)&#xA;        statements&#xA;        ;;&#xA;esac&#xA;```&#xA;&#xA;It follows a particular pattern if it matches it stops the search and executes the statements, finally comes out of the block. If it doesn&#39;t find any match it redirects to a default condition if any. &#xA;&#xA;```bash&#xA;#!/bin/bash &#xA;&#xA;read -p &#34;Enter a name : &#34; n&#xA;case $n in &#xA;&#x9;admin)&#xA;&#x9;&#x9;echo &#34;You are logged as root&#34;&#xA;&#x9;&#x9;;;&#xA;&#x9;unknown)&#xA;&#x9;&#x9;echo &#34;A hacker probably&#34;&#xA;&#x9;&#x9;;;&#xA;&#x9;manager)&#xA;&#x9;&#x9;echo &#34;Weolcome Manager!&#34;&#xA;&#x9;&#x9;;;&#xA;&#x9;*)&#xA;&#x9;&#x9;echo &#34;A normal person&#34;&#xA;&#x9;&#x9;;;&#xA;esac&#xA;&#xA;```&#xA;&#xA;![bashs2.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1625160454707/YDYGkU34d.png)&#xA;&#xA;Seeing the above example, it is quite clear, that it looks quite structured and readable than the nested ladder of If-else statements. Cases are rendered based on the variable after the `case` keyword. We use the patterns before `)` as making the match in the variable provided before. Once the interpreter finds a match it returns to `esac` command which is `case` spelled in reverse just like `fi` for `if` and `done` for `do` in loops :) If it doesn&#39;t match any pattern, we have a default case represented by `*)` and it executes for any non-matching expression. &#xA;&#xA;&#xA;## Arrays&#xA;&#xA;Arrays or a way to store a list of numbers is implemented in Bash identical to most of the general programming languages. &#xA;&#xA;### Declaring and Printing Arrays &#xA;&#xA;We declare an array similar to a variable but we mention the index of the element in the array(0 based index).  We can also simply declare an empty array using the declare command `declare -A nums`&#xA;&#xA;```bash&#xA;#!/bin/bash &#xA;&#xA;nums[0]=7&#xA;nums[1]=5&#xA;nums[2]=8 &#xA;for i in ${nums[@]}&#xA;do&#xA;echo -e &#34;$i &#xA;&#34;&#xA;done&#xA;```&#xA;&#xA;![bashs2.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1625124595563/TzBEaH1E4.png)&#xA;&#xA;The above script initializes an array with some hard-coded elements, surely you can input those from the user. For printing and accessing those elements in the array, We can use a loop, here we have used a range-based for loop. You can use any other loop you prefer. The iterator is &#34; i &#34; and we use $ to access the values from the array, we use `{}` as we have nested expression for indexing the element and `*` for every element in the array ( `@` will also work fine ), that&#39;s why range-based for loops make it quite simple to use. And we have simply printed &#34; i &#34; as it holds a particular element based on the iteration. &#xA;&#xA;OR&#xA;&#xA;```bash&#xA;#!/bin/bash&#xA;&#xA;declare -A nums=(&#xA;[0]=44&#xA;[1]=45&#xA;[2]=46&#xA;)&#xA;echo &#34;${nums[@]}&#34;&#xA;&#xA;```&#xA;&#xA;![bashs2.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1625128343654/NCKUzurXe.png)&#xA;&#xA;The above script uses declare an array, it can be empty as well after the name declaration. We used the `()` to include the values in the array, using indices in the array we assigned the values to the particular index.&#xA;&#xA;If you just want to print the elements, we can use `${nums[@]}` or `${nums[*]}`, this will print every element without using any iteration loops.&#xA;&#xA;```bash&#xA;#!/bin/bash&#xA;&#xA;nums[0]=7&#xA;nums[1]=5&#xA;nums[2]=8 &#xA;echo &#34;${nums[@]}&#34;&#xA;&#xA;```&#xA;&#xA;![bashs2.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1625125456166/85zXjapQ_.png)&#xA;&#xA;### Number of Elements in the array&#xA;&#xA;To get the length of the array, we can use # in the expression `${nums[@]}`, like `${#nums[@]}` to get the number of elements from the array.&#xA;&#xA;![bashs2.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1625125770005/VzIr8CD7-.png)&#xA;&#xA;Since we had 4 elements in the array, it accurately printed 4. &#xA;&#xA;### Inserting and Deleting elements from Array &#xA;&#xA;We can push elements to the array using the assignment operator. &#xA;&#xA;`nums=(${nums[@]} 76) `&#xA;&#xA;This will push 76 into the array, i.e. in the last index( length -1 index). &#xA;&#xA;```bash&#xA;#!/bin/bash&#xA;&#xA;nums[0]=7&#xA;nums[1]=5&#xA;nums[2]=8&#xA;nums[3]=19&#xA;nums=(${nums[@]} 76)&#xA;echo &#34;${nums[@]}&#34;&#xA;echo &#34;Length of nums = ${#nums[@]}&#34;&#xA;&#xA;```&#xA;&#xA;![bashs2.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1625126198675/A8IAE-2FR.png)&#xA;&#xA;As you can see the element was added at the end of the array, you can also specify the index you want to insert. We can use `unset nums[3] ` to delete the element at the particular location or we can pop back (delete from the end) an element from the array using the index `-1` from the array using the following command.&#xA;&#xA;```bash&#xA;unset nums[-1]&#xA;```&#xA;&#xA;Any index provided will delete the element at that location by using unset. By using -1, we intend to refer to the last element. This can be quite handy and important as well in certain cases.&#xA;&#xA;```bash&#xA;#!/bin/bash&#xA;&#xA;nums[0]=7&#xA;nums[1]=5&#xA;nums[2]=8&#xA;nums[3]=19&#xA;unset nums[-1]&#xA;echo &#34;${nums[@]}&#34;&#xA;echo &#34;Length of nums = ${#nums[@]}&#34;&#xA;&#xA;```&#xA;&#xA;![bashs2.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1625126770211/LYK2Q0Rp0.png)&#xA;&#xA;There you can see we removed the element using unset. &#xA;&#xA;### Splicing an Array&#xA;&#xA;We can splice the array to print/ copy a portion of the array to another one. &#xA;&#xA;```bash&#xA;echo &#34;${nums[@]:1:3}&#34;&#xA;```&#xA;&#xA;Using two colons and numbers in between them, we can print in this case certain elements in the array from a particular range. Here the first number after the colon is the starting index to print from(inclusive) and the next number after the second colon is the length to which we would like to print the element, it is not the index but the number of elements after the start index to be spliced&#xA;&#xA;```bash&#xA;#!/bin/bash&#xA;&#xA;nums[0]=7&#xA;nums[1]=5&#xA;nums[2]=8&#xA;nums[3]=19&#xA;nums[4]=76&#xA;newarr=${nums[@]:1:3}&#xA;echo &#34;${newarr[@]}&#34;&#xA;echo &#34;${nums[@]}&#34;&#xA;&#xA;```&#xA;&#xA;![bashs2.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1625127387739/IH2Fc6ghk.png)&#xA;&#xA;In this case, we have copied the slice of an array to another new array using the double colon operator. We added the elements from the 1st index till `1+3` indices i.e till 4. 3 is not the index but the length till you would like to copy or print. &#xA;&#xA;This was a basic introduction to arrays, definitely, there will be much more stuff I didn&#39;t cover. Just to give an overview of how an array looks like in BASH scripting. Next, we move on to strings.&#xA;&#xA;# Strings&#xA;&#xA;Strings are quite important as it forms the core of any script to deal with filenames, user information, etc all contain strings or array of characters. Let&#39;s take a closer look at how strings are declared, handled, and manipulated in Bash scripting. &#xA;&#xA;```bash&#xA;s=&#34;World&#34;&#xA;echo &#34;$s&#34;&#xA;```&#xA;&#xA;![bashs2.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1625129318948/02V3bpP1I.png)&#xA;&#xA;Strings are again declared as normal variables but are enclosed in double quotation marks.  And we access them in the exact same way as we do with variables. If you were to use single quotes instead of double quotes Bash would not interpret the variable name as a variable, it would print the name literally and not the value of the variable, So prefer using double quotes in echo and other commands to make variables accessible.&#xA;&#xA;### Making Substrings&#xA;&#xA;We can even splice the string as we did with the arrays, in strings we can call it substrings. The syntax is almost identical as we just have to get the variable name.&#xA;&#xA;```bash&#xA;#!/bin/bash&#xA;&#xA;s=&#34;Hello World&#34;&#xA;p=${s:6}&#xA;echo $p&#xA;q=${s::5}&#xA;echo $q&#xA;t=${s:4:3}&#xA;echo $t&#xA;&#xA;```&#xA;&#xA;In the above script, we had a base string &#39;s&#39; which was then sliced from the 6th index to the end, If we do not pass the second number and colon, it interprets as the end of the string and if we do not pass the first number, it will interpret as the first character in the string. We sliced s from the 6th index till the end of the string and copied it in the string &#39;p&#39;&#39;. In the &#39;q&#39; string, we sliced the first 5 characters from the string &#39;s&#39;. In the &#39;t&#39; string we sliced starting from the 4th index and 3 characters in length i.e till  7th index, not the 7th index.&#xA;&#xA;We can use the # before the variable name to get the length of the string as we saw in the array section. So we can use the `echo ${#s}` command to print the length of the string where s is the string variable name. &#xA;&#xA;### String Concatenation&#xA;&#xA;String concatenation on Bash is quite straightforward as it is just the matter of adding strings in a very simple way. &#xA;&#xA;```bash&#xA;#!/bin/bash&#xA;&#xA;s=&#34;Hello&#34;&#xA;p=&#34;World&#34;&#xA;q=&#34;$s $p&#34;&#xA;echo $q&#xA;```  &#xA;&#xA;![bashs2.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1625135997314/_n05RIoTTM.png)&#xA;&#xA;The space between the two variables is quite literal, anything you place between this space or the double quotes will get stored in the variable or get printed.&#xA;&#xA;### String Comparison&#xA;&#xA;Moving on to the string comparison in Bash. String comparison is quite complex in certain programming languages but it&#39;s quite straightforward in some languages such as Bash. We can compare strings quite easily in Bash, either they are equal or they are not, it&#39;s just comparison operators to perform the heavy-lifting for us. &#xA;&#xA;```bash&#xA;#!/bin/bash&#xA;&#xA;s=&#34;hello&#34;&#xA;p=&#34;Hello&#34;&#xA;if [ $s = $p ];&#xA;then&#xA;    echo &#34;Equal&#34;&#xA;else &#xA;    echo &#34;Not equal&#34;&#xA;fi&#xA;&#xA;```&#xA;&#xA;![bashs2.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1625138020711/UWlRN8aPq.png)&#xA;&#xA;![bashs2.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1625137884154/7bNPkpGd3.png)&#xA;&#xA;From the above code, it is quite clear that the strings as not equal and we compared them with the &#34;equality&#34; operator (=) and checked if that condition was true, and perform commands accordingly. We can also check if the strings are not equal using `!=` operator and we can perform commands based on the desired logic. We also have operators to compare the length of the strings. We can use `\&lt;` operator to check if the first string is less than the second string(compared characters in ASCII).  And check if the first string is greater than the second string using `\&gt;` operator. &#xA;&#xA;```bash&#xA;#!/bin/bash&#xA;&#xA;s=&#34;hello&#34;&#xA;p=&#34;Hello&#34;&#xA;if [ $s \&lt; $p ];&#xA;then&#xA;&#xA;&#x9;echo &#34;$s is Less than $p&#34;&#xA;elif [ $s \&gt; $p ];&#xA;then&#xA;&#x9;echo &#34;$s is greater than $p&#34;&#xA;else&#xA;echo &#34;Equal&#34;&#xA;fi&#xA;&#xA;```&#xA;&#xA;![bashs2.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1625137393683/u3WbgDIrN.png)&#xA;&#xA;&#xA;![bashs2.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1625137467448/NP1UXZAbv.png)&#xA;&#xA;Here, we are using the ASCII equivalent of strings to compare them as it gives an idea in terms of the value of the strings. We see that &#39;h&#39;( 104)has a greater ASCII value than &#39;H&#34; (72) which is why we see the shown outcome. &#xA;&#xA;We also have operators to check for the string being empty or not using the -z operator. Also, we have arguments to pass to the string comparison to check for non-empty strings as well, specifically for input validation and some error handling. &#xA;&#xA;We can quite easily use -n to check for non-empty string and -z for the length of the string being zero.&#xA;&#xA;```bash&#xA;#!/bin/bash&#xA;&#xA;read -p &#34;Enter a string : &#34; s&#xA;if [ -s $s ];&#xA;then &#xA;    echo &#34;Empty Input&#34;&#xA;else&#xA;   echo &#34;Valid input&#34;&#xA;fi&#xA;&#xA;```  &#xA;&#xA;![bashs2.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1625138907051/tbjRDda0U1.png)&#xA;&#xA;So the string topic is quite straightforward and self-explanatory as it doesn&#39;t how that much complexity but is still powerful and convenient to use.&#xA;&#xA;# Arithmetic in Bash&#xA;&#xA;Performing any Arithmetic operations is the core for scripting. Without arithmetic, it feels incomplete to programmatically create something, it would be quite menial to write commands by hand without having the ability to perform arithmetic operations. &#xA;&#xA;### Integer Arithmetic&#xA;&#xA;Firstly we quite commonly use operations on variables, so let us see how to perform an arithmetic operation on variables in Bash. We use double curly braces to evaluate certain results of the operations performed on variables. &#xA;&#xA;```bash&#xA;#!/bin/bash&#xA;&#xA;x=4&#xA;y=9&#xA;z=$(($x * $y))&#xA;echo $z&#xA;&#xA;```&#xA;&#xA;![bashs2.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1625139582135/Sb4hdE990.png)&#xA;&#xA;We use double curly braces in order to evaluate the operations performed on the variables inside them. We definitely have to use the $ symbol to extract the value of the variable. &#xA;&#xA;We can surely use operators such as addition(`+`), subtraction(`-`), multiplication(`*`), division(`/`), and modulus(`%`, it stores the remainder of the division,17%3 gets you 2) in statements. We can also perform operations such as `&lt;&lt;` to do left bitwise shift and `&gt;&gt;` right bitwise shift to shift the binary digits in left tor right respectively in a variable. There are also logical operations such as Bitwise and logical AND(`&amp;`), OR(`|`), EX-OR(`^`), and ternary expressions.  &#xA;&#xA;Alternative to double curly braces is `expr`, expr allows you to freely wherever you need to evaluate an arithmetic operation. Though this is not native in-built in shells, it uses a binary process to evaluate the arithmetic operations. It can also defer depending on the implementation of such commands in various environments. &#xA;&#xA;We can also use the `let` command to initialize a variable and perform expressions in the initialization itself. &#xA;&#xA;```bash&#xA;#!/bin/bash&#xA;&#xA;let a=4&#xA;let b=a*a&#xA;let c=&#34;b/(a*2)&#34;&#xA;echo $b&#xA;```&#xA;&#xA;We can perform quite complex operations using simple implementation using `let`, this allows much readable and bug-free scripts.  If you would like to perform operations with brackets and other operations you can enclose the expression in double quotation marks. &#xA;&#xA;### Floating-Point Arithmetic&#xA;&#xA;Performing floating-point arithmetic in Bash is not quite well though. We won&#39;t get 100% accurate answers in the expressions this is because it is **not designed** for such things. Doing **things related to floating-point is a bad idea**, Still, you can improve the precision to a little extent to do some basic things. I **don&#39;t recommend this** only do this if there are no other options. &#xA;&#xA;```bash&#xA;printf %.9f &#34;$((10/3))&#xA;```&#xA;&#xA;The result of this is 3.0000000..064 roughly, which is pretty bad. Bash at its core doesn&#39;t support floating-point calculations. But there is good news, we have  [awk](https://en.wikipedia.org/wiki/AWK)  and other tools such as  [bc](https://en.wikipedia.org/wiki/Bc_(programming_language))  and others which is planned for the next part in the series. I&#39;ll explain awk just for floating-point here, in the next part, I&#39;ll cover it in depth. &#xA;&#xA;```bash&#xA;#!/bin/bash&#xA;a=10&#xA;b=$(echo | awk -v a=&#34;$a&#34; &#39;{print a/3}&#39;)&#xA;echo $b &#xA;&#xA;```&#xA;&#xA;![bashs2.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1625157391350/gHudsNntM4.png)&#xA;&#xA;WOW! That is to the point, but that was a lot of hassle using echo but printing nothing! HH? OK, you see certain things can get really annoying when things aren&#39;t supported natively. Firstly, we use  | to pipe echo command with awk, the echo command doesn&#39;t do anything just a way to use awk command in assigning variables here. Then the general syntax of the awk command is ` awk -options -commands`. In this case, we are using -v as an argument and passing in an as a variable which is equal to a, which is stupid and silly but that is what it is, you can name any variable name you want. Then we simply have to use the variable in the print function which generally evaluates the expressions or other operations and returns to the interpreter. And that is how we print the expression, Phew! That took a while to do some silly things, But hey! That&#39;s possible though. &#xA;&#xA;That is the basic overview of Arithmetic in Bash, you can also perform logical operations in it which is very easy and can be understood on a quick run-through in the  [documentation](https://www.gnu.org/savannah-checkouts/gnu/bash/manual/bash.html#Arithmetic-Expansion).&#xA;&#xA;I hope you understood the mentioned topics and what are their use cases depending on the requirements. Some topics such as positional parameters, tools and utilities, dictionaries, and some other important aspects of Bash scripting will be covered in the next part. Happy Coding.&#xA;</content>
      <type>posts</type>
    </item>
    <item>
      <title>BASH Scripting Guide - PART - 1</title>
      <link>meetgor.com/bash-guide-p1</link>
      <description></description>
      <pubDate>Tue, 22 Jun 2021 00:00:00 UTC</pubDate>
      <content>&#xA;&#xA;## Introduction&#xA;If you are new to BASH and Linux, don&#39;t you worry the community is the driving force here. If someone&#39;s stuck somewhere, the platforms, forums, and blogs are ready to help anyone there. BASH is a short term of Bourne-Again Shell, it is a shell interface that has much more capabilities and functions than the simple Bourne shell(sh). It has some quite remarkable features and it is even capable of calling itself a programming language in some sense.&#xA; &#xA;Without wasting any time on the introduction, let&#39;s keep the article rolling.&#xA;In this part, I&#39;ll try to cover the basics of the following topics:&#xA;- **Structure of Bash Script.**&#xA;- **Variables.**&#xA;- **If-else Conditional Statements.**&#xA;- **Loops.**&#xA;    1.  For loop&#xA;    2. While loop&#xA;    3. Until loop&#xA;- **Functions.**&#xA;&#xA;Firstly, you should have some basic understanding of Linux commands such as listing directories, creating, making editing files, and some tiny little tasks. Bash scripting is the way to do these in a programmatic way, that&#39;s why it is called scripting.  &#xA;&#xA;## Understanding a Simple Shell script&#xA;&#xA;```bash&#xA;#!/bin/bash&#xA;echo &#34;Hello World&#34;&#xA;```&#xA;That is such a simple elegant script, isn&#39;t it? Well, the first command is called the she-bang which tells the Shell to execute or run the file as a Bash script or from a Bash interpreter. The next command is a simple echo which is used for printing text to the screen/console. She-bang is the path to the Bash interpreter. So, it basically redirects the shell to execute the file/script in a Bash environment. &#xA;&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1624287681383/MP2nc6hGR.png)&#xA;&#xA;To execute the script we have many ways, either use Bash, source, or execute it as a shell-script by making it executable from the path. In this case, I used Bash to run the script, we&#39;ll see others as well.&#xA;&#xA;The core structure of the Bash script is quite simple, we can make the format of the script according to the paradigm used and objective of the script. For basic scripts which has utility functions we normally declare those in the beginning after the she-bang header. After the function, we can have the core main part of the script. It was enough and important here to understand the purpose of the she-bang header and how to execute a shell script.&#xA;&#xA;&#xA;## Variables&#xA;Definitely, we need variables to store some value which we are gonna use again and again. Bash has variables but without any specific data types, you can store anything in anything. It becomes a mess in comparing to variables and their values :( Though it might be a feature, not a bug sometimes.&#xA;&#xA;Let&#39;s create some variables in a Bash script. &#xA;```bash&#xA;#!/bin/bash&#xA;x=2&#xA;echo $x&#xA;```&#xA;To create a variable, we simply write the variable name and assign it to whatever we want. **DO NOT leave spaces before and after assignment operator(=), it won&#39;t work**. To access the value of the variable we use the $ symbol. That is about the variables, If you want to perform some arithmetic on variables, it is covered in the further sections. &#xA;&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1624287785396/GvIdwi0QP.png)&#xA;&#xA;From the above script, we outputted the value of x to the console. We also executed the script file using the source command. &#xA;&#xA;## If-else Conditional statements&#xA;If-else conditional statements are quite the fundamentals of any logical operations performed in the programming world, so Bash has them implemented pretty much the same way as other shells do.&#xA;&#xA;```bash&#xA;#!/bin/bash&#xA;a=9&#xA;if [ $a -lt 10 ];then &#xA;echo &#34;Less than 10&#34;&#xA;fi&#xA;```&#xA;&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1624290119634/JT6QuRTZe.png)&#xA;&#xA;We use &#34;If&#34;, followed by &#34;then&#34; to execute the mentioned commands after that until it hits &#34;fi&#34; or else statement, we&#39;ll see else and if-else block after this. That is a basic If statement, here if we are comparing numbers we use -lt for less than, -gt for greater than, -eq for equals to, -ne for not equals to, -le for less than equals to, and -ge for greater than equals to. For string comparison, we use symbols such as &lt; for less than, &gt; for greater than, = for equals to, != for not equals to. &#xA;&#xA;```bash&#xA;#!/bin/bash&#xA;a=&#34;ERROR&#34;&#xA;if [ $a = &#34;ERROR&#34; ]; then&#xA;&#x9;echo &#34;FAILURE&#34;&#xA;else &#xA;&#x9;echo &#34;SUCCESS&#34;&#xA;fi&#x9;&#xA;&#xA;```&#xA;&#xA;&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1624289450947/mrd8lawZD.png)&#xA;&#xA;In the above example, we have used the if-else block, comparing a string with other and using the = operator to compare. It&#39;s quite interesting that Bash has string comparison built-in, unlike C/C++ where we have to depend on external libraries. We have used chmod to make the script file executable to anyone using the system. And then we simply put in the path to the file to run it. &#xA;&#xA;```bash&#xA;#!/bin/bash&#xA;&#xA;c=3&#xA;if [ $c -eq 0 ];then&#xA;&#x9;echo &#34;Success&#34;&#xA;elif [ $c -eq 1 ];then &#xA;&#x9;echo &#34;Failure&#34;&#xA;else&#xA;&#x9;echo &#34;Invalid Input&#34;&#x9;&#xA;fi&#xA;```&#xA;&#xA;&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1624290844242/8FQgLjIQT.png)&#xA;&#xA;From the above script, we used if-elif-else statements to evaluate different conditions. We had use -eq to equate the value of the variable to the number we want to compare with. That was self-explanatory logic.&#xA;&#xA;## Loops&#xA;&#xA;We have 3 types of loop statements in Bash, they are:&#xA;1. For loop&#xA;2. While loop&#xA;3. Until loop&#xA;&#xA;### For loops&#xA;In for loop, we have the freedom to use in range-bound or C-like for loops. Let us take a look at both of them using examples.&#xA;```bash&#xA;#!/bin/bash&#xA;&#xA;for i in {1..5} &#xA;do &#x9;&#xA;&#x9;echo $i&#xA;done&#x9;&#xA;```&#xA;&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1624292601491/Rbuyx_T6p.png)&#xA;&#xA;The above loop was used as a range-based loop, which loops through 1 and 5 inclusive. We use {} to use it as the range. As &#34;then&#34; and &#34;fi&#34; in if conditions, we have &#34;do&#34; and &#34;done&#34; in loops. Between the do and done statements, we can type in the statements we want to loop. &#xA;&#xA;```bash&#xA;#!/bin/bash&#xA;&#xA;read -p &#34;Enter the number : &#34; n&#xA;for (( i=0;i&lt;$n;i++ ));&#xA;do &#x9;&#xA;&#x9;echo $i&#xA;done&#x9;&#xA;&#xA;&#xA;```  &#xA;&#xA;&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1624293294293/jPM1so_As.png)&#xA;&#xA;The above for loop is a typical C-style for loop which takes 3 arguments, the initializing iterator, the condition, and the incrementor. We surround the arguments with double braces followed by a semi-colon. The rest of the syntax is identical to the previous for loop style.&#xA;&#xA;### While loops&#xA;While loops are used quite commonly in Bash and the syntax is quite straightforward.&#xA;```bash&#xA;#!/bin/bash&#xA;&#xA;read -p &#34;Enter the number : &#34; n&#xA;while [ $n -gt 0 ]&#xA;do &#x9;&#xA;&#x9;echo $n&#xA;&#x9;i=$((--n))&#xA;done&#x9;&#xA;&#xA;```&#xA;&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1624295626909/qLh2y8RPe.png)&#xA;&#xA;The above while loop has a condition for the number to be greater than zero. We take in the input from the user using the command read and store it in the variable n, the -p is an argument to prompt the user with text before the input. We use the decrement operator to decrement the iterator. The syntax is quite similar and easy to understand. As usual in loops, we have do and done to start and end the loop. &#xA;&#xA;### Until loops.&#xA;Until loop is a while loop but with the opposite condition, we loop until a certain criterion is not matched. &#xA;```bash&#xA;#!/bin/bash&#xA;&#xA;read -p &#34;Enter the number : &#34; n&#xA;until [ $n -eq 0 ]&#xA;do &#x9;&#xA;&#x9;echo $n&#xA;&#x9;n=$((--n))&#xA;done&#x9;&#xA;&#xA;```&#xA;&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1624296796493/SF6-XOEVl.png)&#xA;&#xA;In the loop, we iterate over and over again until n becomes 0. Until is simply to exit from the loop until a certain condition is met. The rest of the syntax is again the same as the other loop with do and done statements.  &#xA;&#xA;## Functions &#xA;&#xA;Functions are the part and parcel of any script, we don&#39;t use it necessarily, but they come in handy quite some times and serve the purpose absolutely well. We can customize what we want to return from the function depending on the needs. &#xA;&#xA;```bash&#xA;#!/bin/bash&#xA;&#xA;function add(){&#xA;echo $(($1+$2))&#xA;}&#xA;add 3 6&#xA;```&#xA;&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1624348202842/j0t0LT06q.png)&#xA;&#xA;&#xA;In Bash functions, we do not pass arguments inside brackets, we have to pass in parameters as space-separated values after the function name in the function call. This also means that we can pass any number of parameters to a function, but only we should handle them properly. Otherwise, there is no use in passing unlimited parameters to a function. This is really powerful but it needs to be used wisely to have its full potential. Also, it not mandatory to use the keyword &#34;function&#34; before the name, So you could also write just the name and the rest of it as it is.&#xA;```bash&#xA;#!/bin/bash&#xA;&#xA;add(){&#xA;echo $(($1+$2))&#xA;}&#xA;add 3 6&#xA;```&#xA;The return statement in functions is also quite an important aspect in logical programs. But it is not like returning values from a function, it is like returning the exit status of a function scope, so it can return inappropriate behavior from the shell depending on the return value. &#xA;&#xA;```bash&#xA;#!/bin/bash&#xA;&#xA;add(){&#xA;return $(($1+$2))&#xA;}&#xA;add 6 13&#xA;echo $?&#xA;&#xA;```&#xA;&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1624349678664/yDGL3U70C.png)&#xA;&#xA;Here we return the addition of two numbers and we use the internal variable ? To access the exit status of the function. The ? Is an internal variable in Bash, which holds the exit status of the last executed command. In this case, it was the function call and its return statement was stored in it.  As said, it can become quite buggy to exit the function scope with wired return statements, so to avoid those we can make use of global variables.&#xA;&#xA;&#xA;```bash&#xA;#!/bin/bash&#xA;&#xA;add(){&#xA;n=$(($1+$2))&#xA;}&#xA;add 5 16&#xA;echo $n&#xA;&#xA;```&#xA;&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1624349769088/VxnjgqETv.png)&#xA;&#xA;In the above program, we use n as a global variable to access out of the function scope. &#xA;Function in Bash can also return multiple values at once but that can be buggy at times, so I don&#39;t recommend that.&#xA;&#xA;&#xA; So, that is the basics of Bash functions covered. &#xA;&#xA;This is it from the Bash scripting guide Part-1, I&#39;ll cover more topics in the upcoming parts of the series. &#xA;</content>
      <type>posts</type>
    </item>
    <item>
      <title>What is BASH?</title>
      <link>meetgor.com/bash-intro</link>
      <description></description>
      <pubDate>Fri, 18 Jun 2021 00:00:00 UTC</pubDate>
      <content>&#xA;## Introduction&#xA;BASH or Bourne Again Shell is an interface(program) between the user and the Operating System. BASH is just an application just like others, but not an ordinary one. It is quite powerful when used to its potential. It is used in various aspects of computing. No, it&#39;s not only for server admins, but it specializes in that field though. We&#39;ll see how we can use Bash to perform several tasks quite powerfully. Not just automation, you&#39;ll be surprised what Bash is capable of.&#xA;&#xA;## BASH - The program that powers the world.&#xA;BASH is just like any other shell such as z-shell, c-shell, Korn shell, and Bourne shell. BASH is a variant or update version of the BOURNE shell. Technically it has quite advanced features than the Bourne shell, such as arithmetic operators, signal handling, command-line completion, and tons of quality of life improvements. So what can Bash do? Well pretty much anything, it is close enough to call itself a programming language but not quite enough. You can call it the programming language of the command line. &#xA;&#xA;Bash also has built-in features such as variables, loops, if-else conditional statements, functions, and all but there are no concrete data structures to work with. Some of them quite useful structures are built-in such as arrays and dictionaries. It can perform arithmetic, logical and programmatical operations inside of a terminal or command line. It can make use of some other programs such as grep, awk, sed, cURL, find, wc, the list is quite large. Most of the commands are quite versatile and can be integrated with each other quite well. Certain concepts such as command piping, brace expansion, and others provide a great integration and feasibility to make quite a lot of applications using Bash. Certain commands such as grep, cURL, sed, cat, touch are quite incredible and are used a lot in day-to-day use cases. Let&#39;s take a quick look at how actually we can use Bash to perform a basic task.&#xA;&#xA;![Demonstrating bash commands](https://s6.gifyu.com/images/recording1b26b94770ee59bf.gif)&#xA;&#xA;From the above gif, I edited a file without leaving the terminal. That can be lame but powerful in certain conditions. Anyways, that was just an example, but you can see where it can go. It can be extremely powerful for some repetitive tasks in programming or any other tasks. It can be also quite vividly used in the upcoming fields.&#xA; &#xA;## Applications&#xA;&#xA;Well, Bash has some epic applications, some of them might surprise you but they are indeed liable to call themselves features of Bash. Let&#39;s dive in then.&#xA; &#xA;### Automation &#34;of course!&#34;&#xA;&#xA;This is the most known feature of Bash as it stands upright on top of other tools and programs. Bash is most commonly used by system admins to automate repetitive tasks in managing a system. These tasks may include backing up files, managing file structures, monitoring the performance of a system, and debugging any errors and issues in the system on a regular basis to ensure the smooth functioning of a system. So, it makes quite a lot of sense to automate certain tasks that might waste time and effort to do them over and over again. Hence, Bash is the system admin&#39;s best friend and also for programmers to automate certain tasks and compilation of programs.&#xA;&#xA;### File handling&#xA;&#xA;This is another aspect where Bash just makes things flawless, just flawless. It&#39;s much more easy, straight forward and intuitive to manage or handle files in Linux/ Unix operating systems. The tools and command-line utilities such as grep, awk, sed for matching patterns using regular expressions,  cat, tac, touch to create and make changes to the file. There are a plethora of ways to make files and directories using Bash utility tools. We can also make a bunch of files at once, make the structure of a file system at once just using Bash and its commands. &#xA;&#xA;&#xA;### Programming environment&#xA;&#xA;This is a concept which many people use but are unaware of. People using Linux for programming are mostly using bash as their environment to make, compile, run files of the program. That is quite a powerful environment to work with as it is quite customizable and efficient as compared to Windows at least. Even macOS used Bash till a certain time but migrated to zsh for silly reasons about security issues on Bash. But still, Bash is the tool that most programmers use while interacting with the web servers or any other programs that deal with some kind of interface to the operating system especially Linux/ Unix. So, it is worth noting that Bash is the default development environment for many programmers.&#xA;&#xA;&#xA;### Networking&#xA;&#xA;Networking is another aspect where Bash also some quite remarkable tools to play around with. Bash has certain powerful tools like Nmap, aircrack-ng, ping, and many other networking tools which makes it quite a good choice for ethical hacking and network security as well. This domain is quite complex in terms of concepts as it makes the core IT domain. Bash also provides ways to manage the network using some well-equipped tools and programs to make it quite user-friendly.&#xA;&#xA;&#xA;### Web-Scraping &#34;wait what!?&#34;&#xA;&#xA;Yes, This is possible by making use of certain tools such as cURL to extract the content from the web and then using grep, sed, awk, or any other pattern/ regex matching tools to filter out the content. This might be very useful and informative for beginners trying to understand how web scraping actually works. Web-scraping can be learned this way so as to understand &#34;Under the Hood&#34; working of some utility and frameworks for web-scraping. This is some super great stuff for a simple shell to do in a standalone way though it may require a good skill of regexes and how the web works to make full utilization of the powers of Bash.&#xA;&#xA;&#xA;### Maybe More&#xA;OK, now I just know about these many applications about Bash but if you know any other please let me know in the comments. Bash is a great tool and I don&#39;t why it&#39;s not quite famous but still used a lot. Maybe I am wrong here, just an opinion though. So, I hope you might have got some insights to dig deeper into Bash and learn to improve efficiency and skills. &#xA;&#xA;So, that&#39;s it from Bash and its application in a high-level view, there is a huge field and community for Bash, just because of some threats Bash is not going anywhere, still, zsh is getting replaced in most cases, but the concept and tools remain the same. At the end of the day, its the skill rather than the version of any tool that matters Happy Coding and have a blast learning Bash :)&#xA;</content>
      <type>posts</type>
    </item>
    <item>
      <title>Setting up Vim for BASH Scripting</title>
      <link>meetgor.com/vim-for-bash</link>
      <description></description>
      <pubDate>Thu, 10 Jun 2021 00:00:00 UTC</pubDate>
      <content>&#xA;## Vim and BASH? &#xA;Bash Scripting is a powerful skill to have as a programmer because we find Linux almost everywhere and to get through it you must have a command over its interface which is generally the BASH shell. Vim is a great option for doing this, or probably the best out there! Because Vim is pre-installed in almost every Linux distribution. This is not an in-depth setup for BASH on Vim, it is a simple editorial on starting up BASH scripting on the Vim editor. So without wasting time on &#34;Vim features&#34; let&#39;s dive in with the setup for BASH in Vim.&#xA;&#xA;## Boilerplate macro&#xA;Setting up a bash script doesn&#39;t require much code but still in some cases it can be a bit hassle and to avoid the repetitive task, one can easily set up a macro for the boilerplate BASH script.&#xA;&#xA;```vim&#xA;nnoremap bs i#!/bin/bash/&lt;ESC&gt;o&#xA;```&#xA;Ok that was pretty dumb but it can scale pretty quickly and it will be nice to tailor it as per needs, here&#39;s some snippet with function pre-loaded.&#xA;&#xA;```vim&#xA;nnoremap bs i#!/bin/bash/&lt;ESC&gt;o&#xA;nnoremap bs i#!/bin/bash/&lt;ESC&gt;o&lt;ESC&gt;ofunction main(){&lt;ESC&gt;o&lt;ESC&gt;o}&lt;ESC&gt;ki&lt;S-TAB&gt;&#xA;&#xA;```&#xA;![type bs to load boiler-plate code](https://s6.gifyu.com/images/bsclip.gif)&#xA;&#xA;When the key bs is typed in normal mode, you enter into insert mode as per the command macro, then we type in the required text and escape to move to the next line and continue the same stuff. This could be extended further like making some input or printing out some text and any other formatted text that you could think it as repetition. &#xA;&#xA;## Sourcing Scripts&#xA;So, after creating the file, sourcing the script, and running it can be a bit slow for some people, as you have to go to the terminal and toggle in the permission to run the script and then run, But pull on your seatbelts as this is VIM! You can die due to slowness!&#xA;&#xA;```vim&#xA;nnoremap sh :!chmod +x % &amp;&amp; source %&#xA;```&#xA;&#xA;![type sh to run script](https://s6.gifyu.com/images/shclip.gif)&#xA;&#xA;When the sh keys are typed in the normal mode, the preceding command after ! (bang) will be executed in the terminal, the &amp;&amp; keywords will execute the second command only when the first command is successfully executed.&#xA; That just can so fast! Imagine doing this for long scripts and especially for debugging, it will waste 2 minutes every time you leave the editor and for 10 times you do the debugging, you will carelessly was roughly 20 minutes! Improve your debugging skills surely :)&#xA;&#xA;## Plugins&#xA;There are very few plugins out there for BASH as for VIM, but it&#39;s quite to write scripts even without any plugins. One of the most supported and popular plugins for BASH in Vim is  [Bash-Support-Vim](https://www.vim.org/scripts/script.php?script_id=365) for auto-completion and [Shell-Check](https://www.shellcheck.net) for finding/correcting any bugs or error in the script . &#xA;The mentioned plugin is quite awesome and it can greatly improve the speed of scripting for BASH, some commands such as shortcuts for writing if-else, while, for loops, commenting and other aspects in the scripting. The thorough documentation for such commands is also provided by the  [plugin website](https://wolfgangmehner.github.io/vim-plugins/bashsupport.html). &#xA;This can be used for autocompleting keywords and writing nested if-else and other logical operators in BASH scripting. Again, you can do absolutely fine without plugins in Vim as it is heavily customizable to the user&#39;s need and can be very rewarding to set up your own configuration for BASH. You can use standard Vim(barebones) for auto-completion as well with the command CTRL+N and CTRL-P to move down and up respectively.&#xA;&#xA;&#xA;## Some More Tricks&#xA;BASH in Vim can be quite versatile to use as it provides some custom addons to make the script more functional and easier to understand. Some tricks such as using autocompletion can be quite inconvenient to use at once but it can get really smooth after some runs at writing the scripts.&#xA;- In BASH Scripts there are quite a lot of brackets to play with that&#39;s why to jump around swiftly around such parentheses or brackets you can use **% to move from the opened to closed brackets or vice versa**.&#xA;- You can execute any terminal command from Vim, be sure to be in command mode and press ! after the command, you would like to execute. This will run the command from the terminal and you don&#39;t have to leave the editor, it saves a ton of time and it&#39;s blazingly fast.&#xA;- With the above trick, you kind of have a superpower within Vim to make, build, source, run the files or scripts within Vim, that is not repetition but it can run bash within bash. Ok! that&#39;s was pretty fast. Don&#39;t die of quickness now!&#xA;&#xA;Writing BASH scripts in Vim can be also boosted by using some built-in commands such as adding comments for multiple lines at once and some unexplored stuff which can be learned in the way to understanding the flow of Vim and BASH together. Happy Coding and Viming :)&#xA;</content>
      <type>posts</type>
    </item>
  </channel>
</rss>