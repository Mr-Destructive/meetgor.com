<rss version="2.0">
  <channel>
    <title>Meet Gor - Tag: web-development</title>
    <link>meetgor.com</link>
    <description>Posts tagged with web-development</description>
    <language>en-us</language>
    <pubDate>Fri, 17 Oct 2025 16:57:38 UTC</pubDate>
    <item>
      <title>NGINX Survival Guide: Serving Web Applications</title>
      <link>meetgor.com/nginx-02-web-servers</link>
      <description>NGINX Fundamentals: Setting Up Simple HTTP Servers, Serving Custom Content, multiple upstream servers</description>
      <pubDate>Sun, 21 Jul 2024 00:00:00 UTC</pubDate>
      <content>&#xA;## Introduction&#xA;&#xA;In the second part of our NGINX Survival Guide, we dive into the practical aspects of using NGINX to serve web applications. This section will guide you through the essential tasks of setting up a basic HTTP server, configuring NGINX to serve content from custom directories, and using it as a reverse proxy to forward requests to backend servers.&#xA;&#xA;NGINX is a versatile web server that can be used to serve applications in a variety of ways, from simple web servers to complex proxy configurations. NGINX can be used to serve static HTML content, proxy requests to a backend server, or load balance traffic across multiple servers. In this guide, we&#39;ll explore the different ways to use NGINX to serve applications, including setting up a simple HTTP server, serving content from custom directories, and using it to load balance traffic across multiple upstream servers.&#xA;&#xA;## Simple HTTP Server&#xA;&#xA;NGINX serves as the default HTTP server on port 80 of your local machine if NGINX is properly installed and running on your system. If you head on to the localhost, you will see the default NGINX HTML page like the one below:&#xA;&#xA;![NGINX Default Page](https://meetgor-cdn.pages.dev/nginx-survival-guide/nginx-default-page.png)&#xA;&#xA;This is the default HTML page served by NGINX as per the configuration in the `/etc/nginx/nginx.conf` file. The default folder for NGINX to serve HTML content is located at `/usr/share/nginx/html/index.html` , If you change the contents of this file and restart NGINX, the http server will load the new HTML content.&#xA;&#xA;Let&#39;s first look, at how we can serve a simple http message within the configuration file in NGINX.&#xA;&#xA;## Serving simple text&#xA;&#xA;We will try to write our simple HTTP server from scratch, so it would be nice to empty the existing `/etc/nginx/nginx.conf` file or use other ports to serve the content rather than the default `127.0.0.1:80` port.&#xA;&#xA;```nginx&#xA;http {&#xA;    server {&#xA;        listen 8000;&#xA;        return 200 &#34;Hello, World!&#xA;&#34;;&#xA;    }&#xA;}&#xA;```&#xA;&#xA;The above config will serve the text `Hello, World!` when there is a request to the URL `127.0.0.1:8000` or `localhost:8000` You can change the port per your requirements and even add a `server_name` for your domain name.&#xA;&#xA;```bash&#xA;$ curl http://127.0.0.1:8000 &#xA;Hello, World!&#xA;&#xA;&#xA;$ curl -i http://127.0.0.1:8000&#xA;HTTP/1.1 200 OK&#xA;Server: nginx/1.18.0 (Ubuntu)&#xA;Date: Sat, 03 Feb 2024 11:41:16 GMT&#xA;Content-Type: application/octet-stream&#xA;Content-Length: 14&#xA;Connection: keep-alive&#xA;&#xA;Hello, World!&#xA;```&#xA;&#xA;As we can see the NGINX served the HTTP content when the request was made to port 8000 on the localhost.&#xA;&#xA;## Serving from a custom path/folder&#xA;&#xA;But things are not like these in the real world, we need to serve an entire directory of HTML pages. We need to add the `root` directive with the path to the folder where our HTML content resides. The path should have the `index.html` file as the starting point of the request.&#xA;&#xA;```nginx&#xA;http {&#xA;    server {&#xA;        listen 8000;&#xA;        root /srv/techstructive-blog;&#xA;        index index.html;&#xA;    }&#xA;}&#xA;```&#xA;&#xA;**NOTE: The path to the HTML content needs to be accessible and the Nginx process should have the read permission to serve the contents.**&#xA;&#xA;It is commonly recommended to store HTML/static content files in directories such as `/srv` or `/var/www`. These paths follow conventions for serving static files and web applications in Unix-type operating systems. While it&#39;s not a strict requirement, adhering to these conventions can improve the organization and maintainability of web content.&#xA;&#xA;## Serving from a web server&#xA;&#xA;If you already have a web server running in a port on your system, you could use Nginx as a gateway to the application instead of exposing your application to the internet.&#xA;&#xA;We could use the [proxy\_pass](https://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_pass) directive in the location setting to specify which URL to pass the request to, the `listen` will forward the request to the proxy specified in the location directive.&#xA;&#xA;```nginx&#xA;http {&#xA;&#x9;server {&#xA;&#x9;&#x9;listen 80;&#xA;&#x9;&#x9;location / {&#xA;&#x9;&#x9;&#x9;proxy_pass http://localhost:8001;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}&#xA;```&#xA;&#xA;In the above example, the NGINX listens to port 80 in the local system and sends the request to the localhost at port 8001. The `proxy_pass` is used to specify the URL to redirect the request to.&#xA;&#xA;* **listen 80:** Nginx listens for incoming requests on port 80, the standard HTTP port.&#xA;    &#xA;* **location /:** This directive matches all incoming requests, regardless of the path.&#xA;    &#xA;* **proxy\_pass**[**http://localhost:8001**](http://localhost:8001)**:** Requests are forwarded to the web application running on [localhost](http://localhost) at port 8001.&#xA;    &#xA;&#xA;This example configuration is a basic building block for setting up more complex proxy configurations with NGINX.&#xA;&#xA;## Serving from Multiple Upstream Servers&#xA;&#xA;NGINX can also serve content from multiple upstream servers, balancing the load between them. This is useful for high-traffic applications that require multiple backend servers to handle the load.&#xA;&#xA;What are upstream servers, you might ask, well in the context of NGINX, upstream servers refer to backend servers that handle the actual processing of requests. NGINX acts as a gateway, forwarding incoming requests to these upstream servers. This setup allows NGINX to manage the traffic efficiently and distribute it among multiple servers, which can be particularly beneficial for high-traffic applications. . For example, you might have your application running on [`localhost:8001`](http://localhost:8001) and [`localhost:8002`](http://localhost:8002).&#xA;&#xA;Hereâ€™s an example configuration:&#xA;&#xA;```nginx&#xA;http {&#xA;    upstream myapp {&#xA;        server backend1.example.com;&#xA;        server backend2.example.com;&#xA;        server backend3.example.com;&#xA;    }&#xA;&#xA;    server {&#xA;        listen 80;&#xA;&#xA;        location / {&#xA;            proxy_pass http://myapp;&#xA;        }&#xA;    }&#xA;}&#xA;```&#xA;&#xA;In this configuration:&#xA;&#xA;* The `upstream` block defines a named group of backend servers (`myapp`).&#xA;    &#xA;* The `server` block listens on port 80 and proxies requests to the upstream group defined earlier.&#xA;    &#xA;* `upstream myapp`: This directive creates a group of backend servers named `myapp`.&#xA;    &#xA;* [`server backend1.example.com`](http://backend1.example.com) : These directives list the backend servers that will handle the requests. These can be specified by hostname, IP address, or combination.&#xA;    &#xA;* `proxy_pass` [`http://myapp`](http://myapp): This directive tells NGINX to forward incoming requests to the `myapp` upstream group.&#xA;    &#xA;&#xA;### Why Use Upstream Servers?&#xA;&#xA;Using upstream servers has several advantages:&#xA;&#xA;* Scalability: By distributing requests across multiple servers, you can handle more traffic and scale your application horizontally.&#xA;    &#xA;* Fault Tolerance: If one of the backend servers goes down, NGINX can continue to serve requests using the remaining servers, ensuring high availability.&#xA;    &#xA;* Load Distribution: Upstream servers help in balancing the load, which can improve the performance and responsiveness of your web application.&#xA;    &#xA;&#xA;The below configuration sets up NGINX to act as a gateway that distributes incoming traffic to multiple upstream servers. It defines an upstream block with servers at [`localhost:8001`](http://localhost:8001) and [`localhost:8002`](http://localhost:8002), and forward requests to these servers.&#xA;&#xA;```nginx&#xA;http {&#xA;    upstream myapp {&#xA;        server localhost:8001;&#xA;        server localhost:8002;&#xA;    }&#xA;&#xA;    server {&#xA;        listen 80;&#xA;&#xA;        location / {&#xA;            proxy_pass http://myapp;&#xA;        }&#xA;    }&#xA;}&#xA;```&#xA;&#xA;The provided NGINX configuration sets up an upstream block named `myapp` with two backend servers running on [`localhost`](http://localhost) at ports 8001 and 8002. The server block listens on port 80 and uses a location block to match all incoming requests to the root URL (`/`). These requests are forwarded to the `myapp` upstream group via the `proxy_pass` directive, allowing NGINX to distribute the requests between the two backend servers, effectively balancing the load and enhancing the application&#39;s performance and reliability.&#xA;&#xA;## Conclusion&#xA;&#xA;From this part of ther series, we have learned how to set up a simple HTTP server to serve content from custom directories and using NGINX as a gateway to backend servers, which covered essential ways to utilize NGINX for serving web applications.&#xA;&#xA;That&#39;s it from this part of the series, we will look into detail how to use NGINX as a load balancer and reverse proxy, serving static files, and caching content in the next part of the series, where we&#39;ll dive deeper into advanced NGINX configurations.&#xA;Thank you for reading, hopefully you found this helpful. If you have any feedback, questions, or queries drop them below in the comments or reach me out directly on my social handles.&#xA;&#xA;Happy Coding :)&#xA;</content>
      <type>posts</type>
    </item>
    <item>
      <title>NGINX Basics and Setup</title>
      <link>meetgor.com/nginx-01-basics</link>
      <description>Exploring NGINX Fundamentals: A Guide for Backend Developers, from the Importance of Learning NGINX to Installation and Server Setup</description>
      <pubDate>Sun, 14 Jan 2024 00:00:00 UTC</pubDate>
      <content>&#xA;&#xA;## Introduction&#xA;&#xA;NGINX is a tool that can be used as a web server, reverse proxy, load balancer, streaming media files, application gateway, content caching, and so much more. It can be said to be a Swiss army knife for optimizing and securing your web application deployment.&#xA;&#xA;The series &#34;NGINX Survival Guide&#34; will start from the basics and cover the bare minimum required for a backend developer to get going with NGINX. I will use Docker widely throughout this course as it is a great combination with NGINX to server web applications. However, you can use NGINX without docker, and spawn multiple servers.&#xA;&#xA;The series will cover the terminologies of NGINX, configuring NGINX servers, load balancing multiple servers, using it as a reverse proxy, and as an API gateway, there will be tiny details and some tidbits of doing certain things in a certain constrained environment which will make the learning more valuable.&#xA;&#xA;## What is NGINX&#xA;&#xA;NGINX (pronounced &#34;engine-x&#34;) is not just a web server, it is a powerful and versatile open-source software that wears many hats in the internet world. At its core, it functions as a **lightning-fast web server**, its secret weapon lies in its **event-driven architecture**, where it handles requests asynchronously, allowing it to serve countless users simultaneously without breaking a sweat.&#xA;&#xA;&gt; NGINX is a popular choice for powering some of the **biggest websites and platforms in the world**, demonstrating its reliability and scalability.&#xA;&#xA;NGINX&#39;s **configurable nature** lets you tailor its behavior to your specific needs, whether managing traffic flow with load balancing, caching frequently accessed content for faster delivery, or even acting as a gateway for your APIs.&#xA;&#xA;This versatility makes NGINX a **powerful tool for building efficient, secure, and scalable web applications**, regardless of size or complexity. Hence the need to learn it as a developer and especially important for a backend developer.&#xA;&#xA;### Why NGINX is must learn for backend developers&#xA;&#xA;Nginx is a highly efficient and performant web server. Understanding its configuration and management allows a backend developer to optimize server performance, handle large volumes of traffic, and reduce latency.&#xA;&#xA;In microservices architectures, Nginx can serve as an API gateway, managing and routing requests between different services. Nginx provides caching mechanisms that enhance performance by serving cached content, reducing the load on backend servers.&#xA;&#xA;Having strong fundamentals in NGINX can indeed provide a competitive edge in the job market and make a backend developer more versatile in handling various aspects of backend web development.&#xA;&#xA;### Who is using NGINX?&#xA;&#xA;Big Tech Companies are using NGINX like DropBox, Netfilx, and Cloudflare, among others. Cloudflare used NGINX before but it was not enough for them, so they developed their web server/edge proxy suited to their needs called Pingora.&#xA;&#xA;* Dropbox - [Optimizing web servers for high throughput and low latency](https://dropbox.tech/infrastructure/optimizing-web-servers-for-high-throughput-and-low-latency)&#xA;&#xA;* Cloudflare - [How Cloudflare outgrown NGINX and made way to Pingora](https://blog.cloudflare.com/how-we-built-pingora-the-proxy-that-connects-cloudflare-to-the-internet/)&#xA;&#xA;* Netflix - [NGINX Netflix archives](https://www.nginx.com/blog/tag/netflix/)&#xA;&#xA;&#xA;## Installing NGINX&#xA;&#xA;### Linux&#xA;&#xA;There are comprehensive guides for your specific flavor/package manager/preferences in the [official documentation](https://docs.nginx.com/nginx/admin-guide/installing-nginx/installing-nginx-open-source/) of NGINX.&#xA;&#xA;A couple of common types of installation medium instructions are as follows:&#xA;&#xA;```bash&#xA;# APT&#xA;sudo apt update&#xA;sudo apt install nginx&#xA;&#xA;# YUM&#xA;sudo yum install epel-release&#xA;sudo yum update&#xA;sudo yum install nginx&#xA;```&#xA;&#xA;Check the status of the NGINX service to ensure the installation was successful or not with the command:&#xA;&#xA;```bash&#xA;sudo systemctl status nginx&#xA;```&#xA;&#xA;If this doesn&#39;t have any errors or fatal messages, the nginx server is up and running on port 80 i.e. on `127.0.0.1` on the system.&#xA;&#xA;### MacOS&#xA;&#xA;The installation on MacOS for NGINX is pretty simple with homebrew. The following [article](https://dev.to/arjavdave/installing-nginx-on-mac-46ac) walks through the steps of the installation:&#xA;&#xA;```bash&#xA;brew update&#xA;brew install nginx&#xA;nginx&#xA;```&#xA;&#xA;If you do not want to install it from homebrew, this [gist](https://gist.github.com/beatfactor/a093e872824f770a2a0174345cacf171) can help install it from the source.&#xA;&#xA;### Windows&#xA;&#xA;For Windows installation, you can follow the [guide](https://nginx.org/en/docs/windows.html) from the official documentation.&#xA;&#xA;```bash&#xA;# INSTALL the https://nginx.org/en/download.html&#xA;# A Zip file with the name nginx-version.zip will be downlaoded&#xA;# COPY it to the desired location and use that path while unzipping&#xA;cd c:\&#xA;unzip nginx-1.25.3.zip&#xA;cd nginx-1.25.3&#xA;start nginx&#xA;```&#xA;&#xA;You can check the status of NGINX if the installation was successful or not with the command:&#xA;&#xA;```bash&#xA;tasklist /fi &#34;imagename eq nginx.exe&#34;&#xA;```&#xA;&#xA;This should be from the installation section.&#xA;&#xA;## Understanding the default config&#xA;&#xA;When you have completed the installation of nginx, you can see the default nginx configuration in the file path as `/etc/nginx/nginx.conf` in Linux/macOS or `C:&#xA;ginx&#xA;</content>
      <type>posts</type>
    </item>
    <item>
      <title>Django App from Scratch Using Docker with Debian Base Image</title>
      <link>meetgor.com/django-app-from-scratch</link>
      <description>Creating a django basic application with configuration for static files, templates and user authentication using docker and debian base image.</description>
      <pubDate>Tue, 24 May 2022 00:00:00 UTC</pubDate>
      <content>## Pull a Fresh Debian Image&#xA;&#xA;Create a docker container from a Debian image, the following command can be used to pull a debain 11-slim image and create a container of it, also enter into the container in a interactive environment `-it` mode. &#xA;&#xA;```&#xA;docker run -v $(pwd):/var/www --rm -it -p 8001:80 debian:11-slim&#xA;```&#xA;&#xA;## Create a Django App from Shell script&#xA;&#xA;Now, since we are inside a Debian container, we can enter a few commands, you can refer to the Mark Gibney&#39;s [GitHub repository](https://github.com/no-gravity/web_app_from_scratch) for the script.&#xA;&#xA;```&#xA;apt update&#xA;&#xA;apt install wget&#xA;&#xA;wget https://raw.githubusercontent.com/no-gravity/web_app_from_scratch/main/django.sh&#xA;```&#xA;&#xA;Also, if you want to do a few adjustments, you can install an editor, get used to vim or use nano.&#xA;&#xA;```&#xA;apt install vim &#xA;&#xA;OR&#xA;&#xA;apt install nano&#xA;```&#xA;&#xA;```&#xA;chmod +x django.sh&#xA;bash django.sh&#xA;```&#xA;&#xA;I also have a few adjustment of the original script, that accepts a project name and creates a django project based on the positional parameter given to it. You can get it from the [quick-setup-script repository](https://github.com/Mr-Destructive/quick-setup-scripts/blob/main/django_docker.sh) or directly the [script](https://raw.githubusercontent.com/Mr-Destructive/quick-setup-scripts/main/django_docker.sh).&#xA;&#xA;To use the above file, you need to execute the command as :&#xA;&#xA;```&#xA;chmod +x django_docker.sh&#xA;bash django_docker.sh &lt;project_name&gt;&#xA;```&#xA;&#xA;This will generate the project in the `/var/www/` folder with the name of the project. The script will prompt you with a few things for setting up at some iterations like basic application setup , `static file` configuration, `basic tempalte` setup and the `user authentication` setup.&#xA;&#xA;## Copy the contents from the docker container&#xA;&#xA;You can copy the contents of the folder into your local machine by entering the [cp](https://docs.docker.com/engine/reference/commandline/cp/) command in docker. &#xA;&#xA;```&#xA;docker cp &lt;container_id&gt;:/var/www/&lt;project_name&gt; /path/in_local_machine/&#xA;```&#xA;&#xA;This will copy the project in the docker container into the local machine for you to extend and tweak it as per your needs.&#xA;&#xA;That&#39;s a basic Django Project Setup by using Docker with a Debian Image.&#xA;</content>
      <type>til</type>
    </item>
    <item>
      <title>Django Project with PostgreSQL Deployment on Railway App</title>
      <link>meetgor.com/django-deploy-railway</link>
      <description>Creating and Configuring a Django Application for deployment on Railway.app Platform</description>
      <pubDate>Thu, 19 May 2022 00:00:00 UTC</pubDate>
      <content>&#xA;## Introduction&#xA;&#xA;We have already seen the process of deployment of a Django app on Heroku, now we can move to another platform which is [Railway App](https://railway.app). This allows a faster and more intuitive way to deploy a Django app(or any sort of web app). This platform has several [Starter Apps](https://railway.app/starters) for shipping your app in several clicks, definitely, it would require some configuration and tweaking a bit.&#xA;&#xA;We will be following similar steps from the [Django-Heroku Deployment Guide](https://mr-destructive.github.io/techstructive-blog/series/django-deployment/) for configuring and setting up our Django project for the deployment on the Railway app. We explore a few different ways to create and deploy a Django project on Railway.&#xA;&#xA;&#xA;## Creating a Project on Railway App&#xA;&#xA;Once we have our Django project setup, we can move ahead and create a Railway Project. A Railway project is a collection of environments, plugins, services, and deployment variables. By heading on the [New Project](https://railway.app/new) webpage, you can log in or sign up for a free account and create a simple project.&#xA;&#xA;Here we can have a few options:&#xA;&#xA;1. Create a Django App Template (Djangopy Starter)&#xA;2. Pull a Project from a GitHub Repository (Deploy from GitHub Repo)&#xA;&#xA;We&#39;ll look into each of them, the first one is by allowing the `Railway` bot to create a prebuilt Django template on our GitHub account. The second option is for fetching and deploying an existing Django project repository on GitHub.&#xA;&#xA;## Railway Django Project Template&#xA;&#xA;Railway provides a simple Django project template, it consists of a single app and a simple view that displays a `HttpResponse`. The Django project template provided by Railway is open source and available on [GitHub](https://github.com/railwayapp/starters/tree/master/examples/djangopy). With this method, you won&#39;t require any django project to create by yourself, it would be a template of django project created by the railway bot. Though for extending and building a meaningful django project, you will have to clone the repository and make necessary changes to it.&#xA;&#xA;Create a Project by heading on to the [New Project](https://railway.app/new) Tab and search for `Django`, you should see a `django` project as a starter pack.&#xA;&#xA;![New Railway Django Project](https://res.cloudinary.com/techstructive-blog/image/upload/v1652945887/blog-media/django-deployment/railway-django-new-project.png)&#xA;&#xA;Once you select the Django project, we have an initial configuration tab opened up for us. It is mandatory to fill the `SECRET_KEY` environment variable as it makes your django project more secure. Also, do change the name of the `repository` as it will be the name of your repository name in your GitHub account.&#xA;&#xA;To create a `SECRET_KEY` key, you can move into your terminal and do some python wizardry.&#xA;&#xA;Open a Python REPL, by entering the command `python` or `python3`. Import the `secrets` module and run the function `token_hex(24)` which will generate a key of length 24.&#xA;&#xA;```&#xA;python&#xA;&#xA;import secrets&#xA;secrets.token_hex(24)&#xA;```&#xA;&#xA;![Python Secret Key Generation](https://res.cloudinary.com/techstructive-blog/image/upload/v1652946842/blog-media/django-deployment/python-secret-key-gen.png)&#xA;&#xA;Now, copy the `SECRET_KEY` without quotes into the prompt and this will create a repository on your GitHub with the provided name. The `Railway` Bot will create a django project with the name `djangopy` in that repository with some pre-configured settings.&#xA;&#xA;![Django Proejct Create](https://res.cloudinary.com/techstructive-blog/image/upload/v1652947362/blog-media/django-deployment/create-project-django.png)&#xA;&#xA;![Railway Bot creating Djangopy](https://res.cloudinary.com/techstructive-blog/image/upload/v1652947344/blog-media/django-deployment/railway-bot-djangopy.png)&#xA;&#xA;This will create a simple repository on your GitHub but also a django application deployed on Railway along with PostgreSQL Database attached to it.&#xA;&#xA;![Railway Django Project Dashboard](https://res.cloudinary.com/techstructive-blog/image/upload/v1652947689/blog-media/django-deployment/deployed-project-dashboard.png)&#xA;&#xA;So, this has deployed the project on Railway with this [https://djangopy-production-43cb.up.railway.app/](https://djangopy-production-43cb.up.railway.app/) URL Link. The name of the link can be configured from the Settings Tab in Dashboard Section and editing the Service Domains and even adding a Custom domain.&#xA;&#xA;So this is how we deploy a basic django application on railway app. Further, you can modify the contents of the Github repository and push the code by committing the changes and it will pick it from there and also deploy it automatically, thereby creating a sort of CI-CD.&#xA;&#xA;We&#39;ll be demonstrating this in the next section which is a method to deploy the project from a custom GitHub repository i.e. by setting up everything ourselves and then attaching the Railway app for deployment. The benefit of this method is that we can configure some already existing Django applications by tinkering a bit.&#xA;&#xA;## Deploying from GitHub repository to Railway&#xA;&#xA;This is the second method for deploying the Railway project. For this we need a proper Django Project, we will set up a django application from scratch, I have already created a simple CRUD application in Django for a Blog on [GitHub](https://github.com/Mr-Destructive/django-blog). This won&#39;t be a Django guide for setting up views and creating models, I&#39;ve explained all the setup of the django-blog in my [Django Basics series](https://mr-destructive.github.io/techstructive-blog/series/django-basics/).&#xA;&#xA;### Creating a Django Application&#xA;&#xA;For deploying an app, we definitely need an app, we need to create a basic Django application to deploy on the web. We&#39;ll be creating a simple blog application with a couple of views and a simple model structure. As for the database, we&#39;ll be using Postgres as Railway has an database service for it and it is pretty easy to configure.&#xA;&#xA;#### Set up a virtual environment&#xA;&#xA;We need to set up a virtual environment in order to keep the Django project neat and tidy by managing the project-specific dependencies and packages. We can use the [virtualenv](https://pypi.org/project/virtualenv/) package to isolate a python project from the rest of the system.&#xA;&#xA;```&#xA;# install the virtualenv package&#xA;pip install virtualenv&#xA;&#xA;# create a virtual env for the project&#xA;virtualenv .venv&#xA;&#xA;# activate the virtualenv&#xA;Windows:&#xA;.venv\Scriptsï¿½ctivate&#xA;&#xA;Linux/macOS:&#xA;source .venv/bin/activate&#xA;```&#xA;&#xA;This will set up the project nicely for a Django project, you now install the core Django package and get started with creating a Django application.&#xA;&#xA;&#xA;```bash&#xA;# install django&#xA;pip install django&#xA;&#xA;# start a django project&#xA;django-admin startproject blog .&#xA;&#xA;cd blog&#xA;&#xA;# create a application in django project&#xA;python manage.py createapp api&#xA;&#xA;# Create some models, views, URLs, templates&#xA;&#xA;# run the server&#xA;python manage.py runserver&#xA;```&#xA;&#xA;We assume you already have a Django project configured with some basic URLs, views, and templates or static files as per your project and requirements, for this tutorial I will be using the simple blog application from my previous Django tutorials as a reference. As said earlier, you can follow along with my [Django Basics](https://techstructiveblog.hashnode.dev/series/django-basics) series and refer to the Blog Application project on [GitHub](https://github.com/Mr-Destructive/django-blog).&#xA;&#xA;### Configuring the Django Application&#xA;&#xA;Make sure to create and activate the virtual environment for this django project. This should be done to manage the dependencies and packages used in the project. If you are not aware of the virtual environment and django setup, you can follow up with this [post](https://mr-destructive.github.io/techstructive-blog/django-setup-script/).&#xA;&#xA;#### Creating a runtime.txt file&#xA;&#xA;Now, Firstly we need to specify which type and version of language we are using. Since Django is a Python-based web framework, we need to select the python version in a text file.&#xA;&#xA;**runtime.txt**&#xA;```&#xA;python-3.9.5&#xA;```&#xA; &#xA;Here, the version can be anything as per your project and the packages installed.  &#xA;&#xA;#### Creating requirements.txt file&#xA;&#xA;We&#39;ll first create a `requirements.txt` file for storing all the dependencies and packages installed in the application. This will help in installing dependencies while deploying the application. We can either use a `requirements.txt` file using `virtualenv` or a `Pipfile` using Pipenv. Both serve the same purpose but a bit differently. &#xA;&#xA;Assuming you are in an isolated virtual environment for this Django project, you can create a requirements.txt file using the below command:&#xA;&#xA;Make sure the virtualenv is activated before running the command:&#xA;&#xA;```&#xA;pip freeze &gt; requirements.txt&#xA;```&#xA;&#xA;This will create a simple text file that contains the package names along with the versions used in the current virtual environment. A simple Django requirements file would look something like this:&#xA;&#xA;```&#xA;asgiref==3.4.1&#xA;Django==3.2.11&#xA;pytz==2021.3&#xA;sqlparse==0.4.2&#xA;typing_extensions==4.0.1&#xA;```&#xA;&#xA;![pip freeze command](https://res.cloudinary.com/techstructive-blog/image/upload/v1652956558/blog-media/django-deployment/railway_requirements_freeze.png)&#xA;&#xA;This is vanilla Django without any additional dependencies but if you have integrated other functionalities like Django Rest Framework, PostgreSQL, Crispy Forms, Schedulers, etc. there might be additional dependencies that become quite crucial for the smooth working of the project.  &#xA;&#xA;If you are using pipenv, you don&#39;t need to make any efforts to manually activate and manage the virtual environment, the dependencies are installed and taken care of by the pipenv installer. You just need to make sure to install any package with `pipenv install` and not `pip install` for better and improved package tracking.&#xA;&#xA;So, that&#39;s all we need to take care of packages and keep a list of these integrated packages for the project. You need to update the requirements.txt file every time you install any new package or modify the dependencies for a project. Simply use the command `pip freeze &gt; requirements.txt` in the activated virtual environment.  &#xA;&#xA;#### Creating a Procfile&#xA;&#xA;Next up, we have the `Procfile`, a procfile is a special file that holds information about the processes to be run to start or activate the project. In our case, for django we need a web process that can manage the server.&#xA;&#xA;A Procfile is a simple file without any extension, make sure to write `Procfile` as it is the name of the file in the root folder of the project. Inside the file add the following contents:&#xA;&#xA;**Procfile**&#xA;```Procfile&#xA;web: gunicorn &lt;project_name&gt;.wsgi&#xA;```&#xA;&#xA;For the Procfile, Railway has a built [Procfile](https://github.com/railwayapp/starters/blob/master/examples/djangopy/Procfile) in the Django Template, you can refer to it and create it as follows:&#xA;&#xA;```Procfile&#xA;web: python manage.py migrate &amp;&amp; gunicorn &lt;project_name&gt;.wsgi&#xA;```&#xA;&#xA;As we can see we have defined the `web` process using `gunicorn`, [Gunicorn](https://pypi.org/project/gunicorn/) is a python package that helps in creating WSGI HTTP Server for the UNIX operating systems. So, we need to install the package and update the package dependency list. &#xA;&#xA;```&#xA;pip install gunicorn&#xA;&#xA;pip freeze &gt; requirements.txt&#xA;``` &#xA;&#xA;#### Configuring Environment Variables&#xA;&#xA;We need to keep our secrets for the django project out of the deployed code and in a safe place, we can create environment variables and keep them in a `.env` file which will be git-ignored. We do not want this `.env` file to be open source and thus should not be committed.&#xA;&#xA;We first need to create a new secret key if you already have a GitHub repository, chances are you would have committed the default secret key open for the world to see, it is an insecure way of deploying django apps in production.&#xA;&#xA;This should generate a secret key that only you know now. So, just copy the key without the quotes and create a file `.env` in the root project folder. &#xA;&#xA;**.env**&#xA;```&#xA;SECRET_KEY=76419fd6885a677f802fd1d2b5acd0188e23e001042b05a8&#xA;```&#xA;&#xA;The `.env` file should also be added to the `.gitignore` file, so simply append the following in the `.gitignore` file&#xA;&#xA;```&#xA;.env&#xA;```&#xA;&#xA;This is just one of the environment variables in our django project, further, we will also be adding a few other variables like database credentials, debug status, etc.&#xA;&#xA;We have now created environment variables for our django application, we now need a way to parse these environment variables into the Django project.  &#xA;&#xA;#### Parsing Environment variables using python-dotenv&#xA;&#xA;We will use [python-dotenv](https://pypi.org/project/python-dotenv/) to parse variables into the django settings configurations like `SECRET_KEY` and `DATABASES`. &#xA;&#xA;- Install `python-dotenv` with pip with the command :  &#xA;&#xA;```&#xA;pip install python-dotenv&#xA;```&#xA;&#xA;We need to then modify the default variables in the `settings.py` file. Firstly, we will load in the `.env` file for accessing the environment variables for the configuration of the project.&#xA;&#xA;Append the following code, to the top of the `settings.py` file, make sure don&#39;t override the configuration so remove unnecessary imports and configurations.&#xA;&#xA;``` python&#xA;# &lt;project_name&gt;/settings.py&#xA;&#xA;import os&#xA;from dotenv import load_dotenv&#xA;&#xA;BASE_DIR = Path(__file__).resolve().parent.parent&#xA;&#xA;load_dotenv(os.path.join(BASE_DIR, &#34;.env&#34;))&#xA;&#xA;```&#xA;&#xA;We have imported the package `dotenv` basically the `python-dotenv` into the `settings.py` file and the module `os` for loading the `.env` file. The `load_dotenv` function helps in loading the `key-value` pairs which are the configuration variables that can act as actual environment variables. We provide in a file to the [load_dotenv](https://saurabh-kumar.com/python-dotenv/) function which is the `.env` file in our case, you can pick up any location for the `.env` file but make sure to change the location while parsing the file into the `load_dotenv` function. &#xA;&#xA;After loading the variables into the `settings.py` file, we now need to access those variables and set the appropriate variables the configuration from the variables received from the `load_dotenv` function. The `os.getenv` function to access the environment variables. The `os.getenv` function takes a parameter as the `key` for the environment variable and returns the value of the environment variable.&#xA;&#xA;``` python&#xA;SECRET_KEY = os.getenv(&#34;SECRET_KEY&#34;)&#xA;```&#xA;&#xA;We have secretly configured the `SECRET_KEY` for the django project. If you have any other variables as simple key-value pairs like `AUTH` passwords, username, etc. you can use this method to get the configuration variables. &#xA;&#xA;#### Add gitignore file&#xA;&#xA;We would need a `.gitignore` file for only committing the project and pushing it to the remote repository. Here, we will set up a minimal `.gitignore` file in our root repository.&#xA;&#xA;Here&#39;s a sample `.gitignore` for a minimal django project.&#xA;&#xA;```gitignore&#xA;.env/&#xA;.venv/&#xA;env/&#xA;venv/&#xA;*.env&#xA;&#xA;*.pyc&#xA;db.sqlite3&#xA;staticfiles/&#xA;```&#xA;&#xA;If you want a full-fledged `.gitignore` for a complex django project, you can take the reference from Jose Padilla&#39;s [gitignore Template](https://github.com/jpadilla/django-project-template/blob/master/.gitignore) for a django project.  &#xA;&#xA;That would be good to go for creating and serving up the project while deploying the project on Railway App.&#xA;&#xA;### Git Commit the Django Project&#xA;&#xA;Now, we can safely commit the code and push it to a GitHub repository. This will make sure you have a basic django proejct on GitHub from which we can build the Railway app into deployment.&#xA;&#xA;```&#xA;git status &#xA;&#xA;git add .&#xA;&#xA;git commit -m &#34;config for railway deployment&#34;&#xA;```&#xA;&#xA;Carefully check the status of the git repository before committing and make sure you don&#39;t forget anything by mistake, only commit the files which you think are important and ignore the rest.&#xA;&#xA;```&#xA;git remote add rail https://github.com/Mr-Destructive/django-blog/tree/railway&#xA;&#xA;git push rail railway&#xA;```&#xA;&#xA;![Django Project Push GitHub](https://res.cloudinary.com/techstructive-blog/image/upload/v1652956515/blog-media/django-deployment/railway_push_github.png)&#xA;&#xA;### Creating the Railway project&#xA;&#xA;Now, since we have a django project nicely configured and setup on GitHub, we can pull out a railway project and fetch the project from the GitHub repository.&#xA;&#xA;&lt;video width=&#34;800&#34; height=&#34;450&#34; controls&gt;&#xA;  &lt;source src=&#34;https://res.cloudinary.com/techstructive-blog/video/upload/v1652970864/blog-media/django-deployment/railway_project_init.webm&#34; type=&#34;video/mp4&#34;&gt;&#xA;&lt;/video&gt;&#xA;&#xA;![Railway Proejct from GitHub](https://res.cloudinary.com/techstructive-blog/image/upload/v1652970665/blog-media/django-deployment/railway-proejct-github.png)&#xA;&#xA;#### Spinning up the database &#xA;&#xA;We also need a database that we can attach in the django project in our Railway application. We can integrate a `PostgreSQL` database as a service running in our Railway project instance. We can do that by locating the `+New` tab on the project dashboard and attaching a `Database` in the drop-down menu. &#xA;&#xA;&#xA;&lt;video width=&#34;800&#34; height=&#34;450&#34; controls&gt;&#xA;  &lt;source src=&#34;https://res.cloudinary.com/techstructive-blog/video/upload/v1652963718/blog-media/django-deployment/postgres_spinup_railway_d2xkpt.mp4&#34; type=&#34;video/mp4&#34;&gt;&#xA;&lt;/video&gt;&#xA;&#xA;After creating a database service, we need the credentials of the database or the `DATABASE_URL` of the PostgreSQL in order to integrate it into the django settings. We can locate into the `Connect` of the PostgreSQL service and grab the URL of the database. This can be stored in the main django application serves as an environment variable. &#xA;&#xA;```&#xA;DATABASE_URL=postgresql://postgres:SE74bEw@containers-51.railway.app:6919/railway&#xA;```&#xA;&#xA;![PostgreSQL database variable config](https://res.cloudinary.com/techstructive-blog/image/upload/v1652964755/blog-media/django-deployment/postgres_database_config.png)&#xA;&#xA;In the Django Starter Project provided by Railway, we should have a PostgreSQL database integrated as a Service. So, we can consume the database in our django project. &#xA;&#xA;We will add the `DATABASE_URL` config variable into the `.env` file and also add it into the main Django project service so that it can communicate to the database. You need to copy the `DATABSE_URL` into our local setup file(`.env` file). Copy the Database URL and paste it into the `.env` file as follows:&#xA;&#xA;```env&#xA;DATABASE_URL=postgres://sjxgipufegmgsw:78cbb568e@ec2-52-4-104-184.compute-1.amazonaws.com:5432/dbmuget&#xA;```&#xA;&#xA;The format for the Postgres URL is as follows:&#xA;&#xA;```&#xA;postgresql://[user[:password]@][netloc][:port][/dbname]&#xA;```&#xA;&#xA;#### Loading Database configuration&#xA;&#xA;Databases are a bit different as compared to other simple configurations in django. We need to make a few adjustments to the default database configuration. We will install another package `dj-database-url` to configure `DATABASE_URL`. Since the databse_url has a few components we need a way to extract the details like the `hostname`, `port`, `database_name`, and `password`. Using the `dj-database-url` package we have a few functions that can serve the purpose.&#xA;&#xA;```&#xA;pip install dj-database-url&#xA;```&#xA;&#xA;At the end of your `settings.py` file, append the following code. &#xA;&#xA;``` python&#xA;import dj_database_url&#xA;&#xA;DATABASE_URL = os.getenv(&#34;DATABASE_URL&#34;)&#xA;&#xA;DATABASES = {&#xA;    &#34;default&#34;: dj_database_url.config(default=DATABASE_URL, conn_max_age=1800),&#xA;}&#xA;```&#xA;&#xA;We would need an adapter for making migrations to the `PostgreSQL` database i.e. the `psycopg2` package. This is a mandatory step if you are working with `postgres` database. This can be installed with the simple pip install:&#xA;&#xA;```&#xA;pip install psycopg2&#xA;&#xA;# If it does not work try&#xA;pip install psycopg2-binary&#xA;&#xA;&#xA;# if still error persists try installing setuptools&#xA;pip install -U setuptools&#xA;pip install psycopg2&#xA;```&#xA;&#xA;Now, that we have configured the database, we can now apply migrations to the new database of Postgres provided by Railway. We will simply run the migrate command and in the Railway Project the PostgreSQL database would have been modified and an appropriate schema should be applied.&#xA;&#xA;```&#xA;python manage.py migrate&#xA;```&#xA;&#xA;![Railway PostgreSQL db migrate](https://res.cloudinary.com/techstructive-blog/image/upload/v1652965335/blog-media/django-deployment/railway_database_migrate.png)&#xA;&#xA;Make sure to update the `requirements.txt` file before pushing the project to Railway app for making sure everything works as expected. Since we have installed a few additional packages that are directly used in the `settings.py` file, we need to run the `pip freeze` command to update the `requiremnets.txt` file.&#xA;&#xA;#### Serving Static Files&#xA;&#xA;Now, if you have some static files like `CSS`, `Javascript`, or `images`, you need to configure the static files in order to serve them from the Railway app server. We will require another config variable for collecting the static files from the selected repository. &#xA;&#xA;```python&#xA;&#xA;STATIC_URL = &#34;static/&#34;&#xA;STATICFILES_DIRS = [os.path.join(BASE_DIR, &#34;static&#34;)]&#xA;STATIC_ROOT = os.path.join(BASE_DIR, &#34;staticfiles&#34;)&#xA;&#xA;``` &#xA;&#xA;Here, if you have served your static files from the `static` folder in the root directory of your django project, you can add the above code in the settings.py file. We will collect all static files in the folder along with the default static files provided by django in the `staticfiles` directory. Run the following command if you want to test whether the static files are properly collected and served.&#xA;&#xA;```&#xA;python manage.py collectstatic &#xA;```&#xA;&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1652600828657/JgL4nLuiL.png)&#xA;&#xA;So, this command will collect all the static files and store them in a single place. We see that the files from the admin section are also copied as well as the custom static files from the project configuration. Now, we can move on to set the config variable for the Railway app in the Variables Tab.&#xA;&#xA;```&#xA;DISABLE_COLLECTSTATIC = 0&#xA;```&#xA;&#xA;We can set the `DISABLE_COLLECTSTATIC` variable as `0` or `1` indicating whether to disable it or not. We have currently enabled the static file collection while deploying the app but you can set it to `1` to disable the collection of static files.&#xA;&#xA;Since I first tested the application on Railway, the static files don&#39;t work as expected, we need another package to make sure the staticfiles are served property. We will be installing the `whitenoise` package which serves as the middleware for serving the static files.&#xA;&#xA;```&#xA;pip install whitenoise&#xA;```&#xA;&#xA;Add the whitenoise middleware `whitenoise.middleware.WhiteNoiseMiddleware` to the `MIDDLEWARE` list in the `settings.py` file.&#xA;&#xA;```python&#xA;MIDDLEWARE = [&#xA;...&#xA;...&#xA;...&#xA;    &#39;whitenoise.middleware.WhiteNoiseMiddleware&#39;,&#xA;]&#xA;&#xA;```&#xA;&#xA;That should be enough to make the most of the deployment on Railway app. You will have to make a few adjustments as per your requirements and project.&#xA;&#xA;&#xA;## Deploy to GitHub&#xA;&#xA;Finally, we will have all the pieces connected, only we need to push the code to the GitHub repository in order to trigger a build on the railway app. So, we make sure we commit every critical thing that are in our django project and include every sensitiv information in the gitignore file.&#xA;&#xA;```&#xA;pip freeze &gt; requirements.txt&#xA;```&#xA;&#xA;This step is quite important because you need to make sure that all the packages are listed in the `requirements.txt` file else you will have to wait for the build to fail and redeploy.&#xA;&#xA;Make sure the server is running first on your local machine, remember the server will be set up from scratch but the database will already have applied migrations if you have applied migrations before after connecting the Railway database service.&#xA; &#xA;```&#xA;python manage.py collectstatic&#xA;&#xA;python manage.py runserver&#xA;```&#xA;&#xA;This will set up the origin of the remote repository that will be pushing the project code. Next, make sure to commit the code which will contain all the required stuff for deploying the code.&#xA;&#xA;Checklist for deploying the code&#xA;&#xA;```&#xA;- requirements.txt&#xA;- Procfile&#xA;- runtime.txt&#xA;- django-project&#xA;- environment variables / config variables &#xA;- static file configuration&#xA;- database configuration&#xA;- migrate schema of database &#xA;- gitignore file for ignoring virtualenvs, .env file, staticfiles, etc&#xA;```&#xA;&#xA;```&#xA;git push origin main&#xA;&#xA;origin -&gt; remote repository URL&#xA;main   -&gt; branch name&#xA;```&#xA;&#xA;![Deployed Railway Project](https://res.cloudinary.com/techstructive-blog/image/upload/v1652966755/blog-media/django-deployment/railway-production-ss.png)&#xA;&#xA;## Railway CLI &#xA;&#xA;Railway also provides a cool CLI, it has some quite handy features like creating and managing services, local development environment, etc. We&#39;ll just dive into a few nice features of the CLI tool.&#xA;&#xA;We&#39;ll first install the CLI on our local system, for that the guide is quite limited in a way for a few options to choose from like `npm`, `shell`, and `scoop`. For me, the shell was the way to go, but it had a few issues with permission, so I made a few changes in the [install.sh](https://github.com/railwayapp/cli/blob/master/install.sh) script ran on my machine and it worked fine.&#xA;&#xA;![Install Railway CLI](https://res.cloudinary.com/techstructive-blog/image/upload/v1652944836/blog-media/django-deployment/railway-install.png)&#xA;&#xA;Now, that we have the `Railway CLi` set up we can run a few commands like:&#xA;&#xA;```&#xA;railway login&#xA;&#xA;OR&#xA;&#xA;# if it doesn&#39;t work&#xA;railway login --browserless&#xA;&#xA;OR&#xA;&#xA;# with node&#xA;npx railway login&#xA;```&#xA;&#xA;![Railway CLI Login](https://res.cloudinary.com/techstructive-blog/image/upload/v1652967978/blog-media/django-deployment/railway-cli-login.png)&#xA;&#xA;This will sign you in with your railway account.&#xA;&#xA;We now need to link our project and execute and work around the command in that project from the railway app. To link a project from a railway account, you have to use the `link` command. The link command takes in a parameter as the project id which can be obtained from the project dashboard settings tab. &#xA;&#xA;```&#xA;railway link &lt;proejct_id&gt;&#xA;```&#xA;&#xA;&lt;video width=&#34;800&#34; height=&#34;450&#34; controls&gt;&#xA;  &lt;source src=&#34;https://res.cloudinary.com/techstructive-blog/video/upload/v1652969451/blog-media/django-deployment/railway-proejct-link.webm&#34; type=&#34;video/mp4&#34;&gt;&#xA;&lt;/video&gt;&#xA;&#xA;&#xA;Now, we can explore some more commands like `run`, `up`, and so on. The `run` command is pretty solid and provides an interface to run commands for your project for instance in Django, create a superuser, manage dependencies, collectstatic files, etc. This allows us to set up and run commands into the actual production environment just from the CLI.&#xA;&#xA;&#xA;```&#xA;# railway run (command to be executed)&#xA;railway run python manage.py createsuperuser&#xA;&#xA;# deploy the project&#xA;railway up&#xA;```&#xA;&#xA;&lt;video width=&#34;800&#34; height=&#34;450&#34; controls&gt;&#xA;  &lt;source src=&#34;https://res.cloudinary.com/techstructive-blog/video/upload/v1652968693/blog-media/django-deployment/railway-cli-run-cmd.webm&#34; type=&#34;video/mp4&#34;&gt;&#xA;&lt;/video&gt;&#xA;&#xA;So, this was all about creating and deploying a django application on Railway. Here are some reference links:&#xA;&#xA;- [GitHub Repository](https://github.com/Mr-Destructive/django-blog/tree/railway)&#xA;- [Live Webpage](https://django-blog-production.up.railway.app/)&#xA;&#xA;## Conclusion&#xA;&#xA;So, that&#39;s how we deploy a Django project on the Railway app. We have seen two of the many ways to create and deploy a Django application on Railway. We also integrated a PostgreSQL service provided by Railway in our Django Project. Using the Railway CLI, we were able to manage and create Projects from the terminal, also interaction of the railway project was achieved along with the production build from CLI.&#xA;&#xA;Hopefully, you liked the above tutorial, if you have any questions. feedback, or queries, you can contact me on the Social handles provided below. Thank you for reading and till the next post Happy Coding :) &#xA;</content>
      <type>posts</type>
    </item>
    <item>
      <title>Django + PostgreSQL Deployment on Heroku</title>
      <link>meetgor.com/django-deploy-heroku</link>
      <description></description>
      <pubDate>Sun, 15 May 2022 00:00:00 UTC</pubDate>
      <content>&#xA;## Introduction&#xA;&#xA;Django projects are quite easy to build and simple to understand, you might have created a Django application and wanted to show it to the world? You can deploy a basic Django application with a database(PostgreSQL) with Heroku. It provides a decent free tier with some great features and add-ons. A free tier Heroku account has a limitation of 5 apps, limited data in the database, limited connections to the server per month, and so on.  &#xA;&#xA;Though the free tier is not a great option for bigger applications, it suits really well for smaller scale and ide projects, so we will be looking into the details of how to deploy a Django application to [Heroku](https://heroku.com/) which is a Platform as Service (PaS). &#xA;&#xA;This series will be an extension of the series [Django basics](https://techstructiveblog.hashnode.dev/series/django-basics) which covered the basics of the Django framework, we covered from basic Django fundamentals to building a CRUD API. In this series, we will be exploring some platforms for giving a better understanding of how things work and understanding a few components that were left as default while understanding the basics of Django. Let&#39;s get started with [Django Deployment](https://techstructiveblog.hashnode.dev/series/django-deployment)!&#xA;&#xA;## Creating a Django Application&#xA;&#xA;For deploying an app, we definitely need an app, we need to create a basic Django application to deploy on the web. We&#39;ll be creating a simple blog application with a couple of views and a simple model structure. As for the database, we&#39;ll be using Postgres as Heroku has an add-on for it and it is pretty easy to configure. &#xA;&#xA;### Set up a virtual environment&#xA;&#xA;We need to set up a virtual environment in order to keep the Django project neat and tidy by managing the project-specific dependencies and packages. We can use the [virtualenv](https://pypi.org/project/virtualenv/) package to isolate a python project from the rest of the system.&#xA;&#xA;```&#xA;# install the virtualenv package&#xA;pip install virtualenv&#xA;&#xA;# create a virtual env for the project&#xA;virtualenv .venv&#xA;&#xA;# activate the virtualenv&#xA;Windows:&#xA;.venv\Scriptsï¿½ctivate&#xA;&#xA;Linux/macOS:&#xA;source .venv/bin/activate&#xA;```&#xA;&#xA;This will set up the project nicely for a Django project, you now install the core Django package and get started with creating a Django application.&#xA;&#xA;&#xA;```bash&#xA;# install django&#xA;pip install django&#xA;&#xA;# start a django project&#xA;django-admin startproject blog .&#xA;&#xA;cd blog&#xA;&#xA;# create a application in django project&#xA;python manage.py createapp api&#xA;&#xA;# Create some models, views, URLs, templates&#xA;&#xA;# run the server&#xA;python manag.py runserver&#xA;```&#xA;&#xA;We assume you already have a Django project configured with some basic URLs, views and templates or static files as per your project and requirements, for this tutorial I will be using the simple blog application from my previous Django tutorials as a reference. You can follow along with my [Django Basics](https://techstructiveblog.hashnode.dev/series/django-basics) series and refer to the Blog Application project on [GitHub](https://github.com/Mr-Destructive/django-blog).&#xA;&#xA;## Configuring the Django Application&#xA;&#xA;Make sure to create and activate the virtual environment for this django project. This should be done to manage the dependencies and packages used in the project. If you are not aware of the virtual environment and django setup, you can follow up with this [post](https://mr-destructive.github.io/techstructive-blog/django-setup-script/).&#xA;&#xA;### Creating a runtime.txt file&#xA;&#xA;Now, Firstly we need to specify which type and version of language we are using. Since Django is a Python-based web framework, we need to select the python version in a text file.&#xA;&#xA;**runtime.txt**&#xA;```&#xA;python-3.9.5&#xA;```&#xA; &#xA;Here, the version can be anything as per your project and the packages installed.  &#xA;&#xA;### Creating requirements.txt file&#xA;&#xA;We&#39;ll first create a `requirements.txt` file for storing all the dependencies and packages installed in the application. This will help in installing dependencies while deploying the application. We can either use a `requirements.txt` file using `virtualenv` or a `Pipfile` using Pipenv. Both serve the same purpose but a bit differently. &#xA;&#xA;Assuming you are in an isolated virtual environment for this Django project, you can create a requirements.txt file using the below command:&#xA;&#xA;Make sure the virtualenv is activated before running the command:&#xA;&#xA;```&#xA;pip freeze &gt; requirements.txt&#xA;```&#xA;&#xA;This will create a simple text file that contains the package names along with the versions used in the current virtual environment. A simple Django requirements file would look something like this:&#xA;&#xA;```&#xA;asgiref==3.4.1&#xA;Django==3.2.11&#xA;pytz==2021.3&#xA;sqlparse==0.4.2&#xA;typing_extensions==4.0.1&#xA;```&#xA;&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1652614060461/kPTZ9R8Xp.png)&#xA;&#xA;This is vanilla Django without any additional dependencies but if you have integrated other functionalities like Django Rest Framework, PostgreSQL, Crispy Forms, Schedulers, etc. there might be additional dependencies that become quite crucial for the smooth working of the project.  &#xA;&#xA;If you are using pipenv, you don&#39;t need to make any efforts to manually activate and manage virtual environment, the dependencies are installed and taken care of by the pipenv installer. You just need to make sure to install any package with `pipenv install` and not `pip install` for better and improved package tracking.&#xA;&#xA;So, that&#39;s all we need to take care of packages and keep a list of these integrated packages for the project. You need to update the requirements.txt file every time you install any new package or modify the dependencies for a project. Simply use the command `pip freeze &gt; requirements.txt` in the activated virtual environment.  &#xA;&#xA;### Creating a Procfile&#xA;&#xA;Next up, we have the `Procfile`, a procfile is a special file that holds information about the processes to be run to start or activate the project. In our case, for django we need a web process that can manage the server.&#xA;&#xA;A Procfile is a simple file without any extension, make sure to write `Procfile` as it is as the name of the file in the root folder of the project. Inside the file add the following contents:&#xA;&#xA;**Procfile**&#xA;```Procfile&#xA;web: gunicorn &lt;project_name&gt;.wsgi&#xA;```&#xA;&#xA;As we can see we have defined the `web` process using `gunicorn`, [Gunicorn](https://pypi.org/project/gunicorn/) is a python package that helps in creating WSGI HTTP Server for the UNIX operating systems. So, we need to install the package and update the package dependency list. &#xA;&#xA;```&#xA;pip install gunicorn&#xA;&#xA;pip freeze &gt; requirements.txt&#xA;``` &#xA;&#xA;That would be good to go for creating and serving up the project while deploying the project on Heroku.&#xA;&#xA;## Creating a Heroku App&#xA;&#xA;A Heroku App is basically like your Django Project, you can create apps for deploying your django projects on Heroku. You are limited to 5 apps on the Free tier but that can be expanded on the paid plans.  &#xA;&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1652456732519/cyOQZ3UZK.png)&#xA;&#xA;The name of your heroku app should be unique globally, you need to try a few combinations before a good one fits your project. This name has no significance on your django project code, though it would be the name from which you would access the web application as a name `&lt;app-name&gt;.herokuapp.com`.   &#xA;&#xA;So, choose it wisely if you are not attaching a custom domain. You can attach a custom domain, you can navigate to the `domain` section in the settings tab. &#xA;&#xA;&#xA;## Setting up the database &#xA;&#xA;To set up and configure a database in django on Heroku, we need to manually acquire and attach a PostgreSQL add-on to the heroku app.&#xA;&#xA;- Firstly locate to the Resources Tab in your Heroku app.&#xA;- Search `postgres` in the Add-ons Search bar&#xA;- Click on the `Heroku Postgres` Add-on&#xA;- Submit the Order Form and you have the add-on enabled in the app.&#xA;&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1652456842273/ijeWsVdOf.png)&#xA;&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1652456877447/dLG30ac_m.png)&#xA;&#xA;Alternately, you can use the Heroku CLI,&#xA;&#xA;### Heroku CLI Setup&#xA;&#xA;You can use the Heroku CLI which is a command-line interface for managing and creating Heroku applications.  You need to first install the CLI by heading towards the [heroku documentation](https://devcenter.heroku.com/articles/heroku-command-line). Once the CLI is installed, you need to login into your Heroku account by entering the following command:&#xA;&#xA;```&#xA;heroku login&#xA;&#xA;``` &#xA;&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1652605604920/HnTr2KbTi.png)&#xA;&#xA;This will allow us to work with heroku commands and manage our heroku application from the command line itself. The below command will create a add-on for `heroku-postgres` for the application provided as the parameter options &#xA;&#xA;```&#xA;heroku addons:create heroku-postgresql:hobby-dev --app &lt;app_name&gt;&#xA;```&#xA;&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1652507166978/i1IJ5EGjJ.png)&#xA;&#xA;This should hopefully add a fresh instance of a postgres database for your heroku app. You can now configure the database for your project, we simply need the Database URL from the heroku app dashboard. We&#39;ll see how to configure the environment variables in Django for Heroku to keep your secrets like the `SECRET_KEY`, `DATABSE_URL`, etc. &#xA;&#xA;If you want MySQL as a database, you can check out the [ClearDB](https://devcenter.heroku.com/articles/cleardb) Add-On for Heroku to simply attach it like Postgres on your Heroku application. Also, if you wish to add [MongoDB](https://www.mongodb.com/compatibility/mongodb-and-django) into your Django application on Heroku, you can use [Object Rocket](https://devcenter.heroku.com/articles/ormongo)(OR Mongo). It is not available in the free tier though, unlike PostgreSQL and MySQL.&#xA;&#xA;## Configuring Environment Variables&#xA;&#xA;We need to keep our secrets for the django project out of the deployed code and in a safe place, we can create environment variables and keep them in a `.env` file which will be git-ignored. We do not want this `.env` file to be open source and thus should not be committed.  &#xA;&#xA;&#xA;&#xA;We first need to create a new secret key if you already have a GitHub repository, chances are you would have committed the default secret key open for the world to see, it is an insecure way of deploying django apps in production.&#xA;&#xA;So, open up a terminal and launch a python REPL:&#xA;&#xA;```&#xA;python&#xA;&#xA;import secrets&#xA;secrets.token_hex(24)&#xA;```&#xA;&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1652512239319/5AACaTGOD.png)&#xA;&#xA;This should generate a secret key that only you know now. So, just copy the key without the quotes and create a file `.env` in the root project folder. &#xA;&#xA;**.env**&#xA;```&#xA;SECRET_KEY=76419fd6885a677f802fd1d2b5acd0188e23e001042b05a8&#xA;```&#xA;&#xA;The `.env` file should also be added to the `.gitignore` file, so simply append the following in the `.gitignore` file&#xA;&#xA;```&#xA;.env&#xA;```&#xA;This file is only created to test the project locally, so we need to also make this key available on heroku. For doing that we need to add Config Variables to the heroku app. &#xA;&#xA;- Locate to the Settings Tab in your Heroku Application Dashboard&#xA;- We have the `Config Vars` section in the located tab&#xA;= We need to reveal those variables and we will be able to see all the variables.&#xA;&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1652456988713/5VM6E29_o.png)&#xA;&#xA;We already have a `DATABASE_URL` variable declared when we attached the `django-postgres` database to our application. We will now add one more variable to the Application, i.e. the `SECRET_KEY`. Simply, enter the name of the key and also enter the value of the key, so basically a key-value pair. Simply click on the `Add` button and this will add the variable to your application.&#xA;&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1652515244870/LRyPzJr41.png)&#xA;&#xA;You also need to copy the `DATABSE_URL` into our local setup file(`.env` file). Copy the Database URL and paste it into the `.env` file as follows:&#xA;&#xA;```env&#xA;DATABASE_URL=postgres://sjxgipufegmgsw:78cbb568e@ec2-52-4-104-184.compute-1.amazonaws.com:5432/dbmuget&#xA;```&#xA;The format for the postgres URL is as follows:&#xA;&#xA;```&#xA;postgresql://[user[:password]@][netloc][:port][/dbname]&#xA;```&#xA;&#xA;We have now created environment variables for our django application and also added config vars in the heroku app, we now need a way to parse these environment variables into the Django project.  &#xA;&#xA;### Parsing Environment variables using python-dotenv&#xA;&#xA;We will use [python-dotenv](https://pypi.org/project/python-dotenv/) to parse variables into the django settings configurations like `SECRET_KEY` and `DATABASES`. &#xA;&#xA;- Install `python-dotenv` with pip with the command :  &#xA;```&#xA;pip install python-dotenv&#xA;```&#xA;We need to then modify the default variables in the `settings.py` file. Firstly, we will load in the `.env` file for accessing the environment variables for the configuration of the project.&#xA;&#xA;Append the following code, to the top of the `settings.py` file, make sure don&#39;t override the configuration so remove unnecessary imports and configurations.&#xA;&#xA;``` python&#xA;# &lt;project_name&gt;/settings.py&#xA;&#xA;import os&#xA;from dotenv import load_dotenv&#xA;&#xA;BASE_DIR = Path(__file__).resolve().parent.parent&#xA;&#xA;load_dotenv(os.path.join(BASE_DIR, &#34;.env&#34;))&#xA;&#xA;```&#xA;&#xA;We have imported the package `dotenv` basically the `python-dotenv` into the `settings.py` file and the module `os` for loading the `.env` file. The `load_dotenv` function helps in loading the `key-value` pairs which are the configuration variables that can act as actual environment variables. We provide in a file to the [load_dotenv](https://saurabh-kumar.com/python-dotenv/) function which is the `.env` file in our case, you can pick up any location for the `.env` file but make sure to change the location while parsing the file into the `load_dotenv` function. &#xA;&#xA;After loading the variables into the `settings.py` file, we now need to access those variables and set the appropriate variables the configuration from the variables received from the `load_dotenv` function. The `os.getenv` function to access the environment variables. The `os.getenv` function takes a parameter as the `key` for the environment variable and returns the value of the environment variable.&#xA;&#xA;``` python&#xA;SECRET_KEY = os.getenv(&#34;SECRET_KEY&#34;)&#xA;```&#xA;&#xA;We have secretly configured the `SECRET_KEY` for the django project. If you have any other variables as simple key-value pairs like `AUTH` passwords, username, etc. you can use this method to get the configuration variables. &#xA;&#xA;### Loading Database configuration&#xA;&#xA;Databases are a bit different as compared to other simple configurations in django. We need to make a few adjustments to the default database configuration. We will install another package `dj-database-url` to configure `DATABASE_URL`. Since the databse_url has a few components we need a way to extract the details like the `hostname`, `port`, `database_name`, and `password`. Using the `dj-database-url` package we have a few functions that can serve the purpose.&#xA;&#xA;```&#xA;pip install dj-database-url&#xA;```&#xA;&#xA;At the end of your `settings.py` file, append the following code. &#xA;&#xA;``` python&#xA;import dj_database_url&#xA;&#xA;DATABASE_URL = os.getenv(&#34;DATABASE_URL&#34;)&#xA;&#xA;DATABASES = {&#xA;    &#34;default&#34;: dj_database_url.config(default=DATABASE_URL, conn_max_age=1800),&#xA;}&#xA;```&#xA;&#xA;We would need an adapter for making migrations to the `PostgreSQL` database i.e. the `psycopg2` package. This is a mandatory step if you are working with `postgres` database. This can be installed with the simple pip install:&#xA;&#xA;```&#xA;pip install psycopg2&#xA;&#xA;# If it does not work try&#xA;pip install psycopg2-binary&#xA;&#xA;&#xA;# if still error persists try installing setuptools&#xA;pip install -U setuptools&#xA;pip install psycopg2&#xA;```&#xA;&#xA;Now, that we have configured the database, we can now apply migrations to the fresh database of postgres provided by heroku. We will simply run the migrate command and in the heroku app the PostgreSQL database would have been modified and an appropriate schema should be applied.&#xA;&#xA;```&#xA;python manage.py migrate&#xA;```&#xA;&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1652602284553/oTtGev28-.png)&#xA;&#xA;Make sure to update the `requirements.txt` file before pushing the project to Heroku for making sure everything works as expected. Since we have installed a few additional packages that are directly used in the `settings.py` file, we need to run the `pip freeze` command to update the `requiremnets.txt` file.&#xA;&#xA;## Serving Static Files&#xA;&#xA;Now, if you have some static files like `CSS`, `Javascript`, or `images`, you need to configure the staticfiles in order to serve them from the heroku server. We will require another config variable for collecting the static files from the selected repository. &#xA;&#xA;```python&#xA;&#xA;STATIC_URL = &#34;static/&#34;&#xA;STATICFILES_DIRS = [os.path.join(BASE_DIR, &#34;static&#34;)]&#xA;STATIC_ROOT = os.path.join(BASE_DIR, &#34;staticfiles&#34;)&#xA;&#xA;``` &#xA;&#xA;Here, if you have served your static files from the `static` folder in the root directory of your django project, you can add the above code in the settings.py file. We will collect all static files in the folder along with the default static files provided by django in the `staticfiles` directory. Run the following command if you want to test whether the static files are properly collected and served.&#xA;&#xA;```&#xA;python manage.py collectstatic &#xA;```&#xA;&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1652600828657/JgL4nLuiL.png)&#xA;&#xA;So, this command will collect all the static files and store them in a single place. We see that the files from the admin section are also copied as well as the custom static files from the project configuration. Now, we can move on to set the config variable for the heroku app.&#xA;&#xA;```&#xA;DISABLE_COLLECTSTATIC = 0&#xA;```&#xA;&#xA;We can set the `DISABLE_COLLECTSTATIC` variable as `0` or `1` indicating whether to disable it or not. We have currently enabled the static file collection while deploying the app but you can set it to `1` to disable the collection of static files.&#xA;&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1652613798420/mbqzf1Kqd.png)&#xA;&#xA;Since I first tested the application on heroku, the static files don&#39;t work as expected, we need another package to make sure the staticfiles are served property. We will be installing the `whitenoise` package which serves as the middleware for serving the static files.&#xA;&#xA;```&#xA;pip install whitenoise&#xA;```&#xA;&#xA;Add the whitenoise middleware `whitenoise.middleware.WhiteNoiseMiddleware` to the `MIDDLEWARE` list in the `settings.py` file.&#xA;&#xA;````python&#xA;MIDDLEWARE = [&#xA;...&#xA;...&#xA;...&#xA;    &#39;whitenoise.middleware.WhiteNoiseMiddleware&#39;,&#xA;]&#xA;&#xA;```&#xA;&#xA;That should be enough to make the most of the deployment on heroku. You will have to make a few adjustments as per your requirements and project.&#xA;&#xA;## Deploy from GitHub&#xA;&#xA;We are now all set to deploy the application on Heroku, we can use the `Connect to GitHub` or `Heroku CLI` to push the code into production. Heroku CLI is quite easy with a few sets of commands but if your project is deployed on GitHub, you can straightaway let the deployment start the build on a push to a specific branch. This becomes quite automotive and easy to scale while deploying a large-scale application. &#xA;&#xA;```&#xA;pip freeze &gt; requirements.txt&#xA;```&#xA;&#xA;This step is quite important because you need to make sure that all the packages are listed in the `requirements.txt` file else you will have to wait for the build to fail and redeploy.&#xA;&#xA;Make sure the server is running first on your local machine, remember the server will be set up from scratch but the database will already have applied migrations if you have applied migrations before after connecting the Heroku Postgres database.&#xA; &#xA;```&#xA;python manage.py collectstatic&#xA;&#xA;python manage.py runserver&#xA;```&#xA;&#xA;This will set up the origin of the remote repository that will be pushing the project code. Next, make sure to commit the code which will contain all the required stuff for deploying the code.&#xA;&#xA;Checklist for deploying the code&#xA;&#xA;```&#xA;- requirements.txt&#xA;- Procfile&#xA;- runtime.txt&#xA;- django-project&#xA;- environment variables / config variables &#xA;- static file configuration&#xA;- database configuration&#xA;- migrate schema of database &#xA;- gitignore file for ignoring virtualenvs, .env file, staticfiles, etc&#xA;```&#xA;&#xA;here&#39;s a sample `.gitignore` for a minimal django project.&#xA;&#xA;```gitignore&#xA;.env/&#xA;.venv/&#xA;env/&#xA;venv/&#xA;*.env&#xA;&#xA;*.pyc&#xA;db.sqlite3&#xA;staticfiles/&#xA;```&#xA;&#xA;If you want a full-fledged `.gitignore` for a complex django project, you can take the reference from Jose Padilla&#39;s [gitignore Template](https://github.com/jpadilla/django-project-template/blob/master/.gitignore) for a django project.  &#xA;&#xA;### Git Commit the Django Project&#xA;```&#xA;git status &#xA;&#xA;git add .&#xA;&#xA;git commit -m &#34;config for heroku deployment&#34;&#xA;```&#xA;Carefully check the status of the git repository before committing and make sure you don&#39;t forget anything by mistake, it won&#39;t a big problem but it would mess up the build process.&#xA;&#xA;&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1652613991525/hxQgtGOoM.png)&#xA;&#xA;After committing the code, we can now push the code to GitHub. We first need to set the remote repository reference to be able to push the code to it. &#xA;&#xA;```&#xA;git remote add origin https://github.com/&lt;username&gt;/&lt;repo_name&gt;&#xA;```&#xA;This will set up the `origin` as the remote repository on GitHub. Once the remote repository is created, we can move into the push of the git repository that will trigger the build. First, navigate to the `Deploy` section in the heroku app&#39;s dashboard where we want to connect the `GitHub` repository and allow the automatic deploy from a branch in this case we have chosen the `main` branch.&#xA;&#xA;Due to some `Heroku` Internal Server Issues, the GitHub integration seems to have broken and isn&#39;t working as of May 2022, but it might work later. &#xA;&#xA;Below is a screenshot of my previous project deployed to Heroku using a GitHub repository.&#xA;&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1652605497382/5VuQUQ0t0.png)&#xA;&#xA;```&#xA;git push origin main&#xA;```&#xA;&#xA;This will prompt you for your GitHub credentials and will deploy the commits to the remote repository on GitHub. This push on the main branch should also trigger the build process of the heroku app for this django project. You can navigate to the Activity section for the Build logs. &#xA;&#xA;If you have followed the article well, and your repository has all the correct configurations, the build will succeed, else chances are you might have missed a few things and the app might have crashed. You can debug your application build with the simple heroku CLI command:&#xA;&#xA;```&#xA;heroku logs --tail -a &lt;app_name&gt;&#xA;```&#xA;&#xA;This can be quite handy and saves a lot of time in understanding what went wrong in the build. It might be related to database migration, static files, python package not found, and some silly mistakes and errors that can be fixed after committing the code and pushing it to GitHub again.&#xA;&#xA;If you do not want a GitHub repository, you can directly push the code from the local git repository to the remote heroku app center. This will require us the Heroku CLI.&#xA;&#xA;## Heroku CLI&#xA;&#xA;We can use the heroku CLI for pushing the code via the simple git repository. We can push the references via the branch and a remote repository on heroku to build our app.  For this, we assume you have heroku installed and logged in. We will require the django project code and heroku cli to build the django web application.&#xA;&#xA;```bash&#xA;heroku git:remote -a &lt;heroku_app_name&gt;&#xA;&#xA;# for my case&#xA;heroku git:remote -a blog-django-dep&#xA;```&#xA;&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1652614221069/vCAKD0zsz.png)&#xA;&#xA;After this, you can commit your code and the project as git repository. We have added the remote repository location on heroku, we can now simply push the code to the remote repository.&#xA;&#xA;```&#xA;git push heroku main&#xA;```&#xA;&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1652614125785/uEzFQ9VvQ.png)&#xA;&#xA;Here, `heroku` is the remote repository location and `main` is the branch of the repository. This will push the code to the repository and thereafter create a build to deploy the Django project as a Heroku application.&#xA;&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1652614381808/kYTmB3EO2p.png)&#xA;&#xA;You can hit the `Open App` button on the top right corner and there should be your deployed Django application. &#xA;&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1652610395538/xjUiODhoK.png)&#xA;&#xA;&#xA;## A Few Tricks and Gotchas&#xA;&#xA;There are a few tricks and issues that you might pop into while deploying a django project on heroku, especially the build process. It requires a few iterations to get the complete app setup.&#xA;&#xA;### Run command from the Dashboard console&#xA;&#xA;If you don&#39;t have heroku CLI set up and want to fix a few things on the pushed code to the heroku app, you can use the `Run Console` option from the `More` Tab on the top right corner of theApplication dashboard. This is a great way to run migrations, configure static files or tweak a few things here and there without messing up the code on GitHub or the remote git repositories. &#xA;&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1652614775294/lgDPwr2yr.png)&#xA;&#xA;&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1652614821950/uTzQVB8sC.png)&#xA;&#xA;&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1652614845269/BkZhu3SGH.png)&#xA;&#xA;### Deploy with Docker &#xA;&#xA;You can even use the docker container to deploy a Django application on Heroku. It is a great way of learning a lot of deployment strategies and techniques using Docker. You&#39;ll get familiar with interesting concepts like virtualization, and containerization, and also learn Docker on the way. You can follow this tutorial on [Deploying Django applications with Docker on Heroku](https://testdriven.io/blog/deploying-django-to-heroku-with-docker/). Also, you can check out the official Heroku documentation for [deploying python applications](https://devcenter.heroku.com/articles/deploying-python).&#xA;&#xA;### What are Dynos?&#xA;&#xA;Dynos are simply web processes or workers that serve your web application. Dynos in Heroku are allocated based on the build process, once the slug is created a dyno is created as it runs on a VM container. This simply means there are limitations on how to use the web application and its sleep process. The hobby tier is sufficient for normal testing projects and side projects though you will have to pay and move into advance tiers to increase the dyno allocations and scaling of those web processes. &#xA;&#xA;It&#39;s not a simple thing to understand but to keep it simple, it might be a container to process the client&#39;s request and serve the page for a finite duration of the interaction. Also, your application will sleep after half an hour, if you try to reload the application every half an hour it will consume your resource allocation for the month and this is how the tiers and divided for paid services on Heroku. You can check out the detail over [here](https://www.heroku.com/pricing#containers).&#xA;&#xA;## Conclusion&#xA;&#xA;So, that is one of the ways we can deploy a Django application on Heroku with the PostgreSQL database. You can find the [django-blog project] on [GitHub] for following along with the deployment process.  In the next few parts of the series, we will be hopefully covering other platforms where you can deploy a Django o application.&#xA;&#xA;Hopefully, you liked the above tutorial, if you have any questions. feedback, or queries, you can contact me on the Social handles provided below. Thank you for reading and till the next post Happy Coding :) &#xA;</content>
      <type>posts</type>
    </item>
    <item>
      <title>Django Basics: Admin Section</title>
      <link>meetgor.com/django-basics-admin</link>
      <description></description>
      <pubDate>Wed, 26 Jan 2022 00:00:00 UTC</pubDate>
      <content>&#xA;## Introduction&#xA;&#xA;In the previous section, we configured the database in our Django project. We will move ahead and interact with the Admin Section in Django. Django has a built-in Admin Section which we can use to manage our apps and models. We will create a admin account(superuser) and try to render our custom Model in the Admin Interface. We shall further discuss the customization in the Admin section as per our requirements and necessity. &#xA;&#xA;## What is the Admin Section?&#xA;&#xA;Admin Section is a powerful built-in utility provided by Django. It gives the administrative rights over the web project, the interface is neat and provides out of the box functionality to interact with the models in our project without us manually creating any mapping the views and urls. It is restricted to only superusers or trusted users to use as it is for administrative purpose. &#xA;&#xA;The Admin section is present by default for any django application. The interface provides the Django User and Group Model by default. Additionally we can have our own custom models to interact with. For every registered model you have the CRUD (create / read / update / delete ) functionality which makes it very easy and convenient to test the working of model before working around with APIs or moving ahead in the project.  &#xA;&#xA;## Setting up an admin account (superuser)&#xA;&#xA;In order to access the Admin section, we need to create a superuser. A superuser as the name suggests is a user who has the supreme authority for performing operations in the project in this case a web application. To create a super user we need to run a command from the command line that takes our name, email and password as input to create the super user. &#xA;&#xA;```bash&#xA;python manage.py createsuperuser&#xA;```&#xA;&#xA;This will prompt you for a couple of things like :&#xA;- `username` the default is `admin`.&#xA;- `email` it&#39;s not necessary to put one.&#xA;- `password` should be at least eight characters long&#xA;&#xA;The password input will be silent which means you cannot see what you type for security reasons, and the password field will be confirmed once, so you&#39;ll have to enter the password once more. But that&#39;s all you have to do to create a super user in Django for your web project.&#xA;&#xA;![createsuperuser demo](http://res.cloudinary.com/dgpxbrwoz/image/upload/v1643198415/blogmedia/etubc7efwls47n3cj2bw.gif)&#xA;&#xA;## Navigating the admin section &#xA;&#xA;After creating a superuser, we can now navigate the admin section from the browser. The admin section is by default located in the `/admin` url-route i.e. you need to navigate to `http://127.0.0.1:8000/admin` here `8000` can be any port as your preferred port number for the django application. &#xA;&#xA;After vising the Admin route, you will be prompted to a Login Screen. You simply need to add in the username and password which you entered while creating the superuser a while ago and you should be in the Admin Section. The default admin section as of Django `3.2.9` looks like following: &#xA;&#xA;![Django Admin Section](http://res.cloudinary.com/dgpxbrwoz/image/upload/v1643199349/blogmedia/h0k9jkqxozrtxvwsapkj.png)&#xA;&#xA;## Components of the Admin Section&#xA;&#xA;The Admin interface looks quite simple but is quite powerful and customizable. We have the Default Models in Django which are labelled in the `Authentication and Authorization` section namely the `Users` and `Groups`. You can see we have `+ Add` and the `Change` links to actually create the data associated with those Models. In the Admin Section you can basically play around with your models, it was not designed to act as the frontend for your application that&#39;s what the Django [documentation](https://docs.djangoproject.com/en/4.0/ref/contrib/admin/#module-django.contrib.admin) says and is absolutely correct. &#xA;&#xA;So, we don&#39;t have much things to explore when the UI is concerned as it is simple and straight forward to understand. We&#39;ll dive into how to register our models into the Admin section and from there on we can explore the UI to perform CRUD operations.&#xA;&#xA;### Built-in Models&#xA;&#xA;Django has two built-in and registered models in the Admin Section as said earlier.&#xA;&#xA;1. Users&#xA;2. Groups&#xA;&#xA;Users is basically the Django&#39;s User Model which provides the basic Authorization functionalities which further can be added to the we application. The Super User that was created from the `createsuperuser` command was associated with the Django User model. &#xA;&#xA;We have basic fields in the User model like:&#xA;&#xA;1. Username&#xA;2. Email-ID&#xA;3. Password&#xA;&#xA;If we go to the route `http://127.0.0.1:8000/admin/auth/user/add/`, we can see a form like UI that allows us to add a User.&#xA;&#xA;![User Creation Form - Admin](http://res.cloudinary.com/dgpxbrwoz/image/upload/v1643208170/blogmedia/m3fdul2qcmgvgegm5r6y.png)&#xA;&#xA;But there is no option for the `Email-ID` that&#39;s because for the User model has been modifies from the base [User Model](https://docs.djangoproject.com/en/4.0/ref/contrib/auth/#user-model) and we can see the `superuser` has all the attributes the `User` class has like the email, first name, last name and so on. &#xA;&#xA;![Super User Model - Admin](http://res.cloudinary.com/dgpxbrwoz/image/upload/v1643208828/blogmedia/wrdfkiqaqmw4wxtpopgn.png)&#xA;&#xA;We can even extend this functionality or modify the existing attributes of the User Model in our custom Model. For example, we can add Age, Phone number, etc in to our Custom User Model. How? We&#39;ll look into that later but that is to give an idea about the User Model.&#xA;&#xA;There is a lot more than just the details like Username, email and password. We need a way to manage which user is allowed to access what components. So, this is termed as `Permissions` in the User model, for the super user we might have the access to the admin page but a regular User might not. This is a permission which is by default implemented by Django in the User model. Like wise we can extend this functionality to add more permissions depending on the Model we are working with. &#xA;&#xA;### Groups &#xA;&#xA;This is the model which can hold a group of certain Model. The typical example hers is a group of User and its permissions. We can have a group for the developers of a project(this project) and a separate Group for rest of the Users. This creates a well-defined boundary for different types of User in a larger application.  &#xA;&#xA;Currently, we don&#39;t have any groups created by default. Since it is a concept to be learnt for a quite large project with thousands of Users.&#xA;&#xA;## Registering Models in Admin Section&#xA;&#xA;Now, what are the default Admin section looks like, we can move on to register our own models in the Admin section. To do that, inside the app folder(a django app) you will see a `admin.py` file. Make sure to be in the app in which you have created a model. We need to register a Model to the admin section. &#xA;&#xA;```python&#xA;# app_name/admin.py&#xA;&#xA;from django.contrib import admin&#xA;from .models import Article&#xA;&#xA;admin.site.register(Article)&#xA;```&#xA;The `admin.site.register` basically adds a Model to the Admin Interface. &#xA;The article Model is defined as follows:&#xA;&#xA;```python&#xA;# app_name/models.py&#xA;&#xA;from django.db import models&#xA;&#xA;class Article(models.Model):&#xA;    title = models.CharField(max_length=127)&#xA;    post = models.TextField()&#xA;    created = models.DateTimeField(auto_now_add=True)&#xA;    updated = models.DateTimeField(auto_now=True)&#xA;```&#xA;&#xA;This will add the Model `Article` in the Admin Section. We can now perform CRUD operations in the Admin section. &#xA;   &#xA;## Performing actions with Admin Section&#xA;&#xA;So, perform CRUD operations, we can navigate to the Model Article and simply click the `Add Article` Button to add a object of the model Article. We will be presented a form to fill. Now here we, can see the fields which are actually to be inputted by the user. We don&#39;t see the fields like `created` and `updated` as they are automatically set as per the current time. &#xA;&#xA;![Add Article - Admin](http://res.cloudinary.com/dgpxbrwoz/image/upload/v1643215768/blogmedia/bq0gvbxhhxzwiwutgqpi.png)&#xA;After filling this form you will see `Article object (1)` which looks like a non-sense thing to look at. This is where the `__str__` [function](https://docs.djangoproject.com/en/4.0/ref/models/instances/) comes handy and saves the day. &#xA;&#xA;![Article Object](http://res.cloudinary.com/dgpxbrwoz/image/upload/v1643215997/blogmedia/sy7ygnskxfl0psgaj4z4.png)&#xA;&#xA;Now, we can see we also have the ability to Delete and Update the Post. This is the best thing about the Django admin interface. It&#39;s quite intuitive for complex model to be tested before moving ahead and making necessary corrections if required.&#xA;&#xA;### Modifying the Model (without migrations)&#xA;&#xA;Now, at this stage if we forgot to add the `__str__` function, we need to add it into our models. But what about the migrations? We do not need to migrate this changes as there is no change in how to model is structures. We are changing how to Admin Interface should present our model. So, we&#39;ll make changes to our model but only aesthetically. &#xA;&#xA;```python&#xA;#app_name/models.py&#xA;&#xA;from django.db import models&#xA;&#xA;class Article(models.Model):&#xA;    title = models.CharField(max_length=127)&#xA;    post = models.TextField()&#xA;    created = models.DateTimeField(auto_now_add=True)&#xA;    updated = models.DateTimeField(auto_now=True)&#xA;&#xA;    def __str__(self):&#xA;        return self.title&#xA;```&#xA;&#xA;And now if we refresh the Admin page, we can see the title is the object name :)&#xA;&#xA;![Model str function](http://res.cloudinary.com/dgpxbrwoz/image/upload/v1643216721/blogmedia/vwyoccgmhnl4aosqc6qf.png)&#xA;&#xA;This looks a trivial change but makes a big difference for large applications and dataset. &#xA;&#xA;### Verbose name&#xA;&#xA;We can add a verbose name for an attribute inside an Model. A verbose name is a human readable name for a field. So, let&#39;s say we have a attribute/field called `fname`, the person who might have created the model might know it stands for `first name` but someone else might not. So in this case, we can add the `verbose_name` to be used as the name in the Admin Section. &#xA;&#xA;We also have `verbose_name_plural` which will be handy for a model name. We do not wnat Django to just add `s` before any Model name, it might look good for `Articles`, `Questions`, `Posts` but for `Quizs`, `Categorys`, `Heros` look too funny than `Quizzes`, `Categories` and `Heroes` respectively. &#xA;&#xA;```python&#xA;# app_name/models.py&#xA;&#xA;from django.db import models&#xA;&#xA;class Article(models.Model):&#xA;    title = models.CharField(max_length=127, verbose_name=&#34;headline&#34;)&#xA;    post = models.TextField(verbose_name=&#39;content&#39;)&#xA;    created = models.DateTimeField(auto_now_add=True)&#xA;    updated = models.DateTimeField(auto_now=True)&#xA;&#xA;    def __str__(self):&#xA;        return self.title&#xA;&#xA;```&#xA;&#xA;![Verbose Name Attribute](https://res.cloudinary.com/dgpxbrwoz/image/upload/v1643219495/blogmedia/v5zphhohi27tvwsa3gsp.png)&#xA;&#xA;Again, we do not need to migrate any changes to the database as it is not a logical change in the schema of the database.&#xA;&#xA;```python &#xA;# app_name/models.py&#xA;&#xA;from django.db import models&#xA;&#xA;class Article(models.Model):&#xA;    title = models.CharField(max_length=127, verbose_name=&#34;title&#34;)&#xA;    post = models.TextField(verbose_name=&#39;content&#39;)&#xA;    created = models.DateTimeField(auto_now_add=True)&#xA;    updated = models.DateTimeField(auto_now=True)&#xA;&#xA;    def __str__(self):&#xA;        return self.title&#xA;&#xA;    class Meta:&#xA;        verbose_name_plural = &#39;Articless&#39;&#xA;```&#xA;&#xA;![Verbose Name Plural](https://res.cloudinary.com/dgpxbrwoz/image/upload/v1643219521/blogmedia/sf77v52ic9dheyvv0pvi.png)&#xA;&#xA;Though `Articless` sounds weird, it is just made for realizing that Django by default adds `s` to the Model name for representing as a Class in the Admin. &#xA;&#xA;### Admin Register Class&#xA;&#xA;We can even list not only the title but many things in a particular format, we need to define a class which will be derived by the `admin.ModelAdmin` class. &#xA;&#xA;```python&#xA;# app_name/admin.py&#xA;&#xA;from django.contrib import admin&#xA;from .models import Article&#xA;&#xA;@admin.register(Article)&#xA;class Article(admin.ModelAdmin):&#xA;    list_display = [&#xA;            &#39;title&#39;,&#xA;            &#39;created&#39;,&#xA;            &#39;updated&#39;,&#xA;            ]&#xA;```&#xA;&#xA;![Admin-List](https://res.cloudinary.com/dgpxbrwoz/image/upload/v1643217326/blogmedia/y32jmboypbmzyypt68l1.png)&#xA;&#xA;We are using the `admin.ModelAdmin` class as the base class to overwrite the `list_display` list which will display the mentioned items in the Admin Section as a list. We are also using the `admin.register` as the class Decorator to actually register the model in the Admin section. &#xA;&#xA;Now, we can see a lot of customization in the Admin section. This is just a glimpse of what customization is. This can be tailored as per your model and needs. &#xA;&#xA;## Conclusion&#xA;&#xA;So, in this section we were able to interact with the Admin section in Django. We were able to register our custom Model in the Admin interface and then customize the format of how it is displayed in the interface. Hopefully, from this part we are able to interact with the data and get our application to test how to plan ahead. In the next section we shall cover how to map up all of these together to create something meaningful and finally understand the Django development process. &#xA;&#xA;Thank you for reading, if you have any questions or improvements to suggest, please let me know in the comments. I&#39;ll be grateful if you you provide a feedback. Happy Coding :)&#xA;</content>
      <type>posts</type>
    </item>
    <item>
      <title>Django Basics: Database Configurations</title>
      <link>meetgor.com/django-database-conf</link>
      <description></description>
      <pubDate>Fri, 21 Jan 2022 00:00:00 UTC</pubDate>
      <content>&#xA;## Introduction&#xA;&#xA;In this part of the series, we will create an external database and configure the settings for that database. We also look into the process of migrations which is to convert a model which we created in the previous part into the actual structure/schema for the database. I&#39;ll be using `PostgreSQL` for most of the demonstrations but it should be similar for other database management tools. This part will make your Django project link to a local database.  &#xA;&#xA;## Selecting a Database&#xA;&#xA;If you have read my previous article about models, you would have got a glimpse of the tools to manage a database, but not quite to choose a database for your project. This section covers that specifically. We will see what options you have while selecting a database.&#xA;&#xA;- SQL databases&#xA;  - sqlite&#xA;  - PostgreSQL&#xA;  - MySQL&#xA;  - MariaDB&#xA;  - Oracle&#xA;&#xA;&#xA;Selecting a database hugely depends on the type of application you are going to make, but most of the time it&#39;s SQL as a choice just because it has been dominated for a variety of application types over 4 decades. Still, NoSQL is growing in popularity and has some advantages over SQL in many modern applications. You need to analyze your project a bit deeper and understand the flow of data in a better way to make a decision about SQL and No-SQL, but most of the time it&#39;s gonna be SQL. &#xA;&#xA;**Also Django doesn&#39;t officially support NoSQL, so you&#39;ll have to turn up some third-party libraries to integrate and manage a database.**&#xA;&#xA;After deciding the type of database, you have one more decision to make here. It&#39;s picking up a DBMS tool. There are a lot of databases like PostgreSQL, MySQL, MariaDB, Oracle, etc. you need to pick whichever you feel comfortable and the one which suits your project architecture and requirements more closely. Though there might be very few differences in all the SQL Database tools there are a few things that distinguishes one from the other. &#xA;&#xA;## Creating a Database&#xA;&#xA;To create a database, you need to go to the Admin app of the DBMS tool you are using, for Postgres it&#39;s pgAdmin, for MySQL it&#39;s MySQL Administrator or PHPMyAdmin. You need to do the research for setting up a database locally for your project. But Django already is paired with `SQLite` which is a relational database but with a few quirks. It is really great to get started with a project without creating or managing an entire database system. The SQLite database is all contained in a file called `db.sqlite3`. &#xA;&#xA;If you want to work on a particular database like PostgreSQL, MySQL, etc. you need to create the database using the management tool and keep the configuration data like `name`, `host`, `password`, etc. after creating the database. &#xA;&#xA;I&#39;ll give a demo of creating a simple database in PostgreSQL but mostly it is a bit different in other DBMS tools as each of them have their own GUI applications. Install [Postgres](https://www.postgresql.org/download/) and [pgAdmin](https://www.pgadmin.org/download/).&#xA;&#xA;This is a demonstration of creating a database in pgAdmin -3 &#xA;&#xA;![postgres - db creation](https://res.cloudinary.com/dgpxbrwoz/image/upload/v1642325269/blogmedia/postgcreate_wnmyre.gif)&#xA;&#xA;This is how you create a database in pgAdmin-3, it should be quite straightforward and simple to follow in other DBMS tools as well. You will also require a password to open the Admin interface for these tools, so keep that password handy we&#39;ll require that later.&#xA;&#xA;The following is the process to create a database/schema in MySQL&#xA;![mysql - db creation](https://res.cloudinary.com/dgpxbrwoz/image/upload/v1642327473/blogmedia/mysqlcreate_bnkqxg.gif)&#xA;&#xA;This will create an empty database in your local machine. We&#39;ll want our Django project to link that particular database and use it inside its applications. In the next part, we&#39;ll configure the `settings.py` file to access the database from the local machine.&#xA;&#xA;## Configurations for Database&#xA;&#xA;We need to configure the `settings.py` file for integrating the database in our project. Django has a dedicated section for the database in that file. By default, the database configuration is created for the SQLite database which as I said earlier it is the default database that Django uses if not specified and configured. &#xA;&#xA;So, when you first see the configuration for the database in the `settings.py` file, you will see configuration like the following:&#xA;&#xA;```python&#xA;DATABASES = {&#xA;    &#39;default&#39;: {&#xA;        &#39;ENGINE&#39;: &#39;django.db.backends.sqlite3&#39;,&#xA;        &#39;NAME&#39;: BASE_DIR / &#39;db.sqlite3&#39;,&#xA;    }&#xA;}&#xA;```&#xA;For PostgreSQL or any other database, we will require more things than the `sqlite` configuration. Namely, we will need the following:&#xA;&#xA;- `name` of the database&#xA;- `user` of the database&#xA;- `password` for that user&#xA;- `host` and `port` for the database. &#xA;&#xA;The port is optional as most of the database tools pick up the default port for their purpose. For PostgreSQL, the default port is `5432` and for MySQL is `3306`. Leave it blank like `&#39;PORT&#39;: &#39;&#39;,` if you are not sure what is the port for that database. We also need to specify the `ENGINE` as it is the database backend to be used for the project. There are options for specific databases as mentioned in the [documentation](https://docs.djangoproject.com/en/4.0/ref/settings/#engine).&#xA;&#xA;**PostgreSQL**:&#xA;&#xA;In PostgreSQL, the default user is `postgres`, it might depend on your configuration and setup though. The pgAdmin will prompt you for a password when first installing the Postgres on your machine. The password to be used is for the default user of the database. The `name` is the name that you gave while creating the database in the Postgres admin section. Finally, the host is generally `localhost` as we are using the local database which is our system, and `port` as said earlier is `5432` by default for PostgreSQL.&#xA;&#xA;```python&#xA;DATABASES = {&#xA;    &#39;default&#39;: {&#xA;        &#39;ENGINE&#39;: &#39;django.db.backends.postgresql&#39;,&#xA;        &#39;NAME&#39;: &#39;blogapp&#39;,&#xA;        &#39;USER&#39;: &#39;postgres&#39;,&#xA;        &#39;PASSWORD&#39;: &#39;12345678&#39;,&#xA;        &#39;HOST&#39;: &#39;localhost&#39;,&#xA;        &#39;PORT&#39;: &#39;5432&#39;,&#xA;    }&#xA;}&#xA;```&#xA;&#xA;**MySQL**:&#xA;&#xA;For MySQL, the default `user` is `root` and the `port` is `3306`. The password is the default password you use to access the MySQL Administrator application. &#xA;&#xA;```python&#xA;DATABASES = {&#xA;    &#39;default&#39;: {&#xA;        &#39;ENGINE&#39;: &#39;django.db.backends.mysql&#39;,&#xA;        &#39;NAME&#39;: &#39;blogapp&#39;,&#xA;        &#39;USER&#39;: &#39;root&#39;,&#xA;        &#39;PASSWORD&#39;: &#39;&#39;,&#xA;        &#39;HOST&#39;: &#39;localhost&#39;,&#xA;        &#39;PORT&#39;: &#39;3306&#39;,&#xA;    }&#xA;}&#xA;```&#xA;&#xA;For further details on how to configure a Database in a Django project you can check out these articles:&#xA;- [PostgreSQL setup in Django](https://dev.to/mungaigikure/how-to-set-up-postgres-in-your-django-project-575i)&#xA;- [MySQL setup in Django](https://medium.com/@omaraamir19966/connect-django-with-mysql-database-f946d0f6f9e3)&#xA;- [Maria DB setup in Django](https://medium.com/code-zen/django-mariadb-85cc9daeeef8)&#xA;- [Mongo DB setup in Django](https://www.mongodb.com/compatibility/mongodb-and-django)&#xA;&#xA;MongoDB is a NoSQL database so, it will be quite different to set up and configure the database at least in the longer run. I&#39;ve no experience with NoSQL so please forgive me in this part. There are very rare instances you will need a NoSQL database with Django. &#xA;&#xA;There are other configurations as well which might be specific for the purpose and can be explored in the [django documentation](https://docs.djangoproject.com/en/4.0/ref/databases/).&#xA;&#xA;### Verify the database connection&#xA;&#xA;To check if the database was actually linked in the Django project, I&#39;ll introduce you to a great tool in Django: `python manage.py shell` (make sure to be in the virtual environment).&#xA;This command will open a python interpreter in the shell. It is an interactive console so that we can test some aspects in our project. For instance to check if the database is connected or not:&#xA;&#xA;Execute the code after running the command `python manage.py shell` from a virtual environment.&#xA;&#xA;```python&#xA;import django    &#xA;print(django.db.connection.ensure_connection())&#xA;```&#xA;   &#xA;   If this returns `None` you are good to go. And if the result is tons of error messages, you have something wrong in the configuration or the database itself.&#xA;&#xA;![db connection test](https://res.cloudinary.com/dgpxbrwoz/image/upload/v1642342286/blogmedia/djb-8-db-connect_l4xqqr.png)&#xA;&#xA;### Installing database adapter&#xA;&#xA;Before we can do anything with the database, we need one thing which is a **database adapter**. Now, this is dependent on the database you are using. The list is as follows:&#xA;- [psycopg2](https://pypi.org/project/psycopg2/) for PostgreSQL&#xA;- [mysqlclient](https://pypi.org/project/mysqlclient/) for MySQL and MariaDB&#xA;- [cx-Oracle](https://pypi.org/project/cx-Oracle/) for Oracle&#xA;&#xA;SQLite does not require an adapter as the database is a file stored in the base directory as `db.sqlite3`&#xA;&#xA;The above list is nothing but Python packages that allow the Django ORM (which is under the hood python) to operate the database. To install them you can simply install with `pip` as `pip install psycopg2` , `pip install mysqlclient`, and so on. Make sure you are in a python virtual environment. &#xA;&#xA;After installing the particular package, we can now move on to the migration process.&#xA;&#xA;## Migrating the models &#xA;&#xA;Now, we have a clean and fresh instance of a database created. What next? We&#39;ll now use the logic in the [previous part](https://mr-destructive.github.io/techstructive-blog/django/python/web-development/2022/01/04/Django-Basics-P7.html), where we created and designed the logic for the database i.e. `Models`. Now, we can combine our physical database i.e. the database we just created on a DBMS tool locally, and the logical model to populate and give it a structure. &#xA;&#xA;We&#39;ll perform **migration** on our database. &#xA;&#xA;This is where the magic happens and probably the step which should be carefully be executed if working with a real-time (production-level) database. Because the commands you&#39;ll run are gonna directly affect the database. &#xA;&#xA;Making a migration is a two-step process. But what is migration?&#xA;&#xA;The Django documentation states it as the version control for the database schema and takes their word for that. It is basically a folder(hidden) that stores the state of your database structure just like commits in git. &#xA;&#xA;Let&#39;s see it practically&#xA;&#xA;### Makemigrations&#xA;For actually creating tables, relations attributes in a database from a model. We use the command `makemigrations`. This command creates a file inside the `migrations` folder inside the application folder whose model has been recently created or updated. It doesn&#39;t affect the database but it creates a file which in turn after a `migrate` command will be parsed to the actual database using the ORM.&#xA;So, for any attribute or logical change inside the model we use the `makemigrations` command as below:&#xA;```&#xA;python manage.py makemigrations&#xA;```&#xA;   &#xA;   We do not use the above command if any functional change i.e. operations involving querying the database and other operations that don&#39;t affect how the database is structured or stored. Though we have to use the `makemigrations` command when the fields in the model are changed even slightly.  &#xA;&#xA;### Migrate&#xA;&#xA;To see the result or create the actual tables, attributes, and relations among the tables in the database, we need to run the command `migrate` which will see the latest file in the migration folder and execute the queries to change the schema of the database. So, this is a very powerful command that can perform SQL queries under the hood with python. The below demonstration shows the output of these two commands in a Postgres database.&#xA;&#xA;```&#xA;python manage.py migrate&#xA;```&#xA;&#xA;### Demonstration&#xA;&#xA;![db migration](https://res.cloudinary.com/dgpxbrwoz/image/upload/v1642334950/blogmedia/migration_zi6d2c.gif)&#xA;&#xA;Let&#39;s follow the GIF/video in sequence:&#xA;&#xA;1. Create the database in the DBMS tool&#xA;2. Configure `settings.py` for the database connection&#xA;3. Install `psycopg2` or DB-specific adapter.&#xA;4. Create the model.&#xA;5. Run `python manage.py makemigrations`&#xA;6. Run `python manage.py migrate` (if the above command is a success)&#xA;&#xA;Here&#39;s the model from the demo:&#xA;&#xA;```python&#xA;class Article(models.Model):&#xA;    title = models.CharField(max_length=255)&#xA;    post = models.TextField()&#xA;    created = models.DateTimeField(auto_now_add=True)&#xA;    updated = models.DateTimeField(auto_now=True)&#xA;```&#xA;&#xA;If we have multiple apps and we only want Django to migrate a model from a specific app, we can simply add the name of the app to the command. By default, Django will migrate all the models from the `INSTALLED_APPS` list so we need to specify which app to migrate explicitly.&#xA;&#xA;```&#xA;python manage.py makemigrations app_name&#xA;```   &#xA;This also applies to the `migrate` command.&#xA;&#xA;To understand the migration process more deeply, let us see another demonstration of changing the model and then applying migrations. We&#39;ll keep an eye on the `migrations` folder inside of the app in the project. &#xA;&#xA;![migration folder demo](https://res.cloudinary.com/dgpxbrwoz/image/upload/v1642338399/blogmedia/migratefolder_e7fm7n.gif)&#xA;&#xA;We can see that initially when we applied the migrations in the previous demo, there was a single migration file called `0001_initial.py` but after we altered/changed the title&#39;s `max_length` from 255 to 127 and executed the `makemigrations` command another file called `0002_alter_article_title.py` was created that only contained the changed field. This is very similar to git diff in which we are about to commit to the actual database. &#xA;&#xA;So, that was all about migrations. There is definitely a lot to be covered about migrations and databases, but I&#39;ll leave you here for now. There are a lot of things to understand and learn before we can talk more about the databases. We now have a base for other things to get our heads around. We now have a database linked to our project, still, we don&#39;t know how to use fetch or query them. That is a topic for another part.&#xA;&#xA;We didn&#39;t use SQLite database which is by default provided by Django because in production it can just listen to one request/query at a time. That is not ideal for most web applications. Still, there are use cases of this database as it is suitable for embedded database systems for storage applications in desktop/android applications. &#xA;&#xA;## Conclusion&#xA;&#xA;So, from this part of the series, we were able to configure a database more specifically an external database (not the default SQLite DB) in a Django project. The concept of migrations was understood and demonstrated with live examples. Also, the process of creating and designing models was used from the previous part to create the structure in an actual database. In the next part, we shall dive into the Admin Section that Django provides to view and tinker with the local database. If you have any queries(not database queries) then please let me know, thank you for reading, and until then Happy Coding :)&#xA;</content>
      <type>posts</type>
    </item>
    <item>
      <title>Django Basics: Creating Models</title>
      <link>meetgor.com/django-basics-models</link>
      <description></description>
      <pubDate>Tue, 04 Jan 2022 00:00:00 UTC</pubDate>
      <content>&#xA;## Introduction&#xA;&#xA;We have seen the basics of Django templating in the previous parts of the series. Now, we can move on to the more backend stuff in Django which deals with the Databases, queries, admin section, and so on. In this particular part, we&#39;ll cover the fundamental part of any application in Django i.e the `Model`. We&#39;ll understand what the model is, how to structure one, how to create relationships and add constraints on the fields, etc. &#xA;&#xA;## What ate Models?&#xA;&#xA;A model is a Django-way(Pythonic) to structure a database for a given application. It is technically a class that can act as a table in a database generally and inside of the class, the properties of it act as the attributes of that database. It&#39;s that simple. Just a blueprint to create a table in a database, don&#39;t worry about what and where is our database. We will explore the database and its configuration in the next part. &#xA;&#xA;By creating a model, you don&#39;t have to write all the basic SQL queries like &#xA;&#xA;```sql&#xA;CREATE TABLE NAME(&#xA;attrb1_name type,&#xA;attrb2_name type,&#xA;.&#xA;.&#xA;.&#xA;);&#xA;```&#xA;&#xA;If your application is quite big or is complex in terms of the relations among the entities, writing SQL queries manually is a daunting task and also quite repetitive at times. So Django handles all the SQL crap out of the way for the programmer. So Models are just a Pythonic way to create a table for the project/application&#39;s database.&#xA;&#xA;## How to create a Model?&#xA;&#xA;Creating a model for an application is as easy as creating a class in python. But hey! It&#39;s more than that as there are other questions to address while designing the class. You need to design the database before defining the fields in the model.&#xA;&#xA;OK, we&#39;ll it&#39;s not straightforward as it seems to but still for creating simple and dummy projects to start with. You can use certain tools like [lucidchart](https://www.lucidchart.com/pages/database-diagram/database-design-tool), [dbdiagrams.io](https://dbdiagram.io/home), and other tools you are comfortable with. It&#39;s important to visualize the database schema or the structure of the application before tinkering with the actual database inside the project. Let&#39;s not go too crazy and design a simple model to understand the process.&#xA;&#xA;Here&#39;s a basic model for a Blog:&#xA;&#xA;```python&#xA;#from django.db import models&#xA;from django.contrib.auth.models import User&#xA;&#xA;class Article(models.Model):&#xA;    title = models.CharField(max_length=255)&#xA;    post = models.TextField()&#xA;    author = models.ForeignKey(User, on_delete=models.CASCADE, related_name=&#39;Article&#39;)&#xA;    created = models.DateTimeField(auto_now_add=True)&#xA;    updated = models.DateTimeField(auto_now=True)&#xA;```   &#xA;&#xA;Ignore the `from django.db import models` as it is already in the file created by Django. If not, please uncomment the line and that should be good to go.&#xA;This is a basic model you might wanna play with but don&#39;t dump it anywhere. &#xA;&#xA;We define or create our models in the application inside the project. Inside the application there is already a file called `models.py` just **append** the above code into it. The application can be any application which makes the most sense to you or better create a app if not already created and name it as `article` or `post` or anything you like.&#xA;&#xA;If you are familiar with Python OOP(object-oriented programming), we have basically inherited the `models.Model` class from the `django.db` module into our model.&#xA;&#xA;If you want more such examples, let&#39;s see more such models :&#xA;&#xA;An E-Mail application core model. Attributes like `sender`, `subject` of the mail, `body` of the mail, `recipients_list` i.e. the `To:` section in a mail system and the `attachment_file` for a file attachment to a mail if any.&#xA;&#xA;```python&#xA;#from django.db import models&#xA;from user import EmailUser&#xA;&#xA;class EMail(models.Model):&#xA;    sender = models.EmailField(max_length = 255) &#xA;    subject = models.CharField(max_length = 78)&#xA;    body = models.CharField(max_length = 40000)&#xA;    recipients_list = models.ManyToManyField(EmailUser, related_name = &#39;mail_list&#39;)&#xA;    attachment_file = models.FileField(blank=True)&#xA;```&#xA;&#xA;A sample model for a note-taking app, consisting of a Note and a Book. A book might be a collection of multiple notes i.e. a single book can have multiple notes so we are using a `ManyToManyField`, what is that? We&#39;ll see that shortly.&#xA;&#xA;```python&#xA;from django.db import models&#xA;from user.models import User&#xA;&#xA;class Notes(models.Model):&#xA;    author = models.ForeignKey(User, on_delete=models.CASCADE)&#xA;    title = models.CharField(max_length = 1024)&#xA;    content = models.Textfield()&#xA;    created = models.DateTimeField(auto_now_add = True)&#xA;    modified = models.DateTimeField(auto_now = True)&#xA;    book = models.ManyToManyField(Book, related_name = &#39;book&#39;)&#xA;&#xA;class Book():&#xA;    name = models.CharField(max_length = 1024)&#xA;```   &#xA;&#xA;   These are just dummies and are not recommended to use anywhere especially in a serious project. &#xA;So, we have seen a model, but what are these fields and the constraints like `on_delete`, `max_length`, and others in the upcoming section on fields.&#xA;&#xA;## Fields in Django&#xA;&#xA;Fields are technically the attributes of the class which here is the model, but they are further treated as a attribute in a table of a database. So the model becomes a list of attributes which will be then parsed into an actual database. &#xA;&#xA;By creating attributes inside a class we are defining the structure for a table. We have several types of fields defined already by django for the ease of validating and making a constrained setup for the database schema.&#xA;&#xA;Let&#39;s look at some of the types of fields in Django Models.&#xA;&#xA;### Types of Fields&#xA;&#xA;Django has a lot of fields defined in the models class. If you want to go through all the fields, you read through the django docs [field references](https://docs.djangoproject.com/en/4.0/ref/models/fields/#model-field-types). We can access the fields from the `models` module like `name = models.CharField(max_length=10)`, this is a example of defining a attributes `name` which is a CharField. We can set the max_length which acts a constraint to the attribute as we do not want the name field to be greater than 10 and hence parsing the parameter `max_length` to 10. &#xA;&#xA;We have other field types like:&#xA;&#xA;- `IntegerField` -&gt; for an integer value.&#xA;- `TextField` -&gt; for long input of text (like text area in html).&#xA;- `EmailField` -&gt; for an single valid email field.&#xA;- `DateField` -&gt; for inputting in a date format. &#xA;- `URLField` -&gt; for input a URL field.&#xA;- `BooleanField` -&gt; for a boolean value input.&#xA;&#xA;And there are other fields as well which can be used as per requirements.&#xA;&#xA;We also have some other fields which are not directly fields so to speak but are kind of relationship defining fields like:&#xA;&#xA;- `ForeignKey` -&gt; Define a many-to-one relationship to another model/class. &#xA;- `ManyToManyField` -&gt; define a many-to-many relationship to another model/class.&#xA;- `OneToOneField` -&gt; define a one to one relationship between different tables/model/class.&#xA;&#xA;So, that&#39;s about the field types for just a feel of how to structure or design a database table using a model with some types of attributes. We also need to talk about constraints which needs to added to the fields inside the models. &#xA;&#xA;### Field Options/Arguments&#xA;&#xA;We can add constraints and pass arguments to the fields in the models. We can add arguments like `null`, `blank`, `defualt`, `choices`, etc. &#xA;&#xA;- `null=True/False` -&gt; Set a check for the entry in the table as not null in the database.&#xA;- `blank=True/False` -&gt; Set a check for the input validation to empty or not.&#xA;- `unique=True/False` -&gt; Set a constraint to make the entry unique throughout the table.&#xA;- `defualt=anyvalue` -&gt; Set a default value for the field.&#xA;- `choices=list` -&gt; Set a list of defined choices to select in the field (a list of two valued tuple).&#xA;&#xA;We also have another constraint specific to the fields like `max_length` for `CharField`, `on_delete` for ForeignKey which can be used as a controller for the model when the related model is deleted, `verbose_name` to set a different name for referencing the entry in the table/model from the admin section compared to the default name of the model, `verbose_name_plural` similar to the `verbose_name` but for referencing the entire table/model. Also `auto_now_add` and `auto_now` for `DateTimeField` so as to set the current date-time by default.&#xA;&#xA;More options and arguments that can be passed to the fields in models are given in the django docs [field options](https://docs.djangoproject.com/en/4.0/topics/db/models/#field-options)&#xA;&#xA;These are some of the options or arguments that we can or need to pass to the fields to set up a constrained schema for our database. &#xA;&#xA;### Meta class&#xA;&#xA;Meta class is a nested class inside the model class which is most of the times used for ordering the entries(objects) in the table, managing permissions for accessing the model, add constraints to the models related to the attributes/fields inside it, etc.&#xA;&#xA;You can read about the functionalities of the Meta class in the [documentation](https://docs.djangoproject.com/en/4.0/ref/models/options/).&#xA;&#xA;## Model methods&#xA;&#xA;As a class can have functions, so does a model as it is a Python class after all. We can create kind of a helper methods/functions inside the model. The model class provides a helpful `__str__()` function which is used to rename an object from the database. We also have other predefined helper functions like `get_absolute_url` that generates the URL and returns it for further redirection or rendering.&#xA;&#xA;Also, you can define the custom functions that can be used as to help the attributes inside the model class.&#xA;&#xA;## Django ORM&#xA;&#xA;Django has an Object Relational Mapper is the core concept in Django or the component in Django that allows us to interact with the database without the programmer writing SQL/DB queries. It is like a Pythonic way to write and execute sql queries, it basically abstracts away the layer to manually write SQL queries. &#xA;&#xA;We&#39;ll explore the details of how the ORM works under the hood but it&#39;s really interesting and fascinating for a Beginner to make web applications without learning SQL(not recommended though personally). For now, its just magical to see Django handling the DB operations for you. You can get the references for learning about the Queryset in ORM from the [docs](https://docs.djangoproject.com/en/4.0/ref/models/querysets/)&#xA;&#xA;## Example Model&#xA;Let us set up a model from what we have learned so far. &#xA;&#xA;We&#39;ll create a model for a Blog Post again but with more robust fields and structure. &#xA;&#xA;```python&#xA;#from django.db import models&#xA;from django.contrib.auth.models import User&#xA;&#xA;class Article(models.Model):&#xA;&#xA;    options = (&#xA;    (&#39;draft&#39;, &#39;Draft&#39;),&#xA;    (&#39;published&#39;, &#39;Published&#39;),&#xA;    )&#xA;&#xA;    title = models.CharField(max_length=255, unique=True)&#xA;    slug = models.SlugField(max_length=255, unique_for_date=&#39;publish&#39;)&#xA;    post = models.TextField()&#xA;    author = models.ForeignKey(User, on_delete=models.CASCADE, related_name=&#39;Posts&#39;)&#xA;    created = models.DateTimeField(auto_now_add=True)&#xA;    updated = models.DateTimeField(auto_now=True)&#xA;    status = models.CharField(max_length=16, choices=option, default=&#39;draft&#39;)&#xA;    &#xA;    def __str__()&#xA;        return self.title&#xA;&#xA;    class Meta:&#xA;        ordering = (&#39;-publish&#39;,)&#xA;      &#xA;```&#xA;&#xA;   We can see in the above model that we have defined the Meta class which is optional and is generally written to modify how to entries inside the table appear or order with other functionalities as well. We have also added the choices option in the status field which has two choices `Draft` and `Publish` one which is seen by the django interface and the other to the end-users. We have also added certain fields like slug that will create the URL for the blog post, also certain options like `unique` has been set to restrict duplicate entries being posted to the database. The `related_name` in the `ForeignKey` refers to the name given to the relation from the Article model to the User model in this case. &#xA;&#xA;   So, we can see that Django allows us to structure the schema of a database. Though nothing is seen as an end result, when we configure and migrate the model to our database we will see the results of the hard work spent in creating and designing the model. &#xA;&#xA;## Database Specific fields&#xA;&#xA;By this time, you will have gotten a feel of what a database might be. Most of the projects are designed around SQL databases but No-SQL databases and others are also used in cases which suite them the most. We have tools to manage this database in SQL we call it the Database Management System (DBMS). It&#39;s just a tool to manage data, but there is not just a single Database management tool out there, there are gazillions and bazillions of them. Most  popular include `MySQL`, `PostgreSQL`, `SQLite`, `Oracle`, `Microsoft Access`, `Maria DB`, and tons of others. &#xA;&#xA;Well, these different DBMS tools are almost similar with a few hiccups here and there. So, different Database tools might have different fields they provide. For Example, in Database `PostgreSQL` provides the ListField which `SQLite` doesn&#39;t that can be the decision to be taken before creating any project. There might be some fields that some DBMS provide and other doesn&#39;t.&#xA;&#xA;## Conclusion&#xA;&#xA;We understood the basics of creating a model. We didn&#39;t touch on the database yet but the next part is all about configuration and migration so we&#39;ll get hands-on with the databases. We covered how to structure our database, how to write fields in the model, add constraints and logic to them and explore the terminologies in Django like ORM, Database Types, etc. &#xA;&#xA;Thank you for reading the article, if you have any feedback kindly let me know, and until then Happy Coding :)&#xA;</content>
      <type>posts</type>
    </item>
    <item>
      <title>Django Basics: Static Files</title>
      <link>meetgor.com/django-basics-static-files</link>
      <description></description>
      <pubDate>Mon, 27 Dec 2021 00:00:00 UTC</pubDate>
      <content>&#xA;## Introduction&#xA;&#xA;After creating templates, it should be rather tempting to add some styles and logic to them. Well yes, we&#39;ll see how to add static files in a web application using django. Static files are not only CSS, but also media/images and Javascript files as well. In this part of the series, we&#39;ll cover the basics of working with static files in django including the configuration, rendering and storing of the static files. &#xA;&#xA;## What are Static Files?&#xA;&#xA;Static files as the name suggests are the files that don&#39;t change, your style sheets(css/scss) are not gonna change for every request from the client side, though the template might be dynamic. Also your logo, images in the design will not change unless you re-design it XD So these are the static files that needs to be rendered along with the templates.&#xA;&#xA;We have basically 3 types of static files, CSS, Javascript files and media files/static templates,etc. They are all rendered in the same way but as per their conventions and usage. &#xA;&#xA;You can learn about the theoretical information on [static files](https://docs.djangoproject.com/en/4.0/howto/static-files/) from the django documentation.&#xA;&#xA;## How to configure Static Files&#xA;&#xA;Firstly you can create a folder for all the static files in the root folder. Usually the convention is `static` as the name of the folder. So, if you have created the template folder in the root directory, similar to that static folder can be created in that path. &#xA;&#xA;Next after creating the static folder in the project root folder, we need to configure the `settings.py` file to actually tell Django web server to look for all our static files in that folder. To do that, go to the `settings.py` file, now by this time you would have known where the `settings.py` file is (inside the project-named folder). Add the following at the end of the `settings.py` file.&#xA;&#xA;```python&#xA;# import os&#xA;# STATIC_URL = &#39;/static/&#39;&#xA;&#xA;STATICFILES_DIRS = (&#xA;    os.path.join(BASE_DIR, &#34;static/&#34;),&#xA;)&#xA;```   &#xA;&#xA;Ignore the `import os` if you already have imported and the `STATIC_URL` if already there in the file. The `STATICFILES_DIRS` is the configuration that we tell the django environment to look for all our static files in the base/root directory of the project where the `static/` folder is. The `os.path.join()` actually gets the path of the directory in our operating system to the folder specified in the case of our project the `BASE_DIR` is the path of the project and we add in the static folder to actually the project path. The final piece and the crucial one is the `&#34;static/&#34;` path, this can be other location where you have created your static folder within the project.&#xA;&#xA;That&#39;s it! Yes, it&#39;s that simple. We can now create static files and render them in our templates. &#xA;&#xA;## Creating and Storing Static files&#xA;&#xA;Now this part is customizable and it depends on your preference, how you want to organize the static folder. The convention that I follow is creating separate folders namely for `css`, `js` and `assets`(or `img`) mostly. And inside of this folders you can store the respective static files. This also creates the project more scalable in terms of it&#39;s maintenance. &#xA;&#xA;```&#xA;static\&#xA;  |__css\&#xA;  |__js\&#xA;  |__assets\&#xA;```&#xA;&#xA;Let&#39;s create a static file and an image to demonstrate the concept of static files in django. &#xA;&#xA;- css/style.css&#xA;&#xA;```css&#xA;body &#xA;{&#xA;    background-color:#1d1dff;&#xA;    color:white;&#xA;}&#xA;&#xA;h1&#xA;{&#xA;    text-align:center&#xA;    font-family: monospace;&#xA;}&#xA;&#xA;p&#xA;{&#xA;    color:#ff6600;&#xA;    font-weight:500;&#xA;}&#xA;&#xA;ul&#xA;{&#xA;    list-style-type:square;&#xA;}&#xA;```&#xA;&#xA;- assets/tbicon.png &#xA;&#xA;Demo Image (that&#39;s my blog icon)   &#xA;&#xA;![Demo image](https://github.com/Mr-Destructive/techstructive-blog/blob/gh-pages/assets/img/tbicon.png?raw=true)&#xA;&#xA;## Rendering Static Files from Templates&#xA;&#xA;So, after configuring and creating the static files, we now can inject them into our templates. If you try to do the traditional way i.e. linking stylesheets/images/script files with HTML, it just won&#39;t work as you expect to and there&#39;s no point in using traditional way while creating a web application with a framework. So, there is a framework specific way to do things which make it easier and efficient for the project. &#xA;&#xA;To render any static file, we need to load the static tag which allows us to embed links for the static files into the templates. This means if the static files are not loaded directly instead in production(deploying our application) the static files are stored in a folder `STATIC_ROOT` which the server then loads, we&#39;ll see how that internally works when we get to deployment techniques for Django project. &#xA;&#xA;To load the static files from our configuration, we can simpy include the tag on top of the template.&#xA;&#xA;```&#xA;{% load static %}&#xA;```&#xA;&#xA;The above templating tag will load the `static` tag which allows us to embed the links to the static files as explained earlier. &#xA;&#xA;Now, we can actually access any file with the static folder in our templates with a particular syntax as below:&#xA;&#xA;```html&#xA;&lt;link rel=&#34;stylesheet&#34; href=&#34;{% static &#39;css/style.css&#39; %}&#34;&gt;  &#xA;```   &#xA;Its just a example how to load the file, we are calling the static tag which we have loaded in previously and from there we are referencing the css file. The compact syntax would be : `{% static  &#39;path-to-file&#39;  %}`      &#xA;&#xA;**NOTE: The path to the static file is relative from the Static folder, i.e. enter the path of the file considering the static folder as the base directory.** &#xA;&#xA;### Demonstration of the static file&#xA;&#xA;Let&#39;s render the static file which we created earlier i.e. the css file and the image into a template. &#xA;&#xA;Assuming you have a app called `post` in your django project, you can render static files as below:&#xA;&#xA;# templates/home.html &#xA;```html&#xA;&lt;!DOCTYPE html&gt;&#xA;&lt;html lang=&#34;en&#34;&gt;&#xA;&lt;head&gt;&#xA;    &lt;meta charset=&#34;UTF-8&#34;&gt;&#xA;    &lt;title&gt;Django Blog&lt;/title&gt;&#xA;    {% load static %}&#xA;    &lt;link rel=&#34;stylesheet&#34; href=&#34;{% static &#39;css/style.css&#39; %}&#34;&gt;  &#xA;&lt;/head&gt;&#xA;&lt;body&gt;&#xA;    &lt;h1&gt;Hello, World!&lt;/h1&gt;&#xA;    {% block body %}&#xA;    &lt;p&gt;This is not going to get inherited &lt;/p&gt;&#xA;    {% endblock %}&#xA;    &lt;p&gt;This will be inherited&lt;/p&gt;&#xA;&lt;/body&gt;&#xA;&lt;/html&gt;&#xA;```   &#xA;We are loading the static tag and then loading the css file using the tag syntax as explained above.       &#xA;&#xA;# static/css/style.css      &#xA;```css&#xA;body &#xA;{&#xA;    background-color:#1d1dff;&#xA;    color:white;&#xA;}&#xA;&#xA;h1&#xA;{&#xA;    text-align:center&#xA;    font-family: monospace;&#xA;}&#xA;&#xA;p&#xA;{&#xA;    color:#ff6600;&#xA;    font-weight:500;&#xA;}&#xA;&#xA;ul&#xA;{&#xA;    list-style-type:square;&#xA;}&#xA;```   &#xA;This is the static file,`style.css` stored inside the css folder of the static folder. This contains basic (very lame) CSS styling as we can understand.     &#xA;&#xA;# post/views.py &#xA;&#xA;```python&#xA;from django.shortcuts import render&#xA;&#xA;def home(request):&#xA;    return render(request, &#39;home.html&#39;)&#xA;```&#xA;The `views.py` file has the function that renders the template `home.html` from the templates folder inside the application specific folder.   &#xA;&#xA;# post/urls.py   &#xA;```python&#xA;from django.urls import path&#xA;from post import views&#xA;&#xA;urlpatterns = [&#xA;        path(&#39;&#39;, views.home, name=&#34;home&#34;),&#xA;        ]&#xA;```   &#xA;This is the application level configuration for the url routes to the views linking the views(functions) from the `views.py` file.Â The url in this file(code-snippet) is linking the root url(&#39;&#39;) to the home view in the `views.py` file.&#xA;&#xA;# Blog/urls.py&#xA;```python&#xA;from django.contrib import admin&#xA;from django.urls import path, include&#xA;from django.views.generic import TemplateView&#xA;&#xA;urlpatterns = [&#xA;    path(&#39;admin/&#39;, admin.site.urls),&#xA;    path(&#39;&#39;, include(&#39;post.urls&#39;)),&#xA;]&#xA;```&#xA;The urls file in the project folder is the core configuration for project level url routes to individual applications within the project.&#xA;&#xA;Append the following if your templates and static files are not configured properly.&#xA;&#xA;# Blog/settings.py&#xA;```python&#xA;import os   &#xA;&#xA;TEMPLATES = [&#xA;    {&#xA;        &#39;BACKEND&#39;: &#39;django.template.backends.django.DjangoTemplates&#39;,&#xA;        &#39;DIRS&#39;: [os.path.join(BASE_DIR, &#39;templates&#39;),],&#xA;        &#39;APP_DIRS&#39;: True,&#xA;        &#39;OPTIONS&#39;: {&#xA;            &#39;context_processors&#39;: [&#xA;                &#39;django.template.context_processors.debug&#39;,&#xA;                &#39;django.template.context_processors.request&#39;,&#xA;                &#39;django.contrib.auth.context_processors.auth&#39;,&#xA;                &#39;django.contrib.messages.context_processors.messages&#39;,&#xA;            ],&#xA;        },&#xA;    },&#xA;]&#xA;STATIC_URL = &#39;/static/&#39;&#xA;STATICFILES_DIRS = (&#xA;    os.path.join(BASE_DIR, &#34;static/&#34;),&#xA;)&#xA;```&#xA;SO, the result of the above code is as simple template as shown in the picture below:&#xA;&#xA;![Static file demo](https://res.cloudinary.com/dgpxbrwoz/image/upload/v1640621276/blogmedia/static-1_vu41gf.png)&#xA;&#xA;This will also work if you do it with traditional HTML syntax, but I&#39;d explained why it&#39;s not recommended to do it while using frameworks.&#xA;&#xA;Let&#39;s see how static files are rendered in inherited templates. We&#39;ll tinker with the `for.html` template created in the [previous part](https://mr-destructive.github.io/techstructive-blog/django/python/web-development/2021/12/14/Django-Basics-P5.html).  &#xA;&#xA;# template/for.html&#xA;```django&#xA;{% extends &#39;home.html&#39; %}&#xA;{% load static %}&#xA;&#xA;{% block body %}&#xA;    &lt;img src=&#34;{% static &#39;assets/tbicon.png&#39; %}&#34; height=&#34;50px&#34; width=&#34;50px&#34; /&gt;&#xA;    &lt;ul&gt;&#xA;        {% for sport in sport_list %}&#xA;        &lt;li&gt;{{ sport }}&lt;/li&gt;&#xA;        {% endfor %}&#xA;    &lt;/ul&gt;&#xA;{% endblock %}&#xA;```&#xA;We will have re-load the static tag for each template only if we need to include a new static file in the template. So we use the `{% load static %}` again as we are loading the static file (image) in this template.&#xA;&#xA;# post/views.py&#xA;```python&#xA;from django.shortcuts import render&#xA;&#xA;def for_demo(request):&#xA;    sports = (&#39;football&#39;, &#39;cricket&#39;, &#39;volleyball&#39;, &#39;hockey&#39;, &#39;basketball&#39;)&#xA;    return render(request, &#39;for.html&#39;, {&#39;sport_list&#39;: sports})&#xA;&#xA;def home(request):&#xA;    return render(request, &#39;home.html&#39;)&#xA;```&#xA;&#xA;# post/urls.py&#xA;```python&#xA;from django.urls import path&#xA;from post import views&#xA;&#xA;urlpatterns = [&#xA;        path(&#39;&#39;, views.home, name=&#34;home&#34;),&#xA;        path(&#39;for/&#39;, views.for_demo, name=&#34;fordemo&#34;),&#xA;        ]&#xA;```&#xA;&#xA;So, that&#39;s the url and view map created, we can now be able to see the result in the `127.0.0.1:8000/for/` url to see the below result:&#xA;&#xA;![Static demo for inheritance of tempaltes](https://res.cloudinary.com/dgpxbrwoz/image/upload/v1640622976/blogmedia/static-tempinh_peyjrg.png)&#xA;&#xA;The list style has been changed and thus we can see that the CSS from the parent template is also being inherited. &#xA;&#xA;Here is the django project structure which I have created with this series so far:&#xA;&#xA;![Folder tree structure](https://res.cloudinary.com/dgpxbrwoz/image/upload/v1640624705/blogmedia/trr-static_bgt9du.png)&#xA;&#xA;So that has been it for the Static files in Django. Though there are lot of depth for rendering and loading the static files, we&#39;ll explore as we get our grasp in the django and web development terminologies. &#xA;&#xA;## Conclusion&#xA;&#xA;So, from this article, we were able to configure and render static files like CSS/Images and optionally Javascript into the Django application. We covered from ground how to configure, load and structure the folder for storing all the static files at the project level. &#xA;&#xA;Hope you found it helpful and if you have any queries please let me know. We&#39;ll start with the databases probably from the next part in the Django Basics Series. Until then have a great week and as always Happy Coding :)&#xA;</content>
      <type>posts</type>
    </item>
    <item>
      <title>Django Basics: Templates</title>
      <link>meetgor.com/django-basics-templates</link>
      <description></description>
      <pubDate>Tue, 14 Dec 2021 00:00:00 UTC</pubDate>
      <content>&#xA;## Introduction&#xA;&#xA;After learning the basics of views and URLs, we can now move on to the next concept i.e. Templates. In Django, Templates are quite an important component for the application as it acts as the `frontend` for the web application. With the help of templates and some features provided by Django, it becomes very intuitive and simple to make dynamic web content.&#xA;In this part, we understand what are templates and what is the way to render them. &#xA;&#xA;## What are Templates&#xA;&#xA;Templates are simply a `html` document or kind of a wireframe for content to be displayed for the web app. Templates allow us to render some more relevant pieces of data rather than simple text HTTP responses as we did earlier. We can even re-use certain components of a template in other using the Django Templating Language (more on this later). &#xA;&#xA;So, using HTML templates, we can write a complete Webpage. If you are unfamiliar with HTML, you can check out the basics of HTML with this [playlist](https://www.youtube.com/playlist?list=PL081AC329706B2953). &#xA;&#xA;Even If you are not familiar with HTML, this tutorial might be quite basic and not overwhelm you with all the tags.&#xA;&#xA;## Creating Templates&#xA;&#xA;To create a Template, we can write a simple HTML document like the below:&#xA;&#xA;Create a folder `templates` in the base folder, inside the templates folder, create a file `index.html`&#xA;&#xA;**templates\index.html**&#xA;&#xA;```html&#xA;&lt;!DOCTYPE html&gt;&#xA;&lt;html lang=&#34;en&#34;&gt;&#xA;&lt;head&gt;&#xA;    &lt;meta charset=&#34;UTF-8&#34;&gt;&#xA;    &lt;title&gt;Django Blog&lt;/title&gt;&#xA;&lt;/head&gt;&#xA;&lt;body&gt;&#xA;    &lt;h1&gt;Hello, World!&lt;/h1&gt;&#xA;&lt;/body&gt;&#xA;&lt;/html&gt;&#xA;```&#xA;&#xA;This is a simple HTML template, with the `&lt;h1&gt;` tags. As Django is a framework, there is a standard for storing all the templates for the project and application. There are a couple of standard of options:&#xA;- One of which is creating a `templates` folder in the root folder as discussed earlier, also we need to modify the `project_name/settings.py` file. &#xA;&#xA;Inside the `settings.py` file, we need to locate the `TEMPLATES` section and modify as below:&#xA;&#xA;```python&#xA;import os&#xA;&#xA;TEMPLATES = [&#xA;    {&#xA;        &#39;BACKEND&#39;: &#39;django.template.backends.django.DjangoTemplates&#39;,&#xA;        &#39;DIRS&#39;: [os.path.join(BASE_DIR, &#39;templates&#39;),],&#xA;        &#39;APP_DIRS&#39;: True,&#xA;        &#39;OPTIONS&#39;: {&#xA;            &#39;context_processors&#39;: [&#xA;                &#39;django.template.context_processors.debug&#39;,&#xA;                &#39;django.template.context_processors.request&#39;,&#xA;                &#39;django.contrib.auth.context_processors.auth&#39;,&#xA;                &#39;django.contrib.messages.context_processors.messages&#39;,&#xA;            ],&#xA;        },&#xA;    },&#xA;]&#xA;```   &#xA;&#xA;In this snippet, we have changed the `DIRS` option to search the templates in the folder `templates` in the root directory. &#xA;&#xA;- The other standard is creating a templates folder in each application.&#xA;&#xA;We can create the templates folder in each application instead of a single folder. &#xA;&#xA;## Rendering Templates&#xA;&#xA;After creating a template and making the required settings to make sure Django is able to pick up those templates, we need to work with views and URLs to actually render those templates. &#xA;&#xA;There are a couple of ways to render templates in Django and some of them are discussed below:&#xA;&#xA;### Using TemplateView&#xA;&#xA;[TemplateView](https://docs.djangoproject.com/en/3.2/ref/class-based-views/base/#django.views.generic.base.TemplateView) is a class which is comes with `django.views.generic` library. This class allows us to render a template by providing in the name of the template, arguments or variables to be parsed, and so on. &#xA;&#xA;The simplest way to render a template is by the following way:&#xA;&#xA;```python&#xA;from django.contrib import admin&#xA;from django.urls import path, include&#xA;&#xA;from django.views.generic import TemplateView&#xA;&#xA;urlpatterns = [&#xA;    path(&#39;admin/&#39;, admin.site.urls),&#xA;    path(&#39;&#39;, TemplateView.as_view(template_name=&#34;index.html&#34;), name=&#34;index&#34;),&#xA;]&#xA;```&#xA;&#xA;We need to import the `TemplateView` from the `django.core.generic` so as to use the class for rendering the template. &#xA;&#xA;The `TemplateView` class takes in a couple of arguments, we&#39;ll use the `template_name` as an argument that takes in the name of the template. Here, we use the `index.html` as the template which we created earlier. We don&#39;t need to specify the entire path to the template as we make modifications in the `settings.py` file to pick the template from the mentioned directory. We use `as_view` function to load the class as a function/view.  &#xA;&#xA;Activate the virtual environment for the proper functioning of the project.&#xA;&#xA;After activating the virtual environment we can run the server as follows:&#xA;```terminal&#xA;python manage.py runserver&#xA;```&#xA;   We can now see the following output and thus, we are now rendering a simple HTML template in Django.&#xA;&#xA;![](https://res.cloudinary.com/dgpxbrwoz/image/upload/v1639384994/blogmedia/templ1_vbwp5d.png)&#xA;&#xA;### Using render&#xA;&#xA;We can also use the [render function](https://docs.djangoproject.com/en/4.0/topics/http/shortcuts/#render) from `django.shortcuts` to simply render a template. But we will create a Python function or a View to actually render the template. So, we&#39;ll create a View-URL map as we created in the [previous part](https://mr-destructive.github.io/techstructive-blog/django/python/web-development/2021/11/30/Django-Basics-P4.html).&#xA;&#xA;Firstly, let&#39;s create a view function in the `post/views.py` file, more generally (`app_name/views.py` file). Firstly, we need to import the render function from `django.shortcuts` and then return the function call of render.&#xA;&#xA;```python&#xA;from django.shortcuts import render&#xA;&#xA;def home(request):&#xA;    return render(request,&#39;index.html&#39;)&#xA;```   &#xA;&#xA;And in the URLs, we&#39;ll create a different pattern like for e.g. &#39;home/&#39;&#xA;&#xA;```python&#xA;from django.urls import path&#xA;from post import views&#xA;&#xA;urlpatterns=[&#xA;        path(&#39;home/&#39;,views.home,name=&#34;home&#34;),&#xA;        ]&#xA;```&#xA;&#xA;So, after creating the View-URL map and making sure the URL of the app is loaded in the project URLs, we can see the result as a simple HTML template.   &#xA;&#xA;![](https://res.cloudinary.com/dgpxbrwoz/image/upload/v1639386932/blogmedia/templ2_rgoppj.png)&#xA;   &#xA;## Django Templating Language &#xA;&#xA;The [Django Templating Language](https://docs.djangoproject.com/en/3.2/ref/templates/language/) is Django&#39;s way of making templates more dynamic and easy to write dynamic web applications. We&#39;ll take a brief look at what we can do with this type of Templating Language in Django.&#xA;&#xA;### Variables&#xA;&#xA;This is the most common use case for the Django Templating Language/Engine as we can use the [variables](https://docs.djangoproject.com/en/3.2/ref/templates/language/#variables) from the Backend and inject it in the template. We can parse the variable into the template by the syntax : `{{ variable_name &#34; }}}}`&#xA;&#xA;To show its use cases, we can declare a variable in a view and then parse it in the Template. Though it is not dynamic right now we can later on fetch values from the database and store them in the form of variables in our views. &#xA;&#xA;**templates/home.html**&#xA;```html&#xA;&lt;!DOCTYPE html&gt;&#xA;&lt;html lang=&#34;en&#34;&gt;&#xA;&lt;head&gt;&#xA;    &lt;meta charset=&#34;UTF-8&#34;&gt;&#xA;    &lt;title&gt;Django Blog&lt;/title&gt;&#xA;&lt;/head&gt;&#xA;&lt;body&gt;&#xA;    &lt;h1&gt;Hello, {{ name }}&lt;/h1&gt;&#xA;&lt;/body&gt;&#xA;&lt;/html&gt;&#xA;```&#xA;&#xA;&#xA;**post/views.py**&#xA;```python&#xA;from django.shortcuts import render&#xA;&#xA;def variable_demo(request):&#xA;    name = &#34;Kevin&#34;&#xA;    return render(request, &#39;home.html&#39;, {&#39;name&#39;:name})&#xA;    #The name can be anything, like a database query object, form detail, etc&#xA;&#xA;```&#xA;&#xA;As we can see the variable in views is passed as a dictionary in python. The reference key along with a value of the variable as the name of the variable. We will use the key in the templates to parse the value of the variable.&#xA;&#xA;**post/urls.py**&#xA;```python&#xA;from django.urls import path&#xA;from post import views&#xA;&#xA;urlpatterns=[&#xA;        path(&#39;home/&#39;,views.home,name=&#34;home&#34;),&#xA;        path(&#39;vardemo/&#39;,views.variable_demo, name=&#34;var&#34;),&#xA;        ]&#xA;```&#xA;&#xA;![variable demo](https://res.cloudinary.com/dgpxbrwoz/image/upload/v1639389288/blogmedia/templ3_wvhagw.png)&#xA;&#xA;As we can see, we were able to load the variable into the template using the Django Templating Engine. &#xA;&#xA;### Conditional statement&#xA;&#xA;We can even use the conditional statement in the Template using a very simple syntax. We can use `{% if condition&#34;  }} %}` to use certain special kinds of blocks in the Template. We need to end those blocks as well using the syntax `{% endif  %}`, here `if` can be other blocks which we&#39;ll explore ahead.&#xA;&#xA;To create a basic if condition in the template, we can understand with the following example.&#xA;&#xA;**app_name/views.py**&#xA;```python&#xA;from django.shortcuts import render&#xA;from random import randint&#xA;&#xA;def if_demo(request):&#xA;   number = randint(1,10)&#xA;   return render(request, &#39;if_else.html&#39;, {&#39;num&#39;:number})&#xA;```&#xA;&#xA;Here, we have used the key name as `num` indicating we can give different names to the key which needs to be used in the template to render the values.&#xA;&#xA;**app_name/urls.py**&#xA;```python&#xA;from django.urls import path&#xA;from post import views&#xA;&#xA;urlpatterns = [&#xA;        path(&#39;if/&#39;, views.if_demo, name=&#34;ifdemo&#34;),&#xA;        ]&#xA;```&#xA;&#xA;**templates/if_else.html**&#xA;```html&#xA;&lt;!DOCTYPE html&gt;&#xA;&lt;html lang=&#34;en&#34;&gt;&#xA;&lt;head&gt;&#xA;    &lt;meta charset=&#34;UTF-8&#34;&gt;&#xA;    &lt;title&gt;Django Blog&lt;/title&gt;&#xA;&lt;/head&gt;&#xA;&lt;body&gt;&#xA;    {{ num }}&#xA;    {% if num &gt; 5 %}&#xA;        &lt;h2&gt;It&#39;s Greater then 5&lt;/h2&gt;&#xA;    {% elif num == 5 %}&#xA;        &lt;h2&gt;It&#39;s five!&lt;/h2&gt;&#xA;    {% else %}&#xA;        &lt;h2&gt;It&#39;s less than 5&lt;/h2&gt;&#xA;    {% endif %}&#xA;&lt;/body&gt;&#xA;&lt;/html&gt;&#xA;```&#xA;![if-else demo](https://res.cloudinary.com/dgpxbrwoz/image/upload/v1639411425/blogmedia/templ3_exj0fv.png)&#xA;&#xA;So, as we can see that, we can use the if-else conditions in the template and that is already powerful. This can be a bit messy as to handle mathematical operations or conditions into a single condition. This can really be used for really large datasets that can be shimmed down to really less coding and also improve readability.&#xA;&#xA;&#xA;### For loop&#xA;&#xA;Now, the most crucial component of the Django templating language is the loops. We can actually iterate over objects/lists in the template. This becomes a huge concept for actually making a dynamic web application. We n\might want to iterate over all the entries in a database, or any other form of data which can make the app a lot dynamic and feel real-time. &#xA;&#xA;The syntax of for loop is almost similar to the if-else condition. We just replace the condition with the iterator and the list/object from the view context. `{% for i in list %}`, also end the for loop like `{% endfor %}`.&#xA;&#xA;**app_name/views.py**&#xA;```python&#xA;from django.shortcuts import render&#xA;&#xA;def for_demo(request):&#xA;    sports = (&#39;football&#39;, &#39;cricket&#39;, &#39;volleyball&#39;, &#39;hockey&#39;, &#39;basketball&#39;)&#xA;    return render(request, &#39;for.html&#39;, {&#39;sport_list&#39;: sports})&#xA;&#xA;```&#xA;&#xA;We have created a simple Python list called `sports` and we parse them to the template using a dictionary object, `sport_list` as the key for storing the value of the `sports` list.&#xA;&#xA;**app_name/urls.py**&#xA;```python&#xA;from django.urls import path&#xA;from post import views&#xA;&#xA;urlpatterns = [&#xA;        path(&#39;for/&#39;, views.for_demo, name=&#34;fordemo&#34;),&#xA;        ]&#xA;```&#xA;&#xA;**templates/for.html**&#xA;```html&#xA;&lt;!DOCTYPE html&gt;&#xA;&lt;html lang=&#34;en&#34;&gt;&#xA;&lt;head&gt;&#xA;    &lt;meta charset=&#34;UTF-8&#34;&gt;&#xA;    &lt;title&gt;Django Blog&lt;/title&gt;&#xA;&lt;/head&gt;&#xA;&lt;body&gt;&#xA;    &lt;ul&gt;&#xA;        {% for sport in sport_list %}&#xA;        &lt;li&gt;{{ sport }}&lt;/li&gt;&#xA;        {% endfor %}&#xA;    &lt;/ul&gt;&#xA;&lt;/body&gt;&#xA;&lt;/html&gt;&#xA;```&#xA;&#xA;![for loop demo](https://res.cloudinary.com/dgpxbrwoz/image/upload/v1639475328/blogmedia/templ3_q8z8fr.png)&#xA;&#xA;We have used simple for loop in Pythonic syntax, we use an iterator in this case, `sport` acts as an iterator. We use this to store values one by one from the list `sport_list` which was earlier passed in the views as a key in the dictionary. &#xA;&#xA;Hence, this is quite scalable and used to fetch the objects/entries in the database and hence making it a lot easier to make a dynamic web application faster.&#xA;&#xA;## Template Inheritance&#xA;&#xA;So, far we have seen that we need to create the base template again and again like all the basic HTML elements, title, and all the basic structure. But what if, we can reuse a specific template in another and extend the functionality of that template into a new one. This avoids the redundancy of writing the entire basic template or the layout of a web app over and over again.&#xA;&#xA;To do that, Django has the Template inheritance. We can use a template as its basic layout or a specific component in the web application. Again, similar to the for, if-else blocks the syntax for inheriting a template is quite similar. &#xA;&#xA;Take, for example, the home.html which consisted of only a `&lt;h1&gt;` tag in it. We can use this kind of template in other templates to really make it the home page. For that, we first need to enclose the template in a `block`, which is what allows us to use it in other templates.&#xA;To create a `block`, we simply need to write the following syntax before the component which we do not want in other templates:&#xA;&#xA;**templates/home.html**&#xA;```html&#xA;&lt;!DOCTYPE html&gt;&#xA;&lt;html lang=&#34;en&#34;&gt;&#xA;&lt;head&gt;&#xA;    &lt;meta charset=&#34;UTF-8&#34;&gt;&#xA;    &lt;title&gt;Django Blog&lt;/title&gt;&#xA;&lt;/head&gt;&#xA;&lt;body&gt;&#xA;    &lt;h1&gt;Hello, World!&lt;/h1&gt;&#xA;    {% block body %}&#xA;    &lt;p&gt;This is not going to get inherited &lt;/p&gt;&#xA;    {% endblock %}&#xA;    &lt;p&gt;This will be inherited&lt;/p&gt;&#xA;&lt;/body&gt;&#xA;&lt;/html&gt;&#xA;```&#xA;In this we have used the `blocks` with a name like `body` as `{% block body %}` this can be anything you like. We end the block with the similar syntax as the for/if blocks as `{% endblock %}`. Anything in between the blocks i.e `block block_name` and `endblock` is not inherited i.e it is unique to this template.&#xA;&#xA;We will see how we can use this template in other templates. We will actually extend this template and use the blocks to render the content in the template.&#xA;   &#xA;&#xA;**templates/if_else.html**&#xA;```html&#xA;{% extends &#39;home.html&#39; %}&#xA;{% block body %}&#xA;    {{ num }}&#xA;    {% if num &gt; 5 %}&#xA;    &lt;h2&gt;It&#39;s Greater then 5&lt;/h2&gt;&#xA;    {% elif num == 5 %}&#xA;    &lt;h2&gt;It&#39;s five!&lt;/h2&gt;&#xA;    {% else %}&#xA;    &lt;h2&gt;It&#39;s less than 5&lt;/h2&gt;&#xA;    {% endif %}&#xA;{% endblock %}&#xA;```&#xA;   So, we first say to Django to extend the `home` template i.e. the Django will load the blocks from this template only, remember it will just load and not use the blocks until we explicitly tell it to. &#xA;&#xA;To use the blocks or kind of plug in the template content in the `if_else.html` or any other template, we need to again call the `blocks`. Here, we need to write the content inside the `blocks` to properly parse the blocks as this is an HTML template. The order of opening and closing elements do matter. &#xA;So, when we say `endblock` the last part of the base template is loaded i.e. the closing `body` and `html` tags. This is like plugging the template as it is before and after the block body. &#xA;&#xA;**app_name/views.py**&#xA;```python&#xA;from django.shortcuts import render&#xA;&#xA;def home(request):&#xA;    return render(request, &#39;home.html&#39;)&#xA;&#xA;from random import randint&#xA;&#xA;def if_demo(request):&#xA;   number = randint(1,10)&#xA;   return render(request, &#39;if_else.html&#39;, {&#39;num&#39;:number})&#xA;```   &#xA;&#xA;**app_name/urls.py**&#xA;```python&#xA;from django.urls import path&#xA;from post import views&#xA;&#xA;urlpatterns = [&#xA;        path(&#39;&#39;, views.home, name=&#34;home&#34;),&#xA;        path(&#39;if/&#39;, views.if_demo, name=&#34;ifdemo&#34;),&#xA;        ]&#xA;```   &#xA;![](https://res.cloudinary.com/dgpxbrwoz/image/upload/v1639479714/blogmedia/tempinher2_enisls.png)&#xA;![template inheritance demo](https://res.cloudinary.com/dgpxbrwoz/image/upload/v1639477721/blogmedia/tempinher_lk0op0.png)      &#xA;&#xA;![](https://res.cloudinary.com/dgpxbrwoz/image/upload/v1639479954/blogmedia/template-inh_lc8szo.gif)&#xA;&#xA;The above gif illustrates the example in a neat way. The block is loaded from the given template as the extended template and hence it plugs the block into the frame of the template. &#xA;&#xA;## Conclusion&#xA;&#xA;So, from this part of the series, we were able to understand the concept of Templates in Django, we were able to use variables, loops, conditional statements, and template inheriting in a Django application. In the next part, we&#39;ll try to touch up with the static files and see how to properly structure and configure them.&#xA;&#xA;Thank you for reading, if you didn&#39;t understand any of the examples, please let me know, I&#39;ll be happy to share the code. Happy Coding :)&#xA;</content>
      <type>posts</type>
    </item>
    <item>
      <title>Django Basics: Views and URLS</title>
      <link>meetgor.com/django-basics-views-urls</link>
      <description></description>
      <pubDate>Tue, 30 Nov 2021 00:00:00 UTC</pubDate>
      <content>&#xA;## Introduction&#xA;&#xA;After getting familiar with the folder structure of the Django framework, we&#39;ll create our first view in an app. The basics of creating and mapping a view with a URL will be cleared by the end of this part.&#xA;&#xA;## Creating Views&#xA;&#xA;&gt; Views are the functions written in python as a logic control unit of the webserver&#xA;&#xA;To create a view or typically-like function, we need to write a function in the `views.py` file inside of the application folder. The function name can be anything but should be a sensible name as far as its usability is concerned. Let&#39;s take a basic example of sending an HTTP response of &#34;Hello World&#34;.&#xA;&#xA;#### project_name/app_name/views.py&#xA;```python&#xA;from django.http import HttpResponse&#xA;&#xA;def index(request):&#xA;  return HttpResponse(&#34;Hello World&#34;)&#xA;```  &#xA;&#xA;Yes, we are simply returning an HTTP Response right now, but rendering Templates/HTML Documents is quite similar and easy to grasp in Django. So, this is a view or a piece of logic but there is a piece missing in this. Where should this function be used? Of course a URL i.e a path to a web server.&#xA;&#xA;We&#39;ll see how to map the views to an URL in Django in the next section&#xA;&#xA;## Mapping the Views to a URL&#xA;&#xA;We need to first create a `urls.py` file in the application folder to create a map of the URL to be mapped with the view. After creating the file in the same app folder as the `views.py`, import the function in the view into the file.&#xA;&#xA;#### project_name/app_name/urls.py&#xA;```python&#xA;from .views import index&#xA;from django.urls import path &#xA;&#xA;urlpatterns = [&#xA;    path(&#39;&#39;, index, name=&#34;index&#34;),&#xA;]&#xA;```&#xA;The path can be anything you like but for simplicity, we&#39;ll keep it blank(&#39;&#39;) for now.   &#xA;&#xA;Now, you have the path for your view to work but it&#39;s not linked to the main project. We need to link the app urls to the project urls. &#xA;&#xA;To link the urls of your app to the main project folder, you need to just add a single line of code in the `urls.py` file of the project folder.&#xA;&#xA;In projectname folder -&gt; urls.py&#xA;&#xA;#### project_name/urls.py&#xA;```python&#xA;from django.contrib import admin&#xA;from django.urls import path, include&#xA;&#xA;urlpatterns = [&#xA;    path(&#39;admin/&#39;, admin.site.urls),&#xA;    path(&#39;&#39;, include(&#39;post.urls&#39;)),&#xA;]&#xA;```&#xA;&#xA;You need to add the line `path(&#39;&#39;, include(&#39;post.urls&#39;)),` and also import the `include` function from `django.urls`. This additional statement includes the urls or all the `urlpatterns` in the `post` app from the `urls.py` file into the project&#39;s url-routes. &#xA;&#xA;Here, the URL path can be anything like `&#39;home/&#39;`, `&#39;about/&#39;`, `&#39;posts/&#39;`, etc. but since we are just understanding the basics, we&#39;ll keep it `&#39;&#39;` i.e. the root URL. &#xA;&#xA;You can also see that there is another route in our project `&#39;admin/&#39;` which is a path to the admin section. We&#39;ll explore this path and the entire Admin Section in some other part of this series.&#xA;   &#xA;Now if you start the server and visit the default URL i.e `http://127.0.0.1:8000`, you will see a simple HTTP message `Hello World`.&#xA;&#xA;![Hello World view](https://res.cloudinary.com/dgpxbrwoz/image/upload/v1638194390/blogmedia/uv1_xf4byq.png)&#xA;&#xA;## Breaking the `path` function in urlpatterns&#xA;&#xA;The path function in the urlpatterns takes in at least 2 parameters, i.e. the URL pattern and the view of any other function that can be related to the webserver. &#xA;&#xA;```&#xA;path( &#39; &#39;,   view,    name )&#xA;       ^       ^        ^ &#xA;       |       |        |&#xA;       |       |     url_name&#xA;       |   function_name&#xA;   url_path    &#xA;```   &#xA;&#xA;### URL path&#xA;&#xA;The URL Path is the pattern or literally the path which you use in the Browser&#39;s search bar. This can be static i.e. some hard-coded text like `home/`, `user/`, `post/home/`, etc. and we can also have dynamic URLs like `post/&lt;pk:id&gt;/`, `user/&lt;str:name&gt;/`, etc. here the characters `&lt;pk:id&gt;` and `&lt;str:name&gt;` will be replaced by the actual id(integer/primary key) or the name(String) itself. &#xA;&#xA;This is used in an actual web application, where there might be a user profile that needs the unique user-id to render it specifically for that user. The User-Profile is just an example, it can anything like posts, emails, products, any form of a content-driven application. &#xA;&#xA;### View&#xA;&#xA;The view or the function is the name of the function that will be attached to that URL path. That means once the user visits that URL, the function is literally called. **View is just a fancy word for a function(or any logic basically).** There is a lot to be covered when it comes to `View` as there are a lot of ways to create it, there are two types of views, how to use them for various use-cases that can be learned along the way because it is a topic where the crust of Django exists.  &#xA;&#xA;We&#39;ll learn to create different implementations and structure our views, for time-being just consider them as the unit where every operation on the web can be performed. We can create other standalone functions in python to work with the views to make it a bit structured and readable.&#xA;&#xA;### URL Name&#xA;&#xA;This is an optional parameter to the path function as we do not mandatorily need to give the URL map a name. This can be really useful in multi-page application websites where you need to link one page to another and that becomes a lot easier with the URL name. We do not need this right now, we&#39;ll touch it when we&#39;ll see the Django Templating Language. &#xA;&#xA;## Example Views&#xA;&#xA;Let&#39;s create some examples to understand the working of Views and URLs. We&#39;ll create a dynamic URL and integrate the Python module in the views to get familiarized with the concept.&#xA;&#xA;### Dynamic URLs &#xA;&#xA;We can use the dynamic URLs or placeholder variables to render out the content dynamically. Let&#39;s create another set of View and URL map.&#xA;&#xA;#### project_name/app_name/views.py&#xA;```python&#xA;def greet(request, name):&#xA;    return HttpResponse(&#34;Welcome, &#34; + name)&#xA;```&#xA;&#xA;This view or function takes an additional argument called `name` and in response, it just says `Welcome, name` where the name can be any string. Now after creating the view, we need to map the view to a URL pattern, We&#39;ll add a path for this greet function. &#xA;&#xA;#### project_name/app_name/urls.py&#xA;```python&#xA;path(&#39;greet/&lt;str:name&gt;/&#39;, greet, name=&#34;greet&#34;),&#xA;```&#xA;&#xA;You can see how we have created the url-pattern here. The greet part is static but the `&lt;str:name&gt;` is a variable or just a URL parameter to be passed to the view as the value of the variable `name`. We have also given the URL map a name called greet, just for demonstration of its creation. &#xA;&#xA;You&#39;ll get an error, 100% if you are blindly following me! Didn&#39;t you forget something?&#xA;&#xA;Import the greet function from the views like so:&#xA;&#xA;```python&#xA;from .views import index, greet  &#xA;```&#xA;&#xA;So, after we visit the URL `https://127.0.0.1:8000/greet/harry`, you should see a response `Welcome, harry` as simple as that. &#xA;&#xA;![Greet URL Demo](https://res.cloudinary.com/dgpxbrwoz/image/upload/v1638252762/blogmedia/uv-greet_e2wg5o.gif)&#xA;&#xA;Now, how is this working? We see the view first. The function takes two parameters one is most common the request which stores the meta-data about the request, the other parameter is the name that we will be use to respond to the server dynamically. The name variable is used in the string with the HttpResponse function to return a simple string.&#xA;&#xA;Then, in the URLs, we need to find a way to pass the variable name to the view, for that we use the `&lt;string:name&gt;` which is like a URL parameter to the view. The path function automatically parses the name to the appropriate view and hence we call the greet function with the name variable from the URL.&#xA;&#xA;### Using Pythonic things&#xA;&#xA;We&#39;ll use some Python libraries or functions in the Django App. In this way, we&#39;ll see it&#39;s nearly no-brainer to use Python functions or libraries in the Django framework as indeed all files which we are working with are Python files.&#xA;&#xA;#### project_name/app_name/views.py&#xA;```python&#xA;from random import randint&#xA;&#xA;def dice(request):&#xA;    number = randint(1,6)&#xA;    return HttpResponse(f&#34;It&#39;s {number}&#34;)&#xA;```&#xA;&#xA;This view is using the random module, you can pretty much use other web-compatible modules or libraries. We have used the `random.randint` function to generate the pseudo-random number between 1 and 6. We have used the f-string (`f&#34;{variable}&#34;`)styled Response string as int is not compatible with the response concatenation. So this is the logic of our map, now we&#39;ll need to link it to a URL-path. &#xA;&#xA;#### project_name/app_name/urls.py&#xA;```python&#xA;path(&#39;throw/&#39;, dice, name=&#34;dice&#34;),&#xA;```&#xA;&#xA;Also, import the view name from the views as `from .views import dice` also add other views if present. Now if we go to the URL `https://127.0.0.1:8000/throw/`, we shall see a random number in the response. This is how we used Python to make the logic of our view.&#xA;&#xA;![Dice URL Demo](https://res.cloudinary.com/dgpxbrwoz/image/upload/v1638252951/blogmedia/uv-dice_bsodzq.gif)&#xA;&#xA;So, that was the basics of creating and mapping views and urls. It is the most fundamental of the workflow in Django project development. You need to get familiar with the process of mapping Views and urls before diving into Templates, Models, and other complex stuff. &#xA;&#xA;## Conclusion&#xA;&#xA;From this part of the series, we touched upon the basics of views and URLs. The concept of mapping URLs and views might have been much cleared and it will be even gripping after we explore the Template handling and Static files in the next part. If you have any queries or mistakes I might have made please let me know. Thanks for reading and Happy Coding :)&#xA;</content>
      <type>posts</type>
    </item>
    <item>
      <title>Django Basics: Folder Structure</title>
      <link>meetgor.com/django-basics-folder-struct</link>
      <description></description>
      <pubDate>Wed, 24 Nov 2021 00:00:00 UTC</pubDate>
      <content>&#xA;### Introduction&#xA;&#xA;After setting up the development for the Django framework, we will explore the project structure. In this part, we understand the structure along with the various components in the Project as well as individual apps. We will understand the objective of each file and folder in a brief and hopefully by the end of this part, you&#39;ll be aware of how the Django project is structured and get a good overview of the flow of development in the Django project.&#xA;&#xA;## Project Structure&#xA;&#xA;We will create a Django project from scratch and understand it from the ground up. As in the previous part, I&#39;ve shown you how to create a project. In this section, we&#39;ll create a project `Blog`. TO do that, we&#39;ll create a folder called `Blog`, install and set up the virtual environment as discussed and explained in the previous part.&#xA;&#xA;After the virtual environment is created and activated, we&#39;ll create the project.&#xA;&#xA;```shell&#xA;django-admin startproject Blog .&#xA;```&#xA;After this command, if we see the directory structure, it should look something like this:&#xA;&#xA;![Basic Django folder structure](https://res.cloudinary.com/dgpxbrwoz/image/upload/v1637661221/blogmedia/tree_ak3mgm.png)&#xA;&#xA;As we can see there are 6 files and a folder. The base folder is for the configuration at a project level. I have actually not shown the `venv` ( using `-I venv` option on tree command) as it is out of the scope of this series. The `venv` folder contains modules and scripts which are installed in the virtual environment. &#xA;&#xA;So, lets break the folder structure down into understandable files.&#xA;![](https://res.cloudinary.com/dgpxbrwoz/image/upload/v1637745146/blogmedia/16_qenomh.png)&#xA;### manage.py&#xA;&#xA;Our project consists of a `manage.py` file which is to execute several commands at a project level. We do not have to edit any of the contents of this file (never). It is the file that allows us to run the server, apply migrations, create an Admin account, create apps, and do a lot of crucial things with the help of python. &#xA;&#xA;So, it&#39;s just the command-line utility that helps us interact with the Django project and applications for configurations. &#xA;&#xA;### Project Folder&#xA;&#xA;Now, this is the folder where the project-configuration files are located. **The name of the folder is the same as that of the project**. This makes the folder unique and hence creates a standard way to store files in a structured way. &#xA;&#xA;The folder is a python package which is indicated by the `__init__.py` file. The purpose of the `__init__.py` file is to tell the Python environment that the current folder is a Python package. &#xA;&#xA;The folder consist of several files(5 files):&#xA;&#xA;### settings.py&#xA;&#xA;This is a really important file from the project&#39;s point of view. This contains certain configurations that can be applied to the rest of the project (or all the apps). &#xA;&#xA;In the `settings.py` file, we can do some of the following operations :&#xA;&#xA;- List of `applications` that might be pre-installed or user-defined.&#xA;- Configure the Middleware. &#xA;- Configure and connect the Database.&#xA;- Configure Templates/Static/Media files.&#xA;- Custom Configuration for Time-Zones, Emails, Authentication, CORS, etc.&#xA;&#xA;Besides the above-mentioned options, there is a lot of project-specific configurations or application-specific settings as well. &#xA;&#xA;Here, you&#39;ll have a question,&#xA;&#xA;### WHAT IS AN APPLICATION?&#xA;&#xA;An application is a component of a project. There are also Python packages that are made to be used as a Django app that allows reusing the components. But when we are developing the project, we can break a complex process/project into individual apps. &#xA;&#xA;For Example, a project of `Blogging Platform` might have an application for `posts`, `users`, `api`, `homepage`, etc. So the project `Blogging Platform` might have separated the components like its API, Homepage, Post, Users, and so on to keep the development independent and well organized.&#xA;&#xA;So, we can understand apps as separate components of a large project. We can also understand apps as reusable components, you can use the `posts` app in another project or in a particular app of the same project making it easier and faster to create the project.&#xA;&#xA;### urls.py &#xA;&#xA;This is a file for managing the `URL` routes of the project. We&#39;ll discuss URLs and Views in their own part in the series. This file basically has a list of URLs that should be paired with a `view` or any other function. In the project folder, the URL patterns mostly link a baseurl to the URL file of the particular application. Don&#39;t worry if you can&#39;t get some of the terms, you&#39;ll clearly understand when we see them in the future parts of this series.&#xA;&#xA;### wsgi.py&#xA;&#xA;WSGI or Web Server Gateway Interface is a file that is used to configure the project for production or deployment. This takes care of the server when we deploy into production. It is a Synchronous Web Server i.e. it listens to only one request and responds to that at a time.&#xA;&#xA;Some of the common WSGI servers are [Gunicorn](https://gunicorn.org/), [Apache](https://docs.djangoproject.com/en/3.2/howto/deployment/wsgi/modwsgi/), [uWSGI](https://docs.djangoproject.com/en/3.2/howto/deployment/wsgi/uwsgi/), [cherrypy](https://docs.cherrypy.dev/), [Aspen](https://github.com/buchuki/aspen/blob/master/aspen/wsgi.py), etc.&#xA;&#xA;### asgi.py&#xA;&#xA;ASGI or Asynchronous Server Gateway Interface is also similar to the WSGI file but it serves as an asynchronous web server. This file handles the requests which might be asynchronous i.e. the web server can respond to multiple requests and respond to them at a time. We can even send tasks to the background using this type of server configuration. &#xA;&#xA;Some of the common ASGI servers are [Uvicorn](https://www.uvicorn.org/), [Daphne](https://docs.djangoproject.com/en/3.2/howto/deployment/asgi/daphne/), [Hypercorn](https://docs.djangoproject.com/en/3.2/howto/deployment/asgi/hypercorn/), etc.&#xA;&#xA;## Creating a Django Project Application &#xA;&#xA;So, let&#39;s create an application to see the structure of the basic app in Django. To create an app, we can use the `startapp` option with the `python manage.py` command followed by the name of the app like:&#xA;&#xA;```shell&#xA;python manage.py startapp name&#xA;```&#xA;&#xA;Here, `name` can be any app name you&#39;d like to give. &#xA;&#xA;## Application Structure&#xA;&#xA;After creating an app, let the name be anything it should have a similar structure as :&#xA;&#xA;![](https://res.cloudinary.com/dgpxbrwoz/image/upload/v1637731715/blogmedia/apptree_zr12s0.png)&#xA;&#xA;As we can see there are a couple of things to be discussed here. The main components that we are going to work on within developing the application in the project are: `models.py`, `views.py`, `test.py`. There are other files that we will create manually like the `urls.py`, `serializers.py`, etc.&#xA;&#xA;You also need to add the name of the app in quotes in the `INSTALLED_APPS` list in the `settings.py` file. Something like this:&#xA;&#xA;![](https://res.cloudinary.com/dgpxbrwoz/image/upload/v1637748258/blogmedia/installed_apps_ozir1p.png)&#xA;&#xA;The application files can be summarized as :&#xA;&#xA;![App structure summary](https://res.cloudinary.com/dgpxbrwoz/image/upload/v1637745151/blogmedia/17_xyefpq.png)&#xA;&#xA;Let us look at each of the files and folders in the application:&#xA;&#xA;### models.py&#xA;&#xA;As the same suggests, we need to define the model of a database here. The actual structure and the relationship are created with the help of python and Django in this file. This is the place where the crust of the web application might be defined. &#xA;&#xA;There are various aspects in creating a model like `Fields`, `Relationship`, `Meta-data`, `methods`, etc. These are defined with the help of python along with the Django Models. In most cases, a model is like a single `table` in an actual database. &#xA;&#xA;The file is quite important and interesting as it abstracts away the manual work of typing `SQL` queries to create the database. &#xA;&#xA;### migrations&#xA;&#xA;This migrations folder is a way for Django to keep track of the changes in the database. At every `migration` or actual query that runs to create the table or the database structure. There might be multiple steps or iteration of the database, this folder stores those pieces of information.&#xA;&#xA;To make an analogy, it is like a `.git` folder but for keeping track of the migrations or changes to the database. &#xA;&#xA;### admin.py&#xA;&#xA;This is the file for performing the operations at the admin level. We generally use this file to register the models into the `Admin section` without touching any frontend part. It provides a built-in `CRUD`(Create Read Update Delete) functionality to the model. This is really good for testing up the model manually before putting effort into the frontend part. &#xA;&#xA;Other than this, we can customize the admin section with this file. We will see the details in the part of the `Admin section` in this series.&#xA;&#xA;### views.py&#xA;&#xA;This is a file, that acts as a controller/server logic for the Django framework. We can define functions and classes as a response to the incoming requests from the server via the `urls.py` file. There are a couple of approaches when it comes to writing the format of the functions like `class-based views`, `function-based views`, and others depending on the type of operation is been done.&#xA;&#xA;As said earlier, it is the `V`(View) in the `MVT` architecture in Django Framework. This is the place where we write the logic from the server-side to let&#39;s say render HTML pages(templates), query to the database with CRUD operations, return an HTTP response, etc.  &#xA;&#xA;### urls.py&#xA;&#xA;This is the file in which a list of URL patterns is mapped to the particular view function. This `urls.py` is specific to the app and it might be prefixed with the URL route mentioned in the project folder&#39;s `urls.py` file.  &#xA;&#xA;So, not going much deeper, simply to put it&#39;s a map of a particular URL path with a function associated to it which gets triggered(called) when the user visits the URL. &#xA;&#xA;### tests.py&#xA;&#xA;This is a file where we can perform automated tests on the application. This might be in integration with models, other applications, project settings, etc. This is a component that Django makes it to have easy and quick unit testing along with the Python modules for advanced testing. It is quite easier to integrate python modules and libraries into almost anything in the Django Project.&#xA;&#xA;### apps.py&#xA;&#xA;This is the file for app-level configuration. We can change the default fields, app name, email settings, other module-specific settings that can be used in the models, views, or in another place that can be defined here. &#xA;&#xA;## Other Folders/files&#xA;&#xA;Apart from the app folder and the project folder, we may have other folders like the `templates`, `static`, `media`, etc. There are also python package-specific folders for which you may need to create folders.&#xA;&#xA;### Templates&#xA;&#xA;There are a couple of standard ways you can set up your Templates folder. Either in the root project or inside individual apps. The choice is yours, however, you feel comfortable. I personally use only one template folder in the root directory, but you can keep it wherever you want, but these two are the standard ones for ease of reading and maintaining the projects.&#xA;&#xA;&#xA;### Static &#xA;&#xA;The Static folder is the folder in which you store your `css`, `javascript`, and `images`(images or media files that are used in the templates). This is a good way to improve the performance as in the production the webserver collects all the static files and stores them in a single place for responding to the requests. &#xA;The template folder if present in the root folder, has a sub-folder as the application names and inside the `app-name`, we put in all the `.html` or other template files. &#xA;&#xA;As similar to the `template` folder, the location can be modified or set as a configuration from the settings.py file. Usually, the static files(`.css`, `js`, etc) are stored in the root folder with app names as subfolders. &#xA;&#xA;### Media&#xA;&#xA;The media folder is where you can store the media-specific to the user or the application processed data. For example, we can store the profile pictures of users, email attachments if it&#39;s an email application, thumbnails of the posts for a blogging platform, etc. &#xA;&#xA;The configuration of the Media folder is quite similar to the Static folder but it has certain additional configurations. We&#39;ll look at them in their sections in this series.&#xA;&#xA;Phew! That was all the folder structure you need to get started with Django. There might be other folders and files specific for project, application, python modules but it won&#39;t be much hard to understand those as well.&#xA;&#xA;## Conclusion&#xA;&#xA;From this part, we were able to understand the folder structure of the Django framework. We explored the various files and folders with their use cases and their purpose. So, by reading the above description of the files and folders you might have got a rough idea about the flow of the development cycle in Django.&#xA;&#xA;In the next part, we&#39;ll start with actually getting hands dirty in the code and making our first view. Thank you for reading and Happy Coding :)&#xA;</content>
      <type>posts</type>
    </item>
    <item>
      <title>Django Basics: Setup and Installation</title>
      <link>meetgor.com/django-basics-setup</link>
      <description></description>
      <pubDate>Sat, 20 Nov 2021 00:00:00 UTC</pubDate>
      <content>&#xA;## Introduction&#xA;&#xA;The crucial aspect of starting to learn any framework is the ease to set it up and Django by far is the easiest of the options out there. There is just a few lines of code to install django if you already have python installed in your system. In this article, we see how to setup a django project along with a virtual environment. &#xA;&#xA;If you already have python and pip installed, you can move on to the [virtual environment setup](#setting-up-virtual-environment-in-python).&#xA;&#xA;## Installing Python and PIP&#xA;&#xA;Django is a python based framework so that makes sense to have Python installed along with its package manager to use Django.  &#xA;&#xA;To install Python, you can visit the official [Python](https://www.python.org/downloads/) website to download any relevant version for your system (recommended 3.7 and above). &#xA;&#xA;Mostly the Python installation comes with the option to install `pip`(python&#39;s package manager) but if you missed that, that&#39;s fine, you can install the [get-pip.py](https://bootstrap.pypa.io/get-pip.py) file into your system and run the below code:&#xA;&#xA;```&#xA;python get-pip.py   &#xA;```&#xA;&#xA;Make sure the include the relative path to the file if you are not in the same folder as the file.&#xA;&#xA;So, that should be python setup in your local machine. To check that python was installed correctly, type in `python --version` and `pip --version` to check if they return any version number. IF they do, Congratulations !! You installed Python successfully and if not, don&#39;t worry there might be some simple issues that can be googled out and resolved easily. &#xA;   &#xA;---&#xA;&#xA;Let&#39;s move on to the actual setting of the Django project set up.   &#xA;&#xA;## Setting up Virtual Environment in python&#xA;&#xA;Virtual Environment is a software which isolates the installation of dependencies and libraries for a specific project, making it a clean and safe environment for deployment as well as maintenance. &#xA;&#xA;In Python, we have a virtual environment package known as `virtualenv` that does this thing. It is for installing the Python related packages into a isolated folder. So, we can install the `virtualenv` package in python by following the following steps:&#xA;&#xA;### Installing Virtualenv&#xA; &#xA;Firstly, install the virtual environment package, it&#39;s not mandatory but it keeps things simple and easy for your project in correspondence to the entire OS. So in python, we have a module to create the virtual environment pretty easily,&#xA;&#xA;```&#xA;pip install virtualenv&#xA;```&#xA;&#xA;You can use `pip3` or `pip -m`, or however you install normal python modules. This just installs the python virtual environment, we need to create a virtual environment in the current folder.&#xA;&#xA;### Creating a virtual environment&#xA;&#xA;We need to create the environment so as to give the Python interpreter an indication to consider the current folder as an isolated Python environment. We need to create a virtual environment in the current folder, so for that navigate to the folder where you want to create the project and enter the following command: &#xA;&#xA;```&#xA;virtualenv venv&#xA;``` &#xA;&#xA;Here, `venv` can be anything like `env` just for your understanding and simplicity it&#39;s a standard name kept for the same. After this, you will see a folder of the same name i.e. `venv` or any other name you have used. This is the folder where python will keep every installation private to the local folder itself. &#xA;&#xA;### Activating Virtual environment &#xA;&#xA;Now, we need to activate the virtual environment, this means that any thing installed in the prompt with the virtualenv activated will be isolated from the entire system and will be installed on in the virtual environment. To activate the environment, we can use the command :&#xA;&#xA;#### for Linux/macOS :&#xA;&#xA;```&#xA;source venv/bin/activate&#xA;```&#xA;&#xA;#### for Windows:&#xA;&#xA;```&#xA;venv\Scriptsï¿½ctivate&#xA;```&#xA;&#xA;After this, your command prompt will have a `(venv)` attached in the beginning. This indicates you are in a virtual environment, things you do here, may it be module installation or any configuration related to python will stay in the local folder itself.&#xA;&#xA;&#xA;## Installing Django&#xA;&#xA;After the virtual environment is set up and activated, you can install Django and get started with it. Django is a python module or package, which can be easily installed using its package manager `pip`. &#xA;&#xA;Install Django using pip:&#xA;&#xA;```&#xA;pip install django&#xA;```&#xA;&#xA;## Create a Django Project&#xA;&#xA;After the installation is completed, you can start a Django project in the current folder from the django package we installed. There are several commands available in the django module which you can execute in the command line that we&#39;ll discuss later.&#xA;For now, we will use the command `startproject` this is one of the [management commands](https://github.com/django/django/tree/main/django/core/management/commands) in Django. The [django-admin](https://docs.djangoproject.com/en/3.2/ref/django-admin/) is a command line utility for doing the administrative tasks related to Django.&#xA;&#xA;```&#xA;django-admin startproject myproject&#xA;```&#xA;&#xA;Here `myproject` can be your project name. After this, you will see one new folder and one file pop up.&#xA;&#xA;Namely, the `&lt;project-name&gt;` folder and `manage.py` file. We don&#39;t have to touch the `manage.py` file but we use it in most of the commands to use the Django functionalities, it is quite similar to the `django-admin` command. &#xA;&#xA;You can now run your basic server using the command : &#xA;&#xA;```&#xA;python manage.py runserver&#xA;```&#xA;&#xA;OR&#xA;&#xA;You can use `djagno-admin` command, but you need to set certain environment variables and modify the settings.py file as per the project-name. You can use the `django-admin` as the steps given in the django [documentation](https://docs.djangoproject.com/en/3.2/ref/django-admin/#cmdoption-settings).&#xA;&#xA;The output of the command `python manage.py runserver` should be visible in the browser at `https://127.0.0.1:8000` as below :&#xA;&#xA;![Django-Base-Project](https://gitlab.com/MR_DESTRUCTIVE/tblog-img/-/raw/main/screenshotr_2021-11-20T15-40-50.png)&#xA;&#xA;That&#39;s it the base django project is installed in your system. To stop the server simply press `Ctrl+C`. &#xA;&#xA;Follow the below GIF for a clear understanding of those instructions:&#xA;&#xA;![Django-basics-part2-setup](https://gitlab.com/MR_DESTRUCTIVE/tblog-img/-/raw/main/djp2.gif)&#xA;&#xA;---&#xA;&#xA;## Quick-Setup-Script&#xA;&#xA;You can avoid manually typing the commands once you get the idea of the process in setting up a django project by executing a simple shell script (for Linux/macOS) or a batch script (for Windows). The script looks something like:&#xA;&#xA;For Linux/macOS:&#xA;&#xA;```shell&#xA;#!/usr/bin/env bash&#xA;&#xA;mkdir $1&#xA;cd $1&#xA;pip install virtualenv&#xA;virtualenv venv&#xA;source venv/bin/activate&#xA;&#xA;pip install django&#xA;django-admin startproject $1 .&#xA;clear&#xA;```&#xA;&#xA;Save as commands.sh file&#xA;&#xA;For Windows: &#xA;&#xA;```batch&#xA;mkdir %1 &#xA;cd %1&#xA;pip install virtualenv&#xA;virtualenv env&#xA;call env\Scriptsï¿½ctivate&#xA;&#xA;pip install django&#xA;django-admin startproject %1 .&#xA;cls&#xA;&#xA;```   &#xA;save as commands.bat file&#xA;&#xA;For further instructions you can checkout the [GitHub repository](https://github.com/Mr-Destructive/django-quick-setup-script) or a detailed [article](https://mr-destructive.github.io/techstructive-blog/django/web-development/python/2021/08/15/Django-Quick-Setup.html) about it.&#xA;&#xA;## Conclusion&#xA;&#xA;From this section, we were able to setup the Django project in our local system. In the next part, we will cover the `folder structure` of the Django project. We won&#39;t directly go into the code part because that is very easy once you understand the flow of the framework and its internal working. So, thanks for reading and Happy Coding :)&#xA;</content>
      <type>posts</type>
    </item>
    <item>
      <title>Django Basics: What is it?</title>
      <link>meetgor.com/django-basics-intro</link>
      <description></description>
      <pubDate>Tue, 16 Nov 2021 00:00:00 UTC</pubDate>
      <content>&#xA;&#xA;## Introduction&#xA;&#xA;Welcome to Django Basics series, in this series we&#39;ll explore the basics of the Django web framework. In this part, we&#39;ll understand what this web framework provides and what actually the back-end development consists of. We&#39;ll discuss where Django is used and why it is a great choice for beginners as well as experienced developers. &#xA;&#xA;## What is Django?&#xA;&#xA;[Django](https://developer.mozilla.org/en-US/docs/Learn/Server-side/Django/Introduction) is a back-end web framework. It is based on python which means you have to write most of the project&#39;s code in Python. But Django comes with a lot of boilerplate code and thus it becomes quite quick in the development. &#xA;&#xA;Django is an open-source framework, it is maintained by the Django Software Foundation Organization. You can view the source code at [GitHub](https://github.com/django/django).&#xA;&#xA;### BACKEND ?&#xA;&#xA;The term `backend` refers to the section or an essential component in Web development, it consists of a `database`, `API`, and the `web server` itself which allows the components to connect together. There might be other components like `load-balancers`, `middleware`, etc. But the core of web applications revolves around **Databases** and **API**. &#xA;&#xA;#### Database&#xA;&#xA;A database is a technology or tool that lets you store the data which might be used for serving the actual application, that might be a frontend app, standalone API, etc. The data you want to store might be generally the User Accounts, Content of the App, basically any some form of data(there are exceptions here, you can&#39;t directly store media files in DB). The Database allows to make content management and the application dynamic and can be personalized. We have certain types of databases like SQL(relational), NO-SQL, Cloud, Network, etc. The tools of these database management are PostgreSQL, MySQL, MongoDB, HarperDB,etc. These tools allow you to manage your database in a convenient way.  &#xA;&#xA;#### API&#xA;&#xA;An API or Application Programming Interface is a way for any frontend app, outside the system to access the database. API allows you to query to the database with GET, POST, DELETE, PUT, etc kinds of operation/requests to the database via the webserver. In API, we have endpoints or (URL routes) at which a particular designated operation can be performed. In APIs, we currently have four primary architectures namely RESTful (quite famous and well established), SOAP, gRPC, and GRAPHQL (new and increasing in popularity). &#xA;&#xA;### Framework?&#xA;&#xA;A framework is a tool to do a certain task efficiently and avoid some repetitive patterns by abstracting many layers in developing it. Django is a high-level framework which means it abstracts certain processes in making the application. It is ideal for beginners to get up and running with a professional full-stack web application(though it requires some learning).&#xA;&#xA;Django makes the project ideal for experienced as well as beginner web developers. The community and the ecosystem of Python are quite amazing as well as there are a ton of resources to get you through your projects.  &#xA;&#xA;![](https://gitlab.com/MR_DESTRUCTIVE/tblog-img/-/raw/main/dj-1.png)&#xA;&#xA;The above is a high-level view of how Django project development works, the application might be not only one but several other standalone applications working together to make one project in Django. There is a lot of abstraction in Django like the Middleware, Session Management, Security, etc. This should be a good overview of the development map in Django.&#xA;&#xA;Django follows an MVT architecture. Architecture is a standard in developing an application/project for the ease of the workflow and making it an even experience. &#xA;&#xA;![](https://cdn.hashnode.com/res/hashnode/image/upload/v1635079576954/WcjcokoiX.png)&#xA;&#xA;The above diagram depicts the architecture in Django, the components in the Django server include the Model, View, and Template.&#xA;&#xA;### Model&#xA;&#xA;`Model` refers to the design of the database or a blueprint of the data that is bound with the application in the project. &#xA;&#xA;### View&#xA;&#xA;The `View` is the part to control the way the data should be presented or the how response should be given back to a request from the server(client)&#xA;&#xA;### Template&#xA;&#xA;The `Template` is the markup or the form of document that is to be rendered on the client-side and these are controlled by the views and parsed with the data from the models.&#xA;&#xA;## Why would you need it?&#xA;&#xA;As a developer you would find a need to host your projects on the internet, for that learning and deploying a web server from the ground up might be quite complex and time-consuming, Django solves this problem quite well. Not only it is easy but even scalable at a production level, making it quite a robust choice for anyone. And as a bonus thing, it is based on Python, which makes it even easier to write code for people staying at an abstracted perspective in programming. Python has by far the richest sets of libraries and utilities for any domain, this integration with Django is a deadly combination. &#xA;&#xA;#### Batteries included?&#xA;&#xA;Django solves many problems by abstracting away many things like managing the database, rendering dynamic templates(HTML), properly structuring and serving static and media files, well-organized project structure, and many other things. You just have to get the actual thing done i.e. the server logic(or how to design the API/Database models). On top of that, Django has a built-in fully fledged Admin section and a User model. An Admin section is where you can manage the project in a better way without touching the code. It also has certain applications/libraries to make the development of APIs, integrating various databases, forms for posting data, support for Bootstrap a lot easier. It&#39;s like a `plug and play` kind of thing for the development of web applications. &#xA;&#xA;Hence, it is rightly called the `Batteries Included` web framework.&#xA;&#xA;### Key features of Django&#xA;&#xA;- Ease in integrating a database&#xA;- Flawless Django Template Engine&#xA;- Easy to scale up/down&#xA;- Python libraries support out of the box&#xA;- Amazing Documentation / Helpful community&#xA;- Developing Production-ready projects quickly&#xA;- Baked in support for testing, APIs, cookies, sessions, etc&#xA;- Optimized for security, SEO, and DRY(don&#39;t repeat yourself) principles&#xA;&#xA;## Applications built with Django&#xA;&#xA;Django is used in quite a famous application that you might be using daily. &#xA;&#xA;Django along with Python powers the top applications on the internet like:&#xA;&#xA;1. YouTube&#xA;2. Instagram&#xA;3. Spotify&#xA;4. Disqus&#xA;5. Dropbox&#xA;6. Pinterest&#xA;7. National Geographic&#xA;8. Mozilla&#xA;9. BitBucket&#xA;10. Discovery Network&#xA;&#xA;You have to say, it is powerful and has firm grounds in the tech industry. It&#39;s highly unlikely that Django will be overtaken by another framework at least some years from now.  &#xA;&#xA;&gt; Django is a tool to build web applications fast and in a scalable and Pythonic way&#xA;&#xA;## What will this series cover?&#xA;&#xA;Learning Django from the ground up. We will learn the setup, folder structure, architecture of Django, What are apps, views, URLs, models, serializers, static and template files, and there is a ton of stuff to be covered. &#xA;&#xA;### Resources to learn Django&#xA;&#xA;- [Django Official Docs](https://www.djangoproject.com/start/)&#xA;- [Very Academy - Django Playlist](https://www.youtube.com/c/veryacademy/playlists?view=50&amp;sort=dd&amp;shelf_id=2)&#xA;- [Codemy.com - Django](https://www.youtube.com/watch?v=HHx3tTQWUx0&amp;list=PLCC34OHNcOtqW9BJmgQPPzUpJ8hl49AGy)&#xA;- [Corey Schafer](https://www.youtube.com/watch?v=UmljXZIypDc&amp;list=PL-osiE80TeTtoQCKZ03TU5fNfx2UY6U4p)&#xA;- [Telusko](https://www.youtube.com/watch?v=SIyxjRJ8VNY&amp;list=PLsyeobzWxl7r2ukVgTqIQcl-1T0C2mzau)&#xA;&#xA;## Conclusion&#xA;&#xA;From this article, we were able to understand the Django framework, what is it, and why it should be used on a high level. Further, we explored the web application(backend) components which are targeted by Django for ease of developing applications. We also saw the baseline architecture that Django uses to make projects. &#xA;&#xA;In the next section, we&#39;ll start the actual coding in Django, firstly how to set up the environment and understanding the folder structure, and so on. So I hoped you enjoyed the article. Thank you for reading. Happy Coding :)&#xA;</content>
      <type>posts</type>
    </item>
    <item>
      <title>Flask and Django - the backend web frameworks</title>
      <link>meetgor.com/flask-django-frameworks</link>
      <description></description>
      <pubDate>Sun, 24 Oct 2021 00:00:00 UTC</pubDate>
      <content>&#xA;## Introduction&#xA;&#xA;We all have seen the buzz around web frameworks like Django, Flask, Node.js, etc but have you taken time to learn all of them? No, and you shouldn&#39;t! Because many web frameworks share the same principle and workflow with a bit of difference. It&#39;s just like learning one programming language and applying the same concepts in a different syntax and mechanism. In the world of web frameworks, this is the case as well, but most of them will disagree with it as every web framework is unique in its design and that&#39;s true, don&#39;t get me wrong.&#xA;&#xA;Before we get into frameworks let us understand the key components of the web application&#xA;- **Database** - It holds the data for our application.&#xA;- **Server** - Used to fetch/store/manage requests from the client. &#xA;- **API** - Used as an interface between the client and the Database. &#xA;- **Client** - The browser or any client that requests for resources.&#xA;&#xA;![djflask-webapp.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1635081505223/rLnSyA_7Y.png)&#xA;&#xA;Every web framework will serve the same purpose with different design, architecture, language but it will have a similar pattern in developing the application. Let&#39;s clear the concepts in this article.&#xA;&#xA;## What is a back-end Web framework?&#xA;&#xA;A web framework is a tool/application meant for designing, creating, testing web applications a lot quicker with a lot of ease. Without web frameworks, you will have been writing some code that will tire you very quickly. &#xA;&#xA;It even seems impossible to manually write markups for each piece of data in the application, which is taken care of by dynamic templating in Python-based frameworks like Django, Flask. The database queries are managed by the web frameworks as well, otherwise, you will have been writing SQL queries manually! How painful and frustrating that would look, of course, you can create scripts for querying to the database but you are then creating a component of a framework. `Don&#39;t waste time` that&#39;s a takeaway from the philosophy of all the web frameworks.&#xA;&#xA;Another thing that back-end web frameworks do is create homogeneity in development across different environments and applications. It also creates a developer-friendly environment. We must not forget how easy and quick applications can be built using the back-end web frameworks. &#xA;&#xA;&#xA;&#xA;### A back-end Web framework provides some of the features like:&#xA;&#xA;- Handle web requests&#xA;- Manage DB by just using some simple scripts&#xA;- Render Dynamic Templates&#xA;- Provide a lot of native-language libraries integration&#xA;- Organize a project much easily and effectively&#xA;- Options to scale the application at any level&#xA;- Provide some standard and secure way to run the server(production)&#xA;- Design APIs much easily&#xA;&#xA;&#xA;Let us look at two of the most popular frameworks in the Python community.&#xA;&#xA;### 1. Flask&#xA;### 2. Django&#xA;&#xA;![backend framework ranking](https://cdn.hashnode.com/res/hashnode/image/upload/v1635070666410/JbMc7NKP0.png)&#xA;&#xA;We are seeing that Django and Flask are among the top 3 back-end web frameworks in 2021. So there is no double thought on why you should learn these technologies.&#xA;&#xA;### What is Flask&#xA;&#xA;Flask is the bare-bones framework that provides a lot of customizability with a lot less boilerplate code. It is a framework that provides a lot of third-party libraries to add functionalities to our application. &#xA;&#xA;&gt; Flask is a micro web framework&#xA;&#xA;Flask as per the official documentation is a `micro` framework indicating it has a very minimal setup. It is a back-end web framework that can be structured as per needs with a very little configuration overhead. That being said, it can get a bit limited in structuring and functionalities as it needs to taken care of manually.&#xA;&#xA;**Flask is the easiest back-end web framework to get started and learn the fundamentals of server-side**. Flask is quite flexible in terms of scalability and maintenance of decent-sized applications as well. Though the community is not that big and absence of standardization in Flask, it is a go-to back-end web framework for beginners as well as experts due to its simplicity and flawless integration with Python libraries. &#xA;&#xA;The main concepts in Flask might be:&#xA;&#xA;- Virtual Environment &#xA;- WSGI as a web server&#xA;- App routing&#xA;- Jinga2 as a templating language&#xA;- Creating Database connections&#xA;&#xA;So, **Flask is kind of a DIY back-end web framework with rich sets of libraries and customizability out of the box**. This can easily be a beginner&#39;s choice and a right one too.&#xA;&#xA;### What is Django&#xA;&#xA;Django is also a back-end web framework based on Python programming language but it is more standardized and high-level. Django encourages a defined pattern for development but with customization and freedom in mind.&#xA;&#xA;Django also modularizes the components into so-called `apps` to provide a scalable experience. It has a lot of boilerplate code to get up and running quite easily, it also has a `Admin section` pre-built with all the functionalities. Similar to `Flask`, it also provides flawless integration with all the Python libraries. It provides a much easier Database integration and pre-built `User` authentication along with its model ready to plug in and use. &#xA;&#xA;&gt; Django is a Batteries included Framework&#xA;&#xA;That means it has baked in functionalities like User-Authentication, Admin Section, Database Integration, RSS/Atom syndication feeds, etc. &#xA;&#xA;![djflask-dj.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1635079576954/WcjcokoiX.png)&#xA;&#xA;The main concepts in Django include:&#xA;&#xA;- Virtual Environment&#xA;- WSGI/ASGI as web servers&#xA;- Project structure&#xA;- `Model View Controller` Architecture in developing apps&#xA;- Django Templating Language for rendering Dynamic Templates &#xA;- `Object-Relational Mapping` in creating the applications&#xA;&#xA;Unlike Flask, Django is already baked in with a lot of functionalities and integration with a ton of features. It should be good for beginners but many things are already taken care of that can be a huddle in **actual learning process**, that being said it is a much scalable and production-ready web framework (not only back-end).&#xA;&#xA;### What are the similarities between them?&#xA;&#xA;Well, if you learn one the other will be quite easy enough to pick up. The overall development is almost similar but unique in its own way. &#xA;&#xA;- Pythonic syntax and libraries&#xA;- Project Structure is quite similar to `blueprints` in Flask and `apps` in Django&#xA;- Templating Language is almost similar&#xA;- Static Files are handled similarly with a different syntax &#xA;- URL Routing is the same as it binds the view(functions) with a pattern&#xA;- Ease in Deployment with minimal configuration&#xA;&#xA;## What should you learn?&#xA;&#xA;That question is dependent on the type of application you are trying to make but for a beginner trying to get hands dirty on the server-side, I would recommend `Flask` as it is quite minimal and helps in constructing the base for the concepts like APIs, Databases, Requests, Admin section, etc. &#xA;&#xA;This might not be that difficult for people trying to learn back-end from scratch but for people with a bit of programming and server-side experience, `Django` should be a go-to framework for all their needs. &#xA;&#xA;At the end of the day, it hardly matters what you do with which framework, what people see is the end result.&#xA;&#xA;## Conclusion&#xA;&#xA;Thus, from this article, you might have got a bit understanding of why are the frameworks used in making applications and also the similarities and differences in the Python-based back-end web frameworks like Django and Flask. If you have any thoughts please let me know in the comments or on my social handles, any kind of feedback is much appreciated. &#xA;&#xA;Thank you for reading till here, until then as always Happy Coding :)&#xA;</content>
      <type>posts</type>
    </item>
    <item>
      <title>Dev Quotes: A platform for developers to quote and get inspired - Auth0 x Hashnode Hackathon</title>
      <link>meetgor.com/devquotes-platform</link>
      <description></description>
      <pubDate>Fri, 27 Aug 2021 00:00:00 UTC</pubDate>
      <content>&#xA;## Introduction&#xA;&#xA;&gt; No one can understand the joy in finishing a personal project, except the dreamer &#xA;&#xA;It was a while,since I have posted an article here, as I was busy on a project or a hackathon.&#xA;&#xA;Hello, world! I am Meet a student and a self-taught web developer. I like to make and break stuff, especially when it comes to programming and Linux. I like shell scripting and learning different languages at once, love to learn about Vim and Linux everyday.&#xA;&#xA;Every time I start a project something else comes and distracts me let that be any other programming language or technology. That leads to creating new projects and leaving the one behind unfinished, I know most of the developers face this.  But this time, thanks to Auth0 X Hashnode Hackathon, I was able to create an almost finished project within almost 10 days. Having a deadline and competition creates a mindset to finish a project on time, that&#39;s my first takeaway from this Hackathon. OH! this is my first Hackathon by the way, and it has been amazing so far.  &#xA;&#xA;** Applying a framework to do something you desire and then everything working smoothly (after fixing 100s of bugs) is such a great feeling that no one can understand except for the person who just dreamt of it. **&#xA;&#xA;I&#39;ll like to share my project which is a web application for the Auth0 x Hashnode Hackathon. Here it goes.&#xA;&#xA;## What is Dev Quotes?&#xA;&#xA;Dev quotes is a web app designed for publishing and viewing quotes related to programming, developer mindset, and all the technicalities involved in a developer&#39;s life. It&#39;s basically a medium to express the life of developers and get inspired by others.  Here it is [devquotes](https://devquotess.herokuapp.com/)&#xA;&#xA;#### Dark Mode:&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1630074051548/TQz9Koh7l.png)&#xA;&#xA;#### Light Mode:&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1630078314355/VhfLrcjJa.png)&#xA;&#xA;&#xA;## Why Dev Quotes?&#xA;&gt; Developers are not the people who only understand how to write code but they&#39;re also the people who can make the code understandable&#xA;&#xA;As a developer, there are often times where you have no motivation left inside, but you never know you might be just a few lines of code away from making another project or fixing a bug. For that, we require some inspiration or a push to break the barrier of.  I am not saying it&#39;s just for developers, it&#39;s designed for developers but everyone is open to understanding the developers&#39; lives and their struggles. &#xA;&#xA;I also felt the need to give back some love-crafted web app to the ever-wonderful and supportive dev community. It&#39;s a small application but still, I would like to give in something instead of nothing at all. Start small grow big, hopefully :)&#xA;&#xA;## Features&#xA;&#xA;Some of the main features of the web application are as follows:&#xA;&#xA;- **Writeï¿½dit\Delete Quotes if logged in.**&#xA;&#xA;- **Like / Unlike a Quote.**&#xA;&#xA;- **See all of your quotes.**&#xA;&#xA;- **Randomized Quotes on Homepage.**&#xA;&#xA;- **Dark/Light theme based on Browser&#39;s Preference and local storage.**&#xA; &#xA;- **The app is mobile responsive as well, though the navbar is a bit wonky with the light/dark mode switch toggle, which can be taken care of soon.**&#xA;&#xA;&#xA;&#xA;![dqmob.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1630084573444/YEj38dUTD_.png)&#xA;&#xA;&#xA;&#xA;## In the making&#xA;&#xA;&gt; Have the curiosity to learn, rest is automated&#xA;&#xA;The project was made by using various inspirational articles and videos about making a web application. But the idea stuck in my mind when I was thinking about the people who don&#39;t get inspired as a developer. Like there is no way you can remain sad about being a developer and keep on dealing with imposter syndrome. Every developer has a perspective of programming but there is an infinite number of opportunities if you are curious enough. Just started making the project and got so much into it that I was literally dreaming about it like I saw parts of the webpage. In my dream and I am making it that was genuinely a thing that powered me to complete it. &#xA;&#xA;The project roughly started on 19th August and almost ended on 26th August, like the actual webpage and its core functionalities. Though on 27th were some styling and extra additions such as the About section and Footer. That was like the most productive week I ever had in my programming journey. That was fun as heck.&#xA;&#xA;## Tech Stack&#xA;&#xA;The Tech Stack involved with this app is :&#xA;- `Django`&#xA;- `PostgreSQL` &#xA;- `HTML/CSS/JS`&#xA;- ` Bootstrap`&#xA;&#xA; I have not used any front-end end frameworks just because I never found the need to learn them.  I had experience with Django for just 2 months and I am surprised I was able to make it. As obvious I have used Auth0 for authentication in my web application.&#xA;&#xA;### Auth0 integration for Authentication&#xA;&#xA;I must tell you using Auth0 was just flawless addition to my app as I have to do almost nothing, just drop some credentials of the Auth0 application with my Django project using a  [well-documented guide](https://auth0.com/docs/quickstarts)  for every type of framework. Simply straight-forward was the name for integrating authentication in my app.&#xA;&#xA;#### How I used Auth0 with Django&#xA;&#xA;I&#39;ve used Template tags such as if blocks to verify if the user is authenticated or not. &#xA;```html&#xA;&lt;div class=&#34;login-box auth0-box before&#34;&gt;&#xA;&#x9;&#x9;{{ &#34;{% if user.is_authenticated &#34;}} %}&#xA;&#x9;&#x9;    &lt;a class=&#34;btn btn-primary btn-sm tn-logout &#34; href=&#34;/logout&#34;&gt;Log Out&lt;/a&gt;&#xA;&#x9;&#x9;{{ &#34;{% else &#34;}} %}&#xA;&#x9;&#x9;    &lt;a class=&#34;btn btn-primary btn-sm tn-login &#34; href=&#34;/login/auth0&#34;&gt;Log In&lt;/a&gt;&#xA;    {{ &#34;{% endif &#34;}} %}&#xA;&lt;/div&gt;&#xA;```&#xA;&#xA;This was just readily available on their documentation though there were some adjustments as per the project requirements in this code to fit in the place.&#xA;&#xA;I must say, integrating Auth0 is even easier than using Django User Model in some sense as most of the stuff is handled by the Auth0, on our side, we simply have to create the Auth0 specific app with the credentials from the dashboard rest just works flawlessly till now. How sweet and &#xA; &#xA;### Specifications&#xA;&#xA;I won&#39;t go in-depth about the technicalities of the project but would like to address certain things. Firstly I have mostly used Class-based views for the major part, certain areas are still function-based just for the simplicity of the application and a few of them are handled and documented by Auth0 so just preferred that. &#xA;&#xA;Another thing is about Models, I just have a simple single model called `Quote` which has an Author as a Foreign Key from the Django User Model. I would have also created multiple emojis for the like system but I was too excited and in a rush to see the actual app, So just kept it simple. XD&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1630060555499/246ZKnypP.png) &#xA;&#xA;The rest of the stuff like `URLs`, `Templates`, and `static files` are handled in a neatly organized way as depicted in the below diagram.&#xA;&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1630060426600/JHMlrfOKZ.png)&#xA;&#xA;As it might not be clear from that, there are 3 apps -&gt; `auth0login`, `quotes`, and `user`, here `quotes` is kind of the most important app as it has the models, forms, URLs, and the views linked to them here. &#xA;&#xA;### Hosting&#xA;&#xA;Hosting as you can guess, it&#39;s on  [Heroku](https://www.heroku.com/) , quite beginner-friendly and feature-rich. I also have a free addon for PostgreSQL Database here.  It&#39;s limited to 10K rows but that&#39;s sufficient for a starter app like this in my opinion. Also, it has 500 free hours of dyno, which is also sufficient for a small low-traffic app like this.  &#xA;&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1630076036133/9ofxnM5VN.png)&#xA;&#xA;## Bugs Encountered &#xA;&gt; Love Bugs, they&#39;ll give you experience&#xA;&#xA;This is the most exciting and important part if you consider the hackathon because this determines the level of experience that a developer shoes in achieving certain things or features if you will. Faced some typical Django errors as usual but also some unexpected things like Dark mode and light mode clashing together due to poorly written media queries in CSS.&#xA;&#xA; As usual, the start is often hard, there is no motivation whatsoever in using the admin section to test the database queries and gibberish basic HTML page. In that process, I faced some primary key access issues and was able to understand the concept more clearly by fixing it.&#xA;&#xA;Another instance was with handling post requests in Django which I&#39;ve failed to do before. I used forms and a hybrid of CSS and bootstrap to style those forms which just works brilliantly. That took some time to figure out the exact working but after a while, it was working charms. &#xA;&#xA;&#xA;## Future Updates&#xA;&#xA;As said, I would like to add more like buttons expressing different emotions. Some other features to add are:&#xA;&#xA;- To add more emojis like claps, cheers, and others.&#xA;- To add a profile page in the app that would display all the quotes of the particular author and the details related to him/her.  &#xA;- Adding some tags to filter out particular types of quotes.&#xA;- Improve UI-UX a bit more to make it professional and pleasant.&#xA;&#xA;## Source Code&#xA;&#xA;&gt;Talk is cheap, show me the code - Linus Torvalds&#xA;&#xA;The source code is available at GitHub on this  [Link](https://github.com/Mr-Destructive/devquotes). &#xA;It&#39;s freely open for any contribution after the hackathon(mid-September).  Some of the files such as the environment variables, virtual environments, cached data are not uploaded for security and obvious reasons.&#xA;&#xA;Enough of technical talks, let&#39;s see the DEMO,&#xA;&#xA;&#xA;![dqss.gif](https://cdn.hashnode.com/res/hashnode/image/upload/v1630073466386/3wgnST5hc.gif)&#xA;&#xA;Silent claps.......&#xA;&#xA;It&#39;s not a great UI-UX but works and is not too shabby in my opinion considering it only has base HTML and CSS with a little Bootstrap and Javascript. But ya, a fully functional Backend that&#39;s what I was looking for a full-stack app with some decent features. Hope it helps some developers stay motivated and hack into some hackathons like this.&#xA;&#xA;### References used while creating the app:&#xA;- [Codemy -John Elder Django tutorial]( https://www.youtube.com/watch?v=B40bteAMM_M&amp;list=PLCC34OHNcOtr025c1kHSPrnP18YPB-NFi)&#xA;- [Django - Documentation for Forms](https://docs.djangoproject.com/en/3.2/topics/forms/)&#xA;- [Django template randomizer shuffle](https://stackoverflow.com/questions/28837511/django-template-how-to-randomize-order-when-populating-page-with-objects)&#xA;- [Auth0 app Django integration](https://www.youtube.com/watch?v=kzN_VCFG9NM)&#xA;&#xA;&#xA;## Closing Words&#xA;&#xA;&gt; Why developers find solutions to bugs at the stroke of sleeping, that&#39;s multithreading in our brains &#xA;&#xA;Hope you liked the project and hopefully will inspire developers to stay motivated and can focus on their goals more than dealing with imposter syndrome and whatnot. &#xA;&#xA;Thank you for reading and using the app, for any feedbacks, Twitter handles, comment section, GitHub issues, LinkedIn messages are all freely open. Thanks. Happy Coding :)&#xA;</content>
      <type>posts</type>
    </item>
    <item>
      <title>Django Quick Setup Script</title>
      <link>meetgor.com/django-setup-script</link>
      <description></description>
      <pubDate>Sun, 15 Aug 2021 00:00:00 UTC</pubDate>
      <content>&#xA;## Introduction&#xA;&#xA;Once you learn something very neatly and understand it very clearly, it feels like you are wasting time doing things over and over again. Same things in setting up a Django project, you feel like you could save those typing minutes by making a script. &#xA;&#xA;In this article, we will make a script a batch script for windows and a BASH script for Linux/macOS. We will make a virtual environment using python and then install the libraries and dependencies like in this case we will install Django. You can also tinker with these scripts and install other dependencies if you want like Django rest framework, crispy forms, markdown, Redis, etc. We will also make a Django project using the positional parameter passed before running the script from the command line. &#xA;&#xA;### Python development environment&#xA;This article assumes you have a python environment setup. If you don&#39;t you must install Python from the  [official website](https://www.python.org/downloads/)  as per your operating system. Also, you should have pip installed and configured correctly. You can install pip by following the  [official documentation](https://pip.pypa.io/en/stable/)  for the specific operating systems.&#xA;&#xA;## Steps in Django Project Setup &#xA;&#xA;So, If you are already familiar with the Django project setup, you can directly use the scripts provided in the next few sections. You can also visit  [this GitHub repository](https://github.com/Mr-Destructive/django-quick-setup-script)  if you have any issues and errors.  &#xA;&#xA;If you are new to django, let me first explain the process of django project setup. &#xA;- ### Initialize a VirtualEnvironment (Recommended but not necessary)&#xA;&#xA;Virtual Environment in Python is a great way of localizing the dependencies and frameworks only in the particular folder, it allows the developer to separate things out and keep them distinct, Additionally, when deploying or sharing the repository, the other developers can install the dependencies in the requirement.txt file in their local environment flawlessly. &#xA;&#xA;So, it is always recommended to use python virtualenv when working with python frameworks or libraries. We can set it up by simple pip install and then giving it a name.&#xA;&#xA;```&#xA;pip install virtualenv&#xA;``` &#xA;&#xA;This will install the package/tool using pip. &#xA;&#xA;After that has been properly installed, we can now give it an appropriate name &#xA;```&#xA;virtualenv mytest&#xA;```&#xA;&#xA;The `virtualenv` is the command and `mytest` can be any name, generally `env` or `venv` is preferred but it should be understandable to the user.  You will now be able to see the folder inside of your current directory named as `mytest` or the name you&#39;ve given to it. &#xA;&#xA;**Windows**&#xA;&#xA;Now if you are on windows, you can activate the virtual environment by using the command :&#xA;```&#xA;mytest\Scriptsï¿½ctivate&#xA;``` &#xA;here mytest is the name of your virtual env it can be anything as per your choice. This will now activate the virtualenv which will be shown by `(mytest)` before the command prompt. &#xA;&#xA;**Linux/macOS**&#xA;&#xA;For Linux or macOS, you can use the command: &#xA;```&#xA;source mytest/Scripts/activate.sh&#xA;```&#xA;In the above command, `mytest` can be anything that you have used while creating the virtualenv. This should activate the vrtualenv and will be indicated by `(mytest)` before the prompt in the terminal. &#xA;&#xA;&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1629023409389/kEe5AVAsr.png)&#xA;From the above image, we can see that we created and activated an virtualenv in python in a folder. &#xA;So, this is the walkthrough for setting up the virtualenv for a Django project, now we will move to install Django in this environment.&#xA;&#xA;- ### Installing Django using pip&#xA;&#xA;This is quite straightforward. You can use `pip install django` or `pip3 install django` or the normal way you install a library from pip. &#xA;&#xA;- ### Creating a Django project&#xA;&#xA;To create a django project, we use the django-admin command like:&#xA;```&#xA;django-admin startproject mywebsite&#xA;```&#xA;This will create a folder called `mywebsite` or your project name anything you like. Inside the `mywebsite` folder, you will have 2 things: `manage.py` file, and `mywebsite` folder . Yes there will be another `mywebsite` folder inside your project which will have the settings, URLs and other global(project-level) configuration files. The `manage.py` file is the most important file here. You should never touch/edit this file. We use this file to carry out all the operations from running the server to managing the database. &#xA;&#xA;![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1629032998253/QQ5QXf4v5.png)&#xA;&#xA;### Setup script  for Windows&#xA;&#xA;The below is a batch file for Windows Operating System. Save the file in a `.bat` extension.&#xA;&lt;iframe&#xA;  src=&#34;https://carbon.now.sh/embed?bg=rgba%28171%2C+184%2C+195%2C+1%29&amp;t=cobalt&amp;wt=none&amp;l=application%2Fx-sh&amp;ds=true&amp;dsyoff=20px&amp;dsblur=68px&amp;wc=true&amp;wa=true&amp;pv=56px&amp;ph=56px&amp;ln=false&amp;fl=1&amp;fm=Hack&amp;fs=14px&amp;lh=133%25&amp;si=false&amp;es=2x&amp;wm=false&amp;code=mkdir%2520%25251%2520%250Acd%2520%25251%250Apip%2520install%2520virtualenv%250Avirtualenv%2520env%250Acall%2520env%255CScripts%255Cactivate%250A%250Apip%2520install%2520django%250Adjango-admin%2520startproject%2520%25251%2520.%250Acls%250A&#34;&#xA;  style=&#34;width: 803px; height: 366px; border:0; transform: scale(1); overflow:hidden;&#34;&#xA;  sandbox=&#34;allow-scripts allow-same-origin&#34;&gt;&#xA;&lt;/iframe&gt;&#xA;&#xA;Make sure the file is saved in a `.bat` file and be in the folder where you would like to create the Django project. After being in the appropriate location, enter the following command:&#xA;&#xA;```&#xA;commands.bat myproj&#xA;```&#xA;Here I assume that you have named the script file as `commands.bat`, you can name it anything you like, but I like to keep this a convention. After this you don&#39;t need to do anything, everything will be handled by the script. &#xA;You can run the server using &#xA;```&#xA;python manage.py runserver&#xA;```&#xA;This will have the base django project set up on your system. The below is the live demonstration of the script, I have deliberately removed the `cls` command to show the process. It won&#39;t break the script if you add this to it. &#xA;&#xA;![djqss.gif](https://cdn.hashnode.com/res/hashnode/image/upload/v1629024613612/Zsqa54_KD.gif)&#xA;&#xA;### Setup script  for Linux/macOS&#xA;&#xA;Copy the code from the below script and save it in a file preferably called `commands.sh`, you can name it anything you want but keep the `.sh` extension after it to identify it as a shell-script.&#xA;&#xA;After that file is saved locally, you can run the script by passing the positional parameter as the name of the Django project. The command will be like:&#xA;&#xA;```&#xA;bash commands.sh myproj&#xA;```&#xA; &#xA;&lt;iframe&#xA;  src=&#34;https://carbon.now.sh/embed?bg=rgba%28171%2C+184%2C+195%2C+1%29&amp;t=blackboard&amp;wt=none&amp;l=application%2Fx-sh&amp;ds=true&amp;dsyoff=20px&amp;dsblur=68px&amp;wc=true&amp;wa=true&amp;pv=56px&amp;ph=56px&amp;ln=false&amp;fl=1&amp;fm=Hack&amp;fs=14px&amp;lh=133%25&amp;si=false&amp;es=2x&amp;wm=false&amp;code=%2523%21%252Fusr%252Fbin%252Fenv%2520bash%250A%250Amkdir%2520%25241%250Acd%2520%25241%250Apip%2520install%2520virtualenv%250Avirtualenv%2520env%250Asource%2520env%255Cbin%255Cactivate%250A%250Apip%2520install%2520django%250Adjango-admin%2520startproject%2520%25241%2520.%250Aclear&#34;&#xA;  style=&#34;width: 803px; height: 384px; border:0; transform: scale(1); overflow:hidden;&#34;&#xA;  sandbox=&#34;allow-scripts allow-same-origin&#34;&gt;&#xA;&lt;/iframe&gt;&#xA;&#xA;From the output of the script, you will have created a Django project inside a virtual environment. We can manually activate the virtual environment. You can experiment it within your system as it can be a lot more customizable. This is just bare bone script to start a Django project but you can add your own things into it.&#xA;&#xA;## Conclusion&#xA;Thus, from this little article, you can get a bit lazier in initializing a bare-bone Django project. We were able to understand the structure of the Django project and how to set up a virtual environment powered by Python. &#xA;&#xA;After understanding those concepts we then moved on to making a script namely a batch file and a shell script to automate the initialization of the Django project. I hope it might have helped in some or another way, Thanks for reading till here. Happy Coding :)&#xA;</content>
      <type>posts</type>
    </item>
  </channel>
</rss>