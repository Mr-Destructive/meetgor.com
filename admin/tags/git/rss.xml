<rss version="2.0">
  <channel>
    <title>Meet Gor - Tag: git</title>
    <link>meetgor.com</link>
    <description>Posts tagged with git</description>
    <language>en-us</language>
    <pubDate>Fri, 17 Oct 2025 16:57:38 UTC</pubDate>
    <item>
      <title>Add hunks: only line specific changes with git add -p</title>
      <link>meetgor.com/</link>
      <description></description>
      <pubDate>Fri, 11 Apr 2025 00:00:00 UTC</pubDate>
      <content>&#xA;I had made the changes for a future release, next set of changes so to speak in git terms. Then, I encountered a bug while testing the previous changes. Now, I could have &#xA;1. Open VS Code and add that little `+` icon in the gutter to fix the bug&#xA;2. Create a separate branch with stashed changes for this new feature&#xA;3. Use GitSigns in NeoVim&#xA;4. Use `git add -p` to stage [hunks](https://git-scm.com/book/en/v2/Git-Tools-Interactive-Staging)&#xA;&#xA;The last one was a gem given by ChatGPT, and then I went a bit rabbit hole for reading about it and it turns out it&#39;s real! &#xA;&#xA;It&#39;s called staging patches, and it has an interactive mode to select or reject each hunk (patch, line of changes) at a time. So by entering the command `git add -p` this will let you go through each file and individual change (patch/hunk) and take action interactively. You can use the below commands for moving one hunk or patch at a time: &#xA;- `y` for adding (staging) the current hunk (patch)&#xA;- `n` for not staging the current hunk&#xA;&#xA;Or you can even use the below commands for moving one file at once:&#xA;- `a` for adding (staging) all the patches in the file (just like `git add file.txt`)&#xA;- `d` for not staging the file at all, just skip the file for patching&#xA;&#xA;If there are multiple hunks (patches) in the file, the prompt will show the other options like `[y,n,q,a,d,j,J,g,/,e,?]` &#xA;&#xA;```&#xA;(1/7) Stage this hunk [y,n,q,a,d,j,J,g,/,e,?]? g&#xA;1: -33,6 +33,7 +from app.utils.utils import get_additional_param&#xA;2: -345,6 +346,7 + strict_check = str_to_bool(get_additional_param(&#34;stri&#xA;....&#xA;....&#xA;7: -875,7 +878,7 - if strict_check:&#xA;```&#xA;&#xA;This shows the `g`, `j`, `J`, `/`, and `e` which are quite helpful for navigating across multiple patches (hunks) in the file. I haven&#39;t explored all of them, but the 4, I showed earlier, are the ones that I think I will be using extensively now, within the terminal. No need of fancy editor shenanigans and redundant branching tricks. &#xA;&#xA;Git Good!&#xA;</content>
      <type>til</type>
    </item>
    <item>
      <title>Adding SSH Keys for Multiple Accounts in Git</title>
      <link>meetgor.com/git-ssh-multiple-accounts</link>
      <description>Setting up SSH config for using multiple accounts for Git repositories.</description>
      <pubDate>Fri, 22 Mar 2024 00:00:00 UTC</pubDate>
      <content>Let&#39;s  say you have multiple github accounts. One for your personal projects, one for your company that you work at, and one other remote repository account (let&#39;s say gitlab).&#xA;&#xA;You are juggling with multiple accounts, you should not waste much time and pick a SSH from those remote repository and pull it in your local machine, that makes the process just smooth and saves a ton of time.&#xA;&#xA;### Create a SSH Key&#xA;&#xA;To create a SSH key, in linux you can use `ssh-keygen` command.&#xA;&#xA;```bash&#xA;ssh-keygen -t ed25519 -C &#34;alice@example.com&#34;&#xA;```&#xA;&#xA;The above command will prompt you for two things&#xA;&#xA;1. The location where you want to store the key&#xA;2. The passphrase for accessing the key&#xA;&#xA;&#xA;### Add SSH Key to Github&#xA;&#xA;Locate to the `ssh` folder and copy the generated `.pub` file to your `github` account.&#xA;&#xA;For example, if you have created the key at `~/.ssh/your_name` then copy the contents of the file `~/.ssh/your_name.pub` to your clipbaord.&#xA;&#xA;Navigate to your `github` account and in the settings, `SSH and GPG keys` tab, click on `Add SSH key` and copy the contents of your clipboard to the `Key` field.&#xA;&#xA;&#xA;### Configuring the SSH keys for multiple accounts&#xA;&#xA;```config&#xA;Host your_company&#xA;  HostName github.com&#xA;  User git&#xA;  IdentityFile ~/.ssh/your_company&#xA;&#xA;Host your_name&#xA;  HostName github.com&#xA;  User git&#xA;  IdentityFile ~/.ssh/your_name&#xA;&#xA;Host some_name&#xA;  HostName gitlab.com&#xA;  User git&#xA;  IdentityFile ~/.ssh/some_name&#xA;```&#xA;&#xA;You can change the `Host` config tag values in the `~/.ssh/conFig`&#xA;&#xA;The next time you clone/create a repository on those remote git providers, you need to specify the ssh key for that account.&#xA;&#xA;For example, if you have a repository `github.com/StartUp_company/some_wired_project` then you can specify the remote as `git@your_company.com:StartUp_company/some_wired_project`. Here, the `git@your_company` is the `Host` value tag from the `~/.ssh/config`. If that repository is from your `your_company` organisation/user scope, you need to add the `git@your_company` tag, if that&#39;s your project, simply add `git@your_name` before the repository url i.e. `your_name/repo_name` which would set the origin as `git@your_name:your_name/repo_name`, here the 1st `your_name` is the tag from the `Host` config and the 2nd `your_name` is the github username.&#xA;&#xA;So, in summary if you wanted to use multiple accounts in the same machine, you can understand in the following example:&#xA;&#xA;```bash&#xA;ssh -T git@your_name&#xA;&#xA;git clone https://github.com/your_name/repo_name&#xA;```&#xA;&#xA;However, you will need to authenticate with the ssh keys in this way everytime you push/pull a repository. So for that, you can set the origin with the `git@your_name` tag as the host for automatically authenticating the ssh keys on every push/pull or other activities.&#xA;&#xA;Thanks for reading, Happy Coding :)&#xA;</content>
      <type>til</type>
    </item>
  </channel>
</rss>