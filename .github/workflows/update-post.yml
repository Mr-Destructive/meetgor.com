name: Sync Content and Deploy

on:
  # Manual trigger with options
  workflow_dispatch:
    inputs:
      sync_all:
        description: 'Sync all posts (not just recent)'
        required: false
        default: false
        type: boolean
      dry_run:
        description: 'Dry run (no files written)'
        required: false
        default: false
        type: boolean
      verbose:
        description: 'Verbose logging'
        required: false
        default: false
        type: boolean
  
  # Webhook trigger from external sources
  repository_dispatch:
    types: [content-update, sync-posts]

env:
  GO_VERSION: '1.23.3'
  CONTENT_DIR: 'posts'

jobs:
  sync-content:
    runs-on: ubuntu-latest
    
    outputs:
      changes-detected: ${{ steps.changes.outputs.changes }}
      posts-processed: ${{ steps.sync.outputs.posts_processed }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
    
    - name: Install dependencies
      run: |
        go mod init content-sync || true
        go get github.com/JohannesKaufmann/html-to-markdown/v2
        go get github.com/tursodatabase/libsql-client-go/libsql
    
    - name: Determine sync parameters
      id: params
      run: |
        # Set default parameters
        SYNC_ARGS=""
        
        # Handle manual workflow dispatch inputs
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          if [[ "${{ github.event.inputs.sync_all }}" == "true" ]]; then
            SYNC_ARGS="$SYNC_ARGS --sync-all"
          fi
          if [[ "${{ github.event.inputs.dry_run }}" == "true" ]]; then
            SYNC_ARGS="$SYNC_ARGS --dry-run"
          fi
          if [[ "${{ github.event.inputs.verbose }}" == "true" ]]; then
            SYNC_ARGS="$SYNC_ARGS --verbose"
          fi
        fi
        
        # Handle repository dispatch
        if [[ "${{ github.event_name }}" == "repository_dispatch" ]]; then
          if [[ "${{ github.event.action }}" == "content-update" ]]; then
            # Check if sync_all was requested in client_payload
            if [[ "${{ github.event.client_payload.sync_all }}" == "true" ]]; then
              SYNC_ARGS="$SYNC_ARGS --sync-all"
            fi
          fi
          SYNC_ARGS="$SYNC_ARGS --verbose"
        fi
        
        # For scheduled runs, be less verbose
        if [[ "${{ github.event_name }}" == "schedule" ]]; then
          SYNC_ARGS="$SYNC_ARGS --hours 3"
        fi
        
        echo "sync_args=$SYNC_ARGS" >> $GITHUB_OUTPUT
        echo "Using sync arguments: $SYNC_ARGS"
    
    - name: Run content sync
      id: sync
      env:
        TURSO_DATABASE_NAME: ${{ secrets.TURSO_DATABASE_NAME }}
        TURSO_DATABASE_AUTH_TOKEN: ${{ secrets.TURSO_DATABASE_AUTH_TOKEN }}
      run: |
        echo "Starting content sync..."
        
        # Run the sync_db script with captured output
        if go run sync_db.go ${{ steps.params.outputs.sync_args }} 2>&1 | tee sync_output.log; then
          echo "Sync completed successfully"
          POSTS_PROCESSED=$(grep -o "Processing complete: [0-9]*" sync_output.log | grep -o "[0-9]*" | head -1 || echo "0")
          echo "posts_processed=$POSTS_PROCESSED" >> $GITHUB_OUTPUT
        else
          echo "Sync failed"
          cat sync_output.log
          exit 1
        fi
    
    - name: Debug file locations
      run: |
        echo "All changed files:"
        git status --porcelain
        echo "Directory structure:"
        find . -name "*.md" -not -path "./.git/*" | head -10

    - name: Check for changes
      id: changes
      run: |
        # Check if any content files were modified
        if [[ -n $(git status --porcelain ${{ env.CONTENT_DIR }}/) ]]; then
          echo "changes=true" >> $GITHUB_OUTPUT
          echo "Content changes detected:"
          git status --porcelain ${{ env.CONTENT_DIR }}/
        else
          echo "changes=false" >> $GITHUB_OUTPUT
          echo "No content changes detected"
        fi
        
        # Also check if timestamp file was updated
        if [[ -n $(git status --porcelain .last_build_timestamp) ]]; then
          echo "Timestamp file updated"
        fi
    
    - name: Show sync summary
      run: |
        echo "## Sync Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Posts processed:** ${{ steps.sync.outputs.posts_processed }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Changes detected:** ${{ steps.changes.outputs.changes }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ steps.changes.outputs.changes }}" == "true" ]]; then
          echo "- **Changed files:**" >> $GITHUB_STEP_SUMMARY
          git status --porcelain ${{ env.CONTENT_DIR }}/ | sed 's/^/  - /' >> $GITHUB_STEP_SUMMARY
        fi
    
    - name: Commit and push changes
      if: steps.changes.outputs.changes == 'true' && !contains(github.event.inputs.dry_run, 'true')
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action Bot"
        
        # Add all content changes and timestamp
        git add ${{ env.CONTENT_DIR }}/ .last_build_timestamp
        
        # Create descriptive commit message
        COMMIT_MSG="üîÑ Auto-sync content from database"
        if [[ "${{ steps.sync.outputs.posts_processed }}" != "0" ]]; then
          COMMIT_MSG="$COMMIT_MSG (${{ steps.sync.outputs.posts_processed }} posts processed)"
        fi
        COMMIT_MSG="$COMMIT_MSG - $(date -u '+%Y-%m-%d %H:%M UTC')"
        
        git commit -m "$COMMIT_MSG"
        git push
        
        echo "Changes committed and pushed successfully"

  deploy:
    needs: sync-content
    if: needs.sync-content.outputs.changes-detected == 'true'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        ref: ${{ github.ref }}
    
    - name: Wait for latest changes
      run: |
        # Small delay to ensure we have the latest changes
        sleep 5
        git pull origin ${{ github.ref_name }}
    
    - name: Setup Hugo
      uses: peaceiris/actions-hugo@v2
      with:
        hugo-version: 'latest'
        extended: true
    
    - name: Build site
      run: |
        echo "Building Hugo site..."
        hugo --minify --gc
        
        # Verify build output
        if [[ ! -d "public" ]]; then
          echo "Error: Hugo build failed - no public directory created"
          exit 1
        fi
        
        echo "Build completed successfully"
        echo "Generated files: $(find public -type f | wc -l)"
    
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      if: github.ref == 'refs/heads/main'
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./public
        commit_message: üöÄ Deploy updated content
    
    # Alternative deployment methods (uncomment as needed)
    
    # - name: Deploy to Netlify
    #   env:
    #     NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
    #     NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
    #   run: |
    #     npm install -g netlify-cli
    #     netlify deploy --prod --dir=public
    
    # - name: Deploy to S3
    #   env:
    #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #     AWS_REGION: us-east-1
    #   run: |
    #     aws s3 sync public/ s3://${{ secrets.S3_BUCKET }} --delete
    
    - name: Deployment summary
      run: |
        echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Site deployed:** ‚úÖ" >> $GITHUB_STEP_SUMMARY
        echo "- **Posts processed:** ${{ needs.sync-content.outputs.posts-processed }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Deployment time:** $(date -u '+%Y-%m-%d %H:%M UTC')" >> $GITHUB_STEP_SUMMARY

  notify:
    needs: [sync-content, deploy]
    if: always() && (needs.sync-content.outputs.changes-detected == 'true' || failure())
    runs-on: ubuntu-latest
    
    steps:
    - name: Notify completion
      run: |
        if [[ "${{ needs.deploy.result }}" == "success" ]]; then
          echo "‚úÖ Content sync and deployment completed successfully"
          echo "Posts processed: ${{ needs.sync-content.outputs.posts-processed }}"
        elif [[ "${{ needs.sync-content.result }}" == "failure" ]]; then
          echo "‚ùå Content sync failed"
        elif [[ "${{ needs.deploy.result }}" == "failure" ]]; then
          echo "‚ùå Deployment failed after successful sync"
        else
          echo "‚ÑπÔ∏è No changes detected - no deployment needed"
        fi
